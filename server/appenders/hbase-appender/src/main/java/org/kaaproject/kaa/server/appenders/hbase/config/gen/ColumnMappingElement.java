/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.appenders.hbase.config.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ColumnMappingElement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ColumnMappingElement\",\"namespace\":\"org.kaaproject.kaa.server.appenders.hbase.config.gen\",\"fields\":[{\"name\":\"value\",\"type\":\"string\",\"displayName\":\"Value\",\"weight\":0.2,\"by_default\":\"applicationToken\"},{\"name\":\"valueType\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"BIGINT\",\"BLOB\",\"BOOLEAN\",\"DOUBLE\",\"FLOAT\",\"INT\",\"TEXT\",\"ARRAY\"]},\"displayName\":\"Type\",\"weight\":0.2,\"by_default\":\"TEXT\"},{\"name\":\"cf\",\"type\":\"string\",\"displayName\":\"ColumnFamily\",\"weight\":0.2},{\"name\":\"columnName\",\"type\":\"string\",\"displayName\":\"Column\",\"weight\":0.2},{\"name\":\"rowKey\",\"type\":\"boolean\",\"displayName\":\"Is part of Row key?\",\"weight\":0.1,\"by_default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence value;
  @Deprecated public org.kaaproject.kaa.server.appenders.hbase.config.gen.Type valueType;
  @Deprecated public java.lang.CharSequence cf;
  @Deprecated public java.lang.CharSequence columnName;
  @Deprecated public boolean rowKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ColumnMappingElement() {}

  /**
   * All-args constructor.
   */
  public ColumnMappingElement(java.lang.CharSequence value, org.kaaproject.kaa.server.appenders.hbase.config.gen.Type valueType, java.lang.CharSequence cf, java.lang.CharSequence columnName, java.lang.Boolean rowKey) {
    this.value = value;
    this.valueType = valueType;
    this.cf = cf;
    this.columnName = columnName;
    this.rowKey = rowKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return valueType;
    case 2: return cf;
    case 3: return columnName;
    case 4: return rowKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.CharSequence)value$; break;
    case 1: valueType = (org.kaaproject.kaa.server.appenders.hbase.config.gen.Type)value$; break;
    case 2: cf = (java.lang.CharSequence)value$; break;
    case 3: columnName = (java.lang.CharSequence)value$; break;
    case 4: rowKey = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'valueType' field.
   */
  public org.kaaproject.kaa.server.appenders.hbase.config.gen.Type getValueType() {
    return valueType;
  }

  /**
   * Sets the value of the 'valueType' field.
   * @param value the value to set.
   */
  public void setValueType(org.kaaproject.kaa.server.appenders.hbase.config.gen.Type value) {
    this.valueType = value;
  }

  /**
   * Gets the value of the 'cf' field.
   */
  public java.lang.CharSequence getCf() {
    return cf;
  }

  /**
   * Sets the value of the 'cf' field.
   * @param value the value to set.
   */
  public void setCf(java.lang.CharSequence value) {
    this.cf = value;
  }

  /**
   * Gets the value of the 'columnName' field.
   */
  public java.lang.CharSequence getColumnName() {
    return columnName;
  }

  /**
   * Sets the value of the 'columnName' field.
   * @param value the value to set.
   */
  public void setColumnName(java.lang.CharSequence value) {
    this.columnName = value;
  }

  /**
   * Gets the value of the 'rowKey' field.
   */
  public java.lang.Boolean getRowKey() {
    return rowKey;
  }

  /**
   * Sets the value of the 'rowKey' field.
   * @param value the value to set.
   */
  public void setRowKey(java.lang.Boolean value) {
    this.rowKey = value;
  }

  /** Creates a new ColumnMappingElement RecordBuilder */
  public static org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder newBuilder() {
    return new org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder();
  }
  
  /** Creates a new ColumnMappingElement RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder newBuilder(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder other) {
    return new org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder(other);
  }
  
  /** Creates a new ColumnMappingElement RecordBuilder by copying an existing ColumnMappingElement instance */
  public static org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder newBuilder(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement other) {
    return new org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder(other);
  }
  
  /**
   * RecordBuilder for ColumnMappingElement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ColumnMappingElement>
    implements org.apache.avro.data.RecordBuilder<ColumnMappingElement> {

    private java.lang.CharSequence value;
    private org.kaaproject.kaa.server.appenders.hbase.config.gen.Type valueType;
    private java.lang.CharSequence cf;
    private java.lang.CharSequence columnName;
    private boolean rowKey;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueType)) {
        this.valueType = data().deepCopy(fields()[1].schema(), other.valueType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cf)) {
        this.cf = data().deepCopy(fields()[2].schema(), other.cf);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.columnName)) {
        this.columnName = data().deepCopy(fields()[3].schema(), other.columnName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rowKey)) {
        this.rowKey = data().deepCopy(fields()[4].schema(), other.rowKey);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ColumnMappingElement instance */
    private Builder(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement other) {
            super(org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueType)) {
        this.valueType = data().deepCopy(fields()[1].schema(), other.valueType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cf)) {
        this.cf = data().deepCopy(fields()[2].schema(), other.cf);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.columnName)) {
        this.columnName = data().deepCopy(fields()[3].schema(), other.columnName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rowKey)) {
        this.rowKey = data().deepCopy(fields()[4].schema(), other.rowKey);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'value' field */
    public java.lang.CharSequence getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'value' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'valueType' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.Type getValueType() {
      return valueType;
    }
    
    /** Sets the value of the 'valueType' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder setValueType(org.kaaproject.kaa.server.appenders.hbase.config.gen.Type value) {
      validate(fields()[1], value);
      this.valueType = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'valueType' field has been set */
    public boolean hasValueType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'valueType' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'cf' field */
    public java.lang.CharSequence getCf() {
      return cf;
    }
    
    /** Sets the value of the 'cf' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder setCf(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.cf = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'cf' field has been set */
    public boolean hasCf() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'cf' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder clearCf() {
      cf = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'columnName' field */
    public java.lang.CharSequence getColumnName() {
      return columnName;
    }
    
    /** Sets the value of the 'columnName' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder setColumnName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.columnName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'columnName' field has been set */
    public boolean hasColumnName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'columnName' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder clearColumnName() {
      columnName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'rowKey' field */
    public java.lang.Boolean getRowKey() {
      return rowKey;
    }
    
    /** Sets the value of the 'rowKey' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder setRowKey(boolean value) {
      validate(fields()[4], value);
      this.rowKey = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'rowKey' field has been set */
    public boolean hasRowKey() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'rowKey' field */
    public org.kaaproject.kaa.server.appenders.hbase.config.gen.ColumnMappingElement.Builder clearRowKey() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ColumnMappingElement build() {
      try {
        ColumnMappingElement record = new ColumnMappingElement();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.valueType = fieldSetFlags()[1] ? this.valueType : (org.kaaproject.kaa.server.appenders.hbase.config.gen.Type) defaultValue(fields()[1]);
        record.cf = fieldSetFlags()[2] ? this.cf : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.columnName = fieldSetFlags()[3] ? this.columnName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.rowKey = fieldSetFlags()[4] ? this.rowKey : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
