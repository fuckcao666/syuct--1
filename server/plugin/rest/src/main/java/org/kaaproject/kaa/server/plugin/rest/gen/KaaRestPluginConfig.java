/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.plugin.rest.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KaaRestPluginConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KaaRestPluginConfig\",\"namespace\":\"org.kaaproject.kaa.server.plugin.rest.gen\",\"fields\":[{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"Protocol\",\"symbols\":[\"HTTP\",\"HTTPS\"]},\"default\":\"HTTP\",\"by_default\":\"HTTP\"},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"port\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private org.kaaproject.kaa.server.plugin.rest.gen.Protocol protocol;
   private java.lang.String host;
   private int port;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public KaaRestPluginConfig() {}

  /**
   * All-args constructor.
   */
  public KaaRestPluginConfig(org.kaaproject.kaa.server.plugin.rest.gen.Protocol protocol, java.lang.String host, java.lang.Integer port) {
    this.protocol = protocol;
    this.host = host;
    this.port = port;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return protocol;
    case 1: return host;
    case 2: return port;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: protocol = (org.kaaproject.kaa.server.plugin.rest.gen.Protocol)value$; break;
    case 1: host = (java.lang.String)value$; break;
    case 2: port = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'protocol' field.
   */
  public org.kaaproject.kaa.server.plugin.rest.gen.Protocol getProtocol() {
    return protocol;
  }

  /**
   * Sets the value of the 'protocol' field.
   * @param value the value to set.
   */
  public void setProtocol(org.kaaproject.kaa.server.plugin.rest.gen.Protocol value) {
    this.protocol = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.String value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Sets the value of the 'port' field.
   * @param value the value to set.
   */
  public void setPort(java.lang.Integer value) {
    this.port = value;
  }

  /** Creates a new KaaRestPluginConfig RecordBuilder */
  public static org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder newBuilder() {
    return new org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder();
  }
  
  /** Creates a new KaaRestPluginConfig RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder newBuilder(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder other) {
    return new org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder(other);
  }
  
  /** Creates a new KaaRestPluginConfig RecordBuilder by copying an existing KaaRestPluginConfig instance */
  public static org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder newBuilder(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig other) {
    return new org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder(other);
  }
  
  /**
   * RecordBuilder for KaaRestPluginConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KaaRestPluginConfig>
    implements org.apache.avro.data.RecordBuilder<KaaRestPluginConfig> {

    private org.kaaproject.kaa.server.plugin.rest.gen.Protocol protocol;
    private java.lang.String host;
    private int port;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.protocol)) {
        this.protocol = data().deepCopy(fields()[0].schema(), other.protocol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing KaaRestPluginConfig instance */
    private Builder(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig other) {
            super(org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.protocol)) {
        this.protocol = data().deepCopy(fields()[0].schema(), other.protocol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'protocol' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.Protocol getProtocol() {
      return protocol;
    }
    
    /** Sets the value of the 'protocol' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder setProtocol(org.kaaproject.kaa.server.plugin.rest.gen.Protocol value) {
      validate(fields()[0], value);
      this.protocol = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'protocol' field has been set */
    public boolean hasProtocol() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'protocol' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.String getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder setHost(java.lang.String value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'host' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'port' field */
    public java.lang.Integer getPort() {
      return port;
    }
    
    /** Sets the value of the 'port' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder setPort(int value) {
      validate(fields()[2], value);
      this.port = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'port' field has been set */
    public boolean hasPort() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'port' field */
    public org.kaaproject.kaa.server.plugin.rest.gen.KaaRestPluginConfig.Builder clearPort() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public KaaRestPluginConfig build() {
      try {
        KaaRestPluginConfig record = new KaaRestPluginConfig();
        record.protocol = fieldSetFlags()[0] ? this.protocol : (org.kaaproject.kaa.server.plugin.rest.gen.Protocol) defaultValue(fields()[0]);
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.String) defaultValue(fields()[1]);
        record.port = fieldSetFlags()[2] ? this.port : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
