/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.kaaproject.kaa.server.common.thrift.gen.control;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ControlThriftService {

  public interface Iface extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService.Iface {

    /**
     * Tenants
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenants() throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenant(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteTenant(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Users
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUsers() throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenantUsers(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUser(String userId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUserByExternalUid(String uid) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteUser(String userId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * TenantAdmins
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenantAdmins() throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenantAdmin(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteTenantAdmin(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Applications
     * 
     * @param tenantId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getApplicationsByTenantId(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplication(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplicationByApplicationToken(String applicationToken) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteApplication(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * ConfigurationSchemas
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfigurationSchema(String configurationSchemaId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * ProfileSchemas
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileSchema(String profileSchemaId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * LogSchemas
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogSchema(String logSchemaId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogSchemaByApplicationIdAndVersion(String applicationId, int version) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * EndpointGroups
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEndpointGroupsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointGroup(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteEndpointGroup(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct removeTopicsFromEndpointGroup(String endpointGroupId, String topicId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct addTopicsToEndpointGroup(String endpointGroupId, String topicId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * ProfileFilters
     * 
     * @param endpointGroupId
     * @param includeDeprecated
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileFilterRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileFilterRecord(String schemaId, String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantProfileSchemasByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileFilter(String profileFilterId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct activateProfileFilter(String profileFilterId, String activatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct deactivateProfileFilter(String profileFilterId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteProfileFilterRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Configurations
     * 
     * @param endpointGroupId
     * @param includeDeprecated
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfigurationRecord(String schemaId, String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfiguration(String configurationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct activateConfiguration(String configurationId, String activatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct deactivateConfiguration(String configurationId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteConfigurationRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException;

    public void editUserConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * NotificationSchemas
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotificationSchema(String notificationSchemaId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationSchemasByAppId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUserNotificationSchemasByAppId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> findNotificationSchemasByAppIdAndType(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Notifications
     * 
     * @param notification
     */
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotification(String notificationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationsByTopicId(String topicId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Topics
     * 
     * @param topic
     */
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTopic(String topicId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTopicByAppId(String appId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTopicByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantTopicByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteTopicById(String topicId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Unicast Notifications
     * 
     * @param notificationId
     */
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUnicastNotification(String notificationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUnicastNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUnicastNotificationsByKeyHash(ByteBuffer keyhash) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Client SDK
     * 
     * @param sdkProfile
     */
    public void addSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteSdkProfile(String sdkProfileId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSdkProfile(String sdkProfileId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSdkProfilesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public Sdk generateSdk(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform) throws ControlThriftException, org.apache.thrift.TException;

    public boolean isSdkProfileUsed(String sdkToken) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Events
     * 
     * @param eventClassFamily
     */
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassFamiliesByTenantId(String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEventClassFamily(String eventClassFamilyId) throws ControlThriftException, org.apache.thrift.TException;

    public void addEventClassFamilySchema(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassesByFamilyIdVersionAndType(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplicationEventFamilyMap(String applicationEventFamilyMapId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getApplicationEventFamilyMapsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantEventClassFamiliesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassFamiliesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Endpoint User
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEndpointUsers() throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointUser(String endpointUserId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteEndpointUser(String endpointUserId) throws ControlThriftException, org.apache.thrift.TException;

    public String generateEndpointUserAccessToken(String externalUid, String tenantId) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * Log Appenders
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogAppendersByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogAppender(String logAppenderId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteLogAppender(String logAppenderId) throws ControlThriftException, org.apache.thrift.TException;

    public FileData generateRecordStructureLibrary(String applicationId, int logSchemaVersion) throws ControlThriftException, org.apache.thrift.TException;

    public FileData getRecordStructureSchema(String applicationId, int logSchemaVersion) throws ControlThriftException, org.apache.thrift.TException;

    public FileData getRecordStructureData(String applicationId, int schemaVersion, RecordFile recordFile) throws ControlThriftException, org.apache.thrift.TException;

    /**
     * User verifiers
     * 
     * @param applicationId
     */
    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUserVerifiersByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUserVerifier(String userVerifierId) throws ControlThriftException, org.apache.thrift.TException;

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier) throws ControlThriftException, org.apache.thrift.TException;

    public void deleteUserVerifier(String userVerifierId) throws ControlThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService .AsyncIface {

    public void getTenants(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTenant(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTenant(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUsers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTenantUsers(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserByExternalUid(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTenantAdmins(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTenantAdmin(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTenantAdmin(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationsByTenantId(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplication(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationByApplicationToken(String applicationToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteApplication(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfigurationSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfigurationSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfigurationSchema(String configurationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileSchema(String profileSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogSchema(String logSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogSchemaByApplicationIdAndVersion(String applicationId, int version, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEndpointGroupsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEndpointGroup(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEndpointGroup(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeTopicsFromEndpointGroup(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTopicsToEndpointGroup(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileFilterRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileFilterRecord(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVacantProfileSchemasByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileFilter(String profileFilterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateProfileFilter(String profileFilterId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deactivateProfileFilter(String profileFilterId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProfileFilterRecord(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfigurationRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfigurationRecord(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getConfiguration(String configurationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateConfiguration(String configurationId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deactivateConfiguration(String configurationId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteConfigurationRecord(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editUserConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotificationSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotificationSchema(String notificationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotificationSchemasByAppId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserNotificationSchemasByAppId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findNotificationSchemasByAppIdAndType(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotification(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotificationsByTopicId(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopic(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopicByAppId(String appId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopicByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVacantTopicByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTopicById(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUnicastNotification(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editUnicastNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUnicastNotificationsByKeyHash(ByteBuffer keyhash, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSdkProfile(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSdkProfile(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSdkProfilesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generateSdk(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isSdkProfileUsed(String sdkToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventClassFamiliesByTenantId(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventClassFamily(String eventClassFamilyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addEventClassFamilySchema(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventClassesByFamilyIdVersionAndType(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationEventFamilyMap(String applicationEventFamilyMapId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationEventFamilyMapsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVacantEventClassFamiliesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventClassFamiliesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEndpointUsers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEndpointUser(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEndpointUser(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generateEndpointUserAccessToken(String externalUid, String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogAppendersByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLogAppender(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLogAppender(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generateRecordStructureLibrary(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordStructureSchema(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordStructureData(String applicationId, int schemaVersion, RecordFile recordFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserVerifiersByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserVerifier(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUserVerifier(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenants() throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTenants();
      return recv_getTenants();
    }

    public void send_getTenants() throws org.apache.thrift.TException
    {
      getTenants_args args = new getTenants_args();
      sendBase("getTenants", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getTenants() throws ControlThriftException, org.apache.thrift.TException
    {
      getTenants_result result = new getTenants_result();
      receiveBase(result, "getTenants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTenants failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenant(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTenant(tenantId);
      return recv_getTenant();
    }

    public void send_getTenant(String tenantId) throws org.apache.thrift.TException
    {
      getTenant_args args = new getTenant_args();
      args.setTenantId(tenantId);
      sendBase("getTenant", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getTenant() throws ControlThriftException, org.apache.thrift.TException
    {
      getTenant_result result = new getTenant_result();
      receiveBase(result, "getTenant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTenant failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editTenant(tenant);
      return recv_editTenant();
    }

    public void send_editTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant) throws org.apache.thrift.TException
    {
      editTenant_args args = new editTenant_args();
      args.setTenant(tenant);
      sendBase("editTenant", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editTenant() throws ControlThriftException, org.apache.thrift.TException
    {
      editTenant_result result = new editTenant_result();
      receiveBase(result, "editTenant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editTenant failed: unknown result");
    }

    public void deleteTenant(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteTenant(tenantId);
      recv_deleteTenant();
    }

    public void send_deleteTenant(String tenantId) throws org.apache.thrift.TException
    {
      deleteTenant_args args = new deleteTenant_args();
      args.setTenantId(tenantId);
      sendBase("deleteTenant", args);
    }

    public void recv_deleteTenant() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteTenant_result result = new deleteTenant_result();
      receiveBase(result, "deleteTenant");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUsers() throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUsers();
      return recv_getUsers();
    }

    public void send_getUsers() throws org.apache.thrift.TException
    {
      getUsers_args args = new getUsers_args();
      sendBase("getUsers", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getUsers() throws ControlThriftException, org.apache.thrift.TException
    {
      getUsers_result result = new getUsers_result();
      receiveBase(result, "getUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUsers failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenantUsers(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTenantUsers(tenantId);
      return recv_getTenantUsers();
    }

    public void send_getTenantUsers(String tenantId) throws org.apache.thrift.TException
    {
      getTenantUsers_args args = new getTenantUsers_args();
      args.setTenantId(tenantId);
      sendBase("getTenantUsers", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getTenantUsers() throws ControlThriftException, org.apache.thrift.TException
    {
      getTenantUsers_result result = new getTenantUsers_result();
      receiveBase(result, "getTenantUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTenantUsers failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUser(String userId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUser(userId);
      return recv_getUser();
    }

    public void send_getUser(String userId) throws org.apache.thrift.TException
    {
      getUser_args args = new getUser_args();
      args.setUserId(userId);
      sendBase("getUser", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getUser() throws ControlThriftException, org.apache.thrift.TException
    {
      getUser_result result = new getUser_result();
      receiveBase(result, "getUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUser failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUserByExternalUid(String uid) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUserByExternalUid(uid);
      return recv_getUserByExternalUid();
    }

    public void send_getUserByExternalUid(String uid) throws org.apache.thrift.TException
    {
      getUserByExternalUid_args args = new getUserByExternalUid_args();
      args.setUid(uid);
      sendBase("getUserByExternalUid", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getUserByExternalUid() throws ControlThriftException, org.apache.thrift.TException
    {
      getUserByExternalUid_result result = new getUserByExternalUid_result();
      receiveBase(result, "getUserByExternalUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserByExternalUid failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editUser(user);
      return recv_editUser();
    }

    public void send_editUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user) throws org.apache.thrift.TException
    {
      editUser_args args = new editUser_args();
      args.setUser(user);
      sendBase("editUser", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editUser() throws ControlThriftException, org.apache.thrift.TException
    {
      editUser_result result = new editUser_result();
      receiveBase(result, "editUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editUser failed: unknown result");
    }

    public void deleteUser(String userId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteUser(userId);
      recv_deleteUser();
    }

    public void send_deleteUser(String userId) throws org.apache.thrift.TException
    {
      deleteUser_args args = new deleteUser_args();
      args.setUserId(userId);
      sendBase("deleteUser", args);
    }

    public void recv_deleteUser() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteUser_result result = new deleteUser_result();
      receiveBase(result, "deleteUser");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTenantAdmins() throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTenantAdmins();
      return recv_getTenantAdmins();
    }

    public void send_getTenantAdmins() throws org.apache.thrift.TException
    {
      getTenantAdmins_args args = new getTenantAdmins_args();
      sendBase("getTenantAdmins", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getTenantAdmins() throws ControlThriftException, org.apache.thrift.TException
    {
      getTenantAdmins_result result = new getTenantAdmins_result();
      receiveBase(result, "getTenantAdmins");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTenantAdmins failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenantAdmin(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTenantAdmin(tenantId);
      return recv_getTenantAdmin();
    }

    public void send_getTenantAdmin(String tenantId) throws org.apache.thrift.TException
    {
      getTenantAdmin_args args = new getTenantAdmin_args();
      args.setTenantId(tenantId);
      sendBase("getTenantAdmin", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getTenantAdmin() throws ControlThriftException, org.apache.thrift.TException
    {
      getTenantAdmin_result result = new getTenantAdmin_result();
      receiveBase(result, "getTenantAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTenantAdmin failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editTenantAdmin(tenantAdmin);
      return recv_editTenantAdmin();
    }

    public void send_editTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin) throws org.apache.thrift.TException
    {
      editTenantAdmin_args args = new editTenantAdmin_args();
      args.setTenantAdmin(tenantAdmin);
      sendBase("editTenantAdmin", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editTenantAdmin() throws ControlThriftException, org.apache.thrift.TException
    {
      editTenantAdmin_result result = new editTenantAdmin_result();
      receiveBase(result, "editTenantAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editTenantAdmin failed: unknown result");
    }

    public void deleteTenantAdmin(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteTenantAdmin(tenantId);
      recv_deleteTenantAdmin();
    }

    public void send_deleteTenantAdmin(String tenantId) throws org.apache.thrift.TException
    {
      deleteTenantAdmin_args args = new deleteTenantAdmin_args();
      args.setTenantId(tenantId);
      sendBase("deleteTenantAdmin", args);
    }

    public void recv_deleteTenantAdmin() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteTenantAdmin_result result = new deleteTenantAdmin_result();
      receiveBase(result, "deleteTenantAdmin");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getApplicationsByTenantId(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getApplicationsByTenantId(tenantId);
      return recv_getApplicationsByTenantId();
    }

    public void send_getApplicationsByTenantId(String tenantId) throws org.apache.thrift.TException
    {
      getApplicationsByTenantId_args args = new getApplicationsByTenantId_args();
      args.setTenantId(tenantId);
      sendBase("getApplicationsByTenantId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getApplicationsByTenantId() throws ControlThriftException, org.apache.thrift.TException
    {
      getApplicationsByTenantId_result result = new getApplicationsByTenantId_result();
      receiveBase(result, "getApplicationsByTenantId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationsByTenantId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplication(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getApplication(applicationId);
      return recv_getApplication();
    }

    public void send_getApplication(String applicationId) throws org.apache.thrift.TException
    {
      getApplication_args args = new getApplication_args();
      args.setApplicationId(applicationId);
      sendBase("getApplication", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getApplication() throws ControlThriftException, org.apache.thrift.TException
    {
      getApplication_result result = new getApplication_result();
      receiveBase(result, "getApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplication failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplicationByApplicationToken(String applicationToken) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getApplicationByApplicationToken(applicationToken);
      return recv_getApplicationByApplicationToken();
    }

    public void send_getApplicationByApplicationToken(String applicationToken) throws org.apache.thrift.TException
    {
      getApplicationByApplicationToken_args args = new getApplicationByApplicationToken_args();
      args.setApplicationToken(applicationToken);
      sendBase("getApplicationByApplicationToken", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getApplicationByApplicationToken() throws ControlThriftException, org.apache.thrift.TException
    {
      getApplicationByApplicationToken_result result = new getApplicationByApplicationToken_result();
      receiveBase(result, "getApplicationByApplicationToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationByApplicationToken failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editApplication(application);
      return recv_editApplication();
    }

    public void send_editApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application) throws org.apache.thrift.TException
    {
      editApplication_args args = new editApplication_args();
      args.setApplication(application);
      sendBase("editApplication", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editApplication() throws ControlThriftException, org.apache.thrift.TException
    {
      editApplication_result result = new editApplication_result();
      receiveBase(result, "editApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editApplication failed: unknown result");
    }

    public void deleteApplication(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteApplication(applicationId);
      recv_deleteApplication();
    }

    public void send_deleteApplication(String applicationId) throws org.apache.thrift.TException
    {
      deleteApplication_args args = new deleteApplication_args();
      args.setApplicationId(applicationId);
      sendBase("deleteApplication", args);
    }

    public void recv_deleteApplication() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteApplication_result result = new deleteApplication_result();
      receiveBase(result, "deleteApplication");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfigurationSchemaVersionsByApplicationId(applicationId);
      return recv_getConfigurationSchemaVersionsByApplicationId();
    }

    public void send_getConfigurationSchemaVersionsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getConfigurationSchemaVersionsByApplicationId_args args = new getConfigurationSchemaVersionsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getConfigurationSchemaVersionsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getConfigurationSchemaVersionsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfigurationSchemaVersionsByApplicationId_result result = new getConfigurationSchemaVersionsByApplicationId_result();
      receiveBase(result, "getConfigurationSchemaVersionsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigurationSchemaVersionsByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfigurationSchemasByApplicationId(applicationId);
      return recv_getConfigurationSchemasByApplicationId();
    }

    public void send_getConfigurationSchemasByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getConfigurationSchemasByApplicationId_args args = new getConfigurationSchemasByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getConfigurationSchemasByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getConfigurationSchemasByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfigurationSchemasByApplicationId_result result = new getConfigurationSchemasByApplicationId_result();
      receiveBase(result, "getConfigurationSchemasByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigurationSchemasByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfigurationSchema(String configurationSchemaId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfigurationSchema(configurationSchemaId);
      return recv_getConfigurationSchema();
    }

    public void send_getConfigurationSchema(String configurationSchemaId) throws org.apache.thrift.TException
    {
      getConfigurationSchema_args args = new getConfigurationSchema_args();
      args.setConfigurationSchemaId(configurationSchemaId);
      sendBase("getConfigurationSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getConfigurationSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfigurationSchema_result result = new getConfigurationSchema_result();
      receiveBase(result, "getConfigurationSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigurationSchema failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editConfigurationSchema(configurationSchema);
      return recv_editConfigurationSchema();
    }

    public void send_editConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema) throws org.apache.thrift.TException
    {
      editConfigurationSchema_args args = new editConfigurationSchema_args();
      args.setConfigurationSchema(configurationSchema);
      sendBase("editConfigurationSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editConfigurationSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      editConfigurationSchema_result result = new editConfigurationSchema_result();
      receiveBase(result, "editConfigurationSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editConfigurationSchema failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileSchemaVersionsByApplicationId(applicationId);
      return recv_getProfileSchemaVersionsByApplicationId();
    }

    public void send_getProfileSchemaVersionsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getProfileSchemaVersionsByApplicationId_args args = new getProfileSchemaVersionsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getProfileSchemaVersionsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getProfileSchemaVersionsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileSchemaVersionsByApplicationId_result result = new getProfileSchemaVersionsByApplicationId_result();
      receiveBase(result, "getProfileSchemaVersionsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileSchemaVersionsByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileSchemasByApplicationId(applicationId);
      return recv_getProfileSchemasByApplicationId();
    }

    public void send_getProfileSchemasByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getProfileSchemasByApplicationId_args args = new getProfileSchemasByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getProfileSchemasByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getProfileSchemasByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileSchemasByApplicationId_result result = new getProfileSchemasByApplicationId_result();
      receiveBase(result, "getProfileSchemasByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileSchemasByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileSchema(String profileSchemaId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileSchema(profileSchemaId);
      return recv_getProfileSchema();
    }

    public void send_getProfileSchema(String profileSchemaId) throws org.apache.thrift.TException
    {
      getProfileSchema_args args = new getProfileSchema_args();
      args.setProfileSchemaId(profileSchemaId);
      sendBase("getProfileSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getProfileSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileSchema_result result = new getProfileSchema_result();
      receiveBase(result, "getProfileSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileSchema failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editProfileSchema(profileSchema);
      return recv_editProfileSchema();
    }

    public void send_editProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema) throws org.apache.thrift.TException
    {
      editProfileSchema_args args = new editProfileSchema_args();
      args.setProfileSchema(profileSchema);
      sendBase("editProfileSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editProfileSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      editProfileSchema_result result = new editProfileSchema_result();
      receiveBase(result, "editProfileSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editProfileSchema failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogSchemaVersionsByApplicationId(applicationId);
      return recv_getLogSchemaVersionsByApplicationId();
    }

    public void send_getLogSchemaVersionsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getLogSchemaVersionsByApplicationId_args args = new getLogSchemaVersionsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getLogSchemaVersionsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getLogSchemaVersionsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogSchemaVersionsByApplicationId_result result = new getLogSchemaVersionsByApplicationId_result();
      receiveBase(result, "getLogSchemaVersionsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogSchemaVersionsByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogSchemasByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogSchemasByApplicationId(applicationId);
      return recv_getLogSchemasByApplicationId();
    }

    public void send_getLogSchemasByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getLogSchemasByApplicationId_args args = new getLogSchemasByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getLogSchemasByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getLogSchemasByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogSchemasByApplicationId_result result = new getLogSchemasByApplicationId_result();
      receiveBase(result, "getLogSchemasByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogSchemasByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogSchema(String logSchemaId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogSchema(logSchemaId);
      return recv_getLogSchema();
    }

    public void send_getLogSchema(String logSchemaId) throws org.apache.thrift.TException
    {
      getLogSchema_args args = new getLogSchema_args();
      args.setLogSchemaId(logSchemaId);
      sendBase("getLogSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getLogSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogSchema_result result = new getLogSchema_result();
      receiveBase(result, "getLogSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogSchema failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogSchemaByApplicationIdAndVersion(String applicationId, int version) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogSchemaByApplicationIdAndVersion(applicationId, version);
      return recv_getLogSchemaByApplicationIdAndVersion();
    }

    public void send_getLogSchemaByApplicationIdAndVersion(String applicationId, int version) throws org.apache.thrift.TException
    {
      getLogSchemaByApplicationIdAndVersion_args args = new getLogSchemaByApplicationIdAndVersion_args();
      args.setApplicationId(applicationId);
      args.setVersion(version);
      sendBase("getLogSchemaByApplicationIdAndVersion", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getLogSchemaByApplicationIdAndVersion() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogSchemaByApplicationIdAndVersion_result result = new getLogSchemaByApplicationIdAndVersion_result();
      receiveBase(result, "getLogSchemaByApplicationIdAndVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogSchemaByApplicationIdAndVersion failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editLogSchema(logSchema);
      return recv_editLogSchema();
    }

    public void send_editLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema) throws org.apache.thrift.TException
    {
      editLogSchema_args args = new editLogSchema_args();
      args.setLogSchema(logSchema);
      sendBase("editLogSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editLogSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      editLogSchema_result result = new editLogSchema_result();
      receiveBase(result, "editLogSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editLogSchema failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEndpointGroupsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEndpointGroupsByApplicationId(applicationId);
      return recv_getEndpointGroupsByApplicationId();
    }

    public void send_getEndpointGroupsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getEndpointGroupsByApplicationId_args args = new getEndpointGroupsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getEndpointGroupsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getEndpointGroupsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getEndpointGroupsByApplicationId_result result = new getEndpointGroupsByApplicationId_result();
      receiveBase(result, "getEndpointGroupsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEndpointGroupsByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointGroup(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEndpointGroup(endpointGroupId);
      return recv_getEndpointGroup();
    }

    public void send_getEndpointGroup(String endpointGroupId) throws org.apache.thrift.TException
    {
      getEndpointGroup_args args = new getEndpointGroup_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getEndpointGroup", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getEndpointGroup() throws ControlThriftException, org.apache.thrift.TException
    {
      getEndpointGroup_result result = new getEndpointGroup_result();
      receiveBase(result, "getEndpointGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEndpointGroup failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editEndpointGroup(endpointGroup);
      return recv_editEndpointGroup();
    }

    public void send_editEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup) throws org.apache.thrift.TException
    {
      editEndpointGroup_args args = new editEndpointGroup_args();
      args.setEndpointGroup(endpointGroup);
      sendBase("editEndpointGroup", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editEndpointGroup() throws ControlThriftException, org.apache.thrift.TException
    {
      editEndpointGroup_result result = new editEndpointGroup_result();
      receiveBase(result, "editEndpointGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editEndpointGroup failed: unknown result");
    }

    public void deleteEndpointGroup(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteEndpointGroup(endpointGroupId);
      recv_deleteEndpointGroup();
    }

    public void send_deleteEndpointGroup(String endpointGroupId) throws org.apache.thrift.TException
    {
      deleteEndpointGroup_args args = new deleteEndpointGroup_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("deleteEndpointGroup", args);
    }

    public void recv_deleteEndpointGroup() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteEndpointGroup_result result = new deleteEndpointGroup_result();
      receiveBase(result, "deleteEndpointGroup");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct removeTopicsFromEndpointGroup(String endpointGroupId, String topicId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_removeTopicsFromEndpointGroup(endpointGroupId, topicId);
      return recv_removeTopicsFromEndpointGroup();
    }

    public void send_removeTopicsFromEndpointGroup(String endpointGroupId, String topicId) throws org.apache.thrift.TException
    {
      removeTopicsFromEndpointGroup_args args = new removeTopicsFromEndpointGroup_args();
      args.setEndpointGroupId(endpointGroupId);
      args.setTopicId(topicId);
      sendBase("removeTopicsFromEndpointGroup", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_removeTopicsFromEndpointGroup() throws ControlThriftException, org.apache.thrift.TException
    {
      removeTopicsFromEndpointGroup_result result = new removeTopicsFromEndpointGroup_result();
      receiveBase(result, "removeTopicsFromEndpointGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeTopicsFromEndpointGroup failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct addTopicsToEndpointGroup(String endpointGroupId, String topicId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_addTopicsToEndpointGroup(endpointGroupId, topicId);
      return recv_addTopicsToEndpointGroup();
    }

    public void send_addTopicsToEndpointGroup(String endpointGroupId, String topicId) throws org.apache.thrift.TException
    {
      addTopicsToEndpointGroup_args args = new addTopicsToEndpointGroup_args();
      args.setEndpointGroupId(endpointGroupId);
      args.setTopicId(topicId);
      sendBase("addTopicsToEndpointGroup", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_addTopicsToEndpointGroup() throws ControlThriftException, org.apache.thrift.TException
    {
      addTopicsToEndpointGroup_result result = new addTopicsToEndpointGroup_result();
      receiveBase(result, "addTopicsToEndpointGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTopicsToEndpointGroup failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getProfileFilterRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileFilterRecordsByEndpointGroupId(endpointGroupId, includeDeprecated);
      return recv_getProfileFilterRecordsByEndpointGroupId();
    }

    public void send_getProfileFilterRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws org.apache.thrift.TException
    {
      getProfileFilterRecordsByEndpointGroupId_args args = new getProfileFilterRecordsByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      args.setIncludeDeprecated(includeDeprecated);
      sendBase("getProfileFilterRecordsByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getProfileFilterRecordsByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileFilterRecordsByEndpointGroupId_result result = new getProfileFilterRecordsByEndpointGroupId_result();
      receiveBase(result, "getProfileFilterRecordsByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterRecordsByEndpointGroupId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileFilterRecord(String schemaId, String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileFilterRecord(schemaId, endpointGroupId);
      return recv_getProfileFilterRecord();
    }

    public void send_getProfileFilterRecord(String schemaId, String endpointGroupId) throws org.apache.thrift.TException
    {
      getProfileFilterRecord_args args = new getProfileFilterRecord_args();
      args.setSchemaId(schemaId);
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getProfileFilterRecord", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getProfileFilterRecord() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileFilterRecord_result result = new getProfileFilterRecord_result();
      receiveBase(result, "getProfileFilterRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterRecord failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantProfileSchemasByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getVacantProfileSchemasByEndpointGroupId(endpointGroupId);
      return recv_getVacantProfileSchemasByEndpointGroupId();
    }

    public void send_getVacantProfileSchemasByEndpointGroupId(String endpointGroupId) throws org.apache.thrift.TException
    {
      getVacantProfileSchemasByEndpointGroupId_args args = new getVacantProfileSchemasByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getVacantProfileSchemasByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getVacantProfileSchemasByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getVacantProfileSchemasByEndpointGroupId_result result = new getVacantProfileSchemasByEndpointGroupId_result();
      receiveBase(result, "getVacantProfileSchemasByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVacantProfileSchemasByEndpointGroupId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileFilter(String profileFilterId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getProfileFilter(profileFilterId);
      return recv_getProfileFilter();
    }

    public void send_getProfileFilter(String profileFilterId) throws org.apache.thrift.TException
    {
      getProfileFilter_args args = new getProfileFilter_args();
      args.setProfileFilterId(profileFilterId);
      sendBase("getProfileFilter", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getProfileFilter() throws ControlThriftException, org.apache.thrift.TException
    {
      getProfileFilter_result result = new getProfileFilter_result();
      receiveBase(result, "getProfileFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilter failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editProfileFilter(profileFilter);
      return recv_editProfileFilter();
    }

    public void send_editProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter) throws org.apache.thrift.TException
    {
      editProfileFilter_args args = new editProfileFilter_args();
      args.setProfileFilter(profileFilter);
      sendBase("editProfileFilter", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editProfileFilter() throws ControlThriftException, org.apache.thrift.TException
    {
      editProfileFilter_result result = new editProfileFilter_result();
      receiveBase(result, "editProfileFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editProfileFilter failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct activateProfileFilter(String profileFilterId, String activatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_activateProfileFilter(profileFilterId, activatedUsername);
      return recv_activateProfileFilter();
    }

    public void send_activateProfileFilter(String profileFilterId, String activatedUsername) throws org.apache.thrift.TException
    {
      activateProfileFilter_args args = new activateProfileFilter_args();
      args.setProfileFilterId(profileFilterId);
      args.setActivatedUsername(activatedUsername);
      sendBase("activateProfileFilter", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_activateProfileFilter() throws ControlThriftException, org.apache.thrift.TException
    {
      activateProfileFilter_result result = new activateProfileFilter_result();
      receiveBase(result, "activateProfileFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateProfileFilter failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct deactivateProfileFilter(String profileFilterId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deactivateProfileFilter(profileFilterId, deactivatedUsername);
      return recv_deactivateProfileFilter();
    }

    public void send_deactivateProfileFilter(String profileFilterId, String deactivatedUsername) throws org.apache.thrift.TException
    {
      deactivateProfileFilter_args args = new deactivateProfileFilter_args();
      args.setProfileFilterId(profileFilterId);
      args.setDeactivatedUsername(deactivatedUsername);
      sendBase("deactivateProfileFilter", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_deactivateProfileFilter() throws ControlThriftException, org.apache.thrift.TException
    {
      deactivateProfileFilter_result result = new deactivateProfileFilter_result();
      receiveBase(result, "deactivateProfileFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deactivateProfileFilter failed: unknown result");
    }

    public void deleteProfileFilterRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteProfileFilterRecord(schemaId, endpointGroupId, deactivatedUsername);
      recv_deleteProfileFilterRecord();
    }

    public void send_deleteProfileFilterRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws org.apache.thrift.TException
    {
      deleteProfileFilterRecord_args args = new deleteProfileFilterRecord_args();
      args.setSchemaId(schemaId);
      args.setEndpointGroupId(endpointGroupId);
      args.setDeactivatedUsername(deactivatedUsername);
      sendBase("deleteProfileFilterRecord", args);
    }

    public void recv_deleteProfileFilterRecord() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteProfileFilterRecord_result result = new deleteProfileFilterRecord_result();
      receiveBase(result, "deleteProfileFilterRecord");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getConfigurationRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfigurationRecordsByEndpointGroupId(endpointGroupId, includeDeprecated);
      return recv_getConfigurationRecordsByEndpointGroupId();
    }

    public void send_getConfigurationRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated) throws org.apache.thrift.TException
    {
      getConfigurationRecordsByEndpointGroupId_args args = new getConfigurationRecordsByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      args.setIncludeDeprecated(includeDeprecated);
      sendBase("getConfigurationRecordsByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getConfigurationRecordsByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfigurationRecordsByEndpointGroupId_result result = new getConfigurationRecordsByEndpointGroupId_result();
      receiveBase(result, "getConfigurationRecordsByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigurationRecordsByEndpointGroupId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfigurationRecord(String schemaId, String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfigurationRecord(schemaId, endpointGroupId);
      return recv_getConfigurationRecord();
    }

    public void send_getConfigurationRecord(String schemaId, String endpointGroupId) throws org.apache.thrift.TException
    {
      getConfigurationRecord_args args = new getConfigurationRecord_args();
      args.setSchemaId(schemaId);
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getConfigurationRecord", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getConfigurationRecord() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfigurationRecord_result result = new getConfigurationRecord_result();
      receiveBase(result, "getConfigurationRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigurationRecord failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getVacantConfigurationSchemasByEndpointGroupId(endpointGroupId);
      return recv_getVacantConfigurationSchemasByEndpointGroupId();
    }

    public void send_getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId) throws org.apache.thrift.TException
    {
      getVacantConfigurationSchemasByEndpointGroupId_args args = new getVacantConfigurationSchemasByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getVacantConfigurationSchemasByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getVacantConfigurationSchemasByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getVacantConfigurationSchemasByEndpointGroupId_result result = new getVacantConfigurationSchemasByEndpointGroupId_result();
      receiveBase(result, "getVacantConfigurationSchemasByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVacantConfigurationSchemasByEndpointGroupId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfiguration(String configurationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getConfiguration(configurationId);
      return recv_getConfiguration();
    }

    public void send_getConfiguration(String configurationId) throws org.apache.thrift.TException
    {
      getConfiguration_args args = new getConfiguration_args();
      args.setConfigurationId(configurationId);
      sendBase("getConfiguration", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getConfiguration() throws ControlThriftException, org.apache.thrift.TException
    {
      getConfiguration_result result = new getConfiguration_result();
      receiveBase(result, "getConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfiguration failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editConfiguration(configuration);
      return recv_editConfiguration();
    }

    public void send_editConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws org.apache.thrift.TException
    {
      editConfiguration_args args = new editConfiguration_args();
      args.setConfiguration(configuration);
      sendBase("editConfiguration", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editConfiguration() throws ControlThriftException, org.apache.thrift.TException
    {
      editConfiguration_result result = new editConfiguration_result();
      receiveBase(result, "editConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editConfiguration failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct activateConfiguration(String configurationId, String activatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_activateConfiguration(configurationId, activatedUsername);
      return recv_activateConfiguration();
    }

    public void send_activateConfiguration(String configurationId, String activatedUsername) throws org.apache.thrift.TException
    {
      activateConfiguration_args args = new activateConfiguration_args();
      args.setConfigurationId(configurationId);
      args.setActivatedUsername(activatedUsername);
      sendBase("activateConfiguration", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_activateConfiguration() throws ControlThriftException, org.apache.thrift.TException
    {
      activateConfiguration_result result = new activateConfiguration_result();
      receiveBase(result, "activateConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateConfiguration failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct deactivateConfiguration(String configurationId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deactivateConfiguration(configurationId, deactivatedUsername);
      return recv_deactivateConfiguration();
    }

    public void send_deactivateConfiguration(String configurationId, String deactivatedUsername) throws org.apache.thrift.TException
    {
      deactivateConfiguration_args args = new deactivateConfiguration_args();
      args.setConfigurationId(configurationId);
      args.setDeactivatedUsername(deactivatedUsername);
      sendBase("deactivateConfiguration", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_deactivateConfiguration() throws ControlThriftException, org.apache.thrift.TException
    {
      deactivateConfiguration_result result = new deactivateConfiguration_result();
      receiveBase(result, "deactivateConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deactivateConfiguration failed: unknown result");
    }

    public void deleteConfigurationRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteConfigurationRecord(schemaId, endpointGroupId, deactivatedUsername);
      recv_deleteConfigurationRecord();
    }

    public void send_deleteConfigurationRecord(String schemaId, String endpointGroupId, String deactivatedUsername) throws org.apache.thrift.TException
    {
      deleteConfigurationRecord_args args = new deleteConfigurationRecord_args();
      args.setSchemaId(schemaId);
      args.setEndpointGroupId(endpointGroupId);
      args.setDeactivatedUsername(deactivatedUsername);
      sendBase("deleteConfigurationRecord", args);
    }

    public void recv_deleteConfigurationRecord() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteConfigurationRecord_result result = new deleteConfigurationRecord_result();
      receiveBase(result, "deleteConfigurationRecord");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public void editUserConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editUserConfiguration(configuration);
      recv_editUserConfiguration();
    }

    public void send_editUserConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) throws org.apache.thrift.TException
    {
      editUserConfiguration_args args = new editUserConfiguration_args();
      args.setConfiguration(configuration);
      sendBase("editUserConfiguration", args);
    }

    public void recv_editUserConfiguration() throws ControlThriftException, org.apache.thrift.TException
    {
      editUserConfiguration_result result = new editUserConfiguration_result();
      receiveBase(result, "editUserConfiguration");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationSchemaVersionsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getNotificationSchemaVersionsByApplicationId(applicationId);
      return recv_getNotificationSchemaVersionsByApplicationId();
    }

    public void send_getNotificationSchemaVersionsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getNotificationSchemaVersionsByApplicationId_args args = new getNotificationSchemaVersionsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getNotificationSchemaVersionsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getNotificationSchemaVersionsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getNotificationSchemaVersionsByApplicationId_result result = new getNotificationSchemaVersionsByApplicationId_result();
      receiveBase(result, "getNotificationSchemaVersionsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotificationSchemaVersionsByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editNotificationSchema(notificationSchema);
      return recv_editNotificationSchema();
    }

    public void send_editNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema) throws org.apache.thrift.TException
    {
      editNotificationSchema_args args = new editNotificationSchema_args();
      args.setNotificationSchema(notificationSchema);
      sendBase("editNotificationSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editNotificationSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      editNotificationSchema_result result = new editNotificationSchema_result();
      receiveBase(result, "editNotificationSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editNotificationSchema failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotificationSchema(String notificationSchemaId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getNotificationSchema(notificationSchemaId);
      return recv_getNotificationSchema();
    }

    public void send_getNotificationSchema(String notificationSchemaId) throws org.apache.thrift.TException
    {
      getNotificationSchema_args args = new getNotificationSchema_args();
      args.setNotificationSchemaId(notificationSchemaId);
      sendBase("getNotificationSchema", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getNotificationSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      getNotificationSchema_result result = new getNotificationSchema_result();
      receiveBase(result, "getNotificationSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotificationSchema failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationSchemasByAppId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getNotificationSchemasByAppId(applicationId);
      return recv_getNotificationSchemasByAppId();
    }

    public void send_getNotificationSchemasByAppId(String applicationId) throws org.apache.thrift.TException
    {
      getNotificationSchemasByAppId_args args = new getNotificationSchemasByAppId_args();
      args.setApplicationId(applicationId);
      sendBase("getNotificationSchemasByAppId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getNotificationSchemasByAppId() throws ControlThriftException, org.apache.thrift.TException
    {
      getNotificationSchemasByAppId_result result = new getNotificationSchemasByAppId_result();
      receiveBase(result, "getNotificationSchemasByAppId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotificationSchemasByAppId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUserNotificationSchemasByAppId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUserNotificationSchemasByAppId(applicationId);
      return recv_getUserNotificationSchemasByAppId();
    }

    public void send_getUserNotificationSchemasByAppId(String applicationId) throws org.apache.thrift.TException
    {
      getUserNotificationSchemasByAppId_args args = new getUserNotificationSchemasByAppId_args();
      args.setApplicationId(applicationId);
      sendBase("getUserNotificationSchemasByAppId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getUserNotificationSchemasByAppId() throws ControlThriftException, org.apache.thrift.TException
    {
      getUserNotificationSchemasByAppId_result result = new getUserNotificationSchemasByAppId_result();
      receiveBase(result, "getUserNotificationSchemasByAppId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserNotificationSchemasByAppId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> findNotificationSchemasByAppIdAndType(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws ControlThriftException, org.apache.thrift.TException
    {
      send_findNotificationSchemasByAppIdAndType(applicationId, type);
      return recv_findNotificationSchemasByAppIdAndType();
    }

    public void send_findNotificationSchemasByAppIdAndType(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws org.apache.thrift.TException
    {
      findNotificationSchemasByAppIdAndType_args args = new findNotificationSchemasByAppIdAndType_args();
      args.setApplicationId(applicationId);
      args.setType(type);
      sendBase("findNotificationSchemasByAppIdAndType", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_findNotificationSchemasByAppIdAndType() throws ControlThriftException, org.apache.thrift.TException
    {
      findNotificationSchemasByAppIdAndType_result result = new findNotificationSchemasByAppIdAndType_result();
      receiveBase(result, "findNotificationSchemasByAppIdAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNotificationSchemasByAppIdAndType failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editNotification(notification);
      return recv_editNotification();
    }

    public void send_editNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws org.apache.thrift.TException
    {
      editNotification_args args = new editNotification_args();
      args.setNotification(notification);
      sendBase("editNotification", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editNotification() throws ControlThriftException, org.apache.thrift.TException
    {
      editNotification_result result = new editNotification_result();
      receiveBase(result, "editNotification");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editNotification failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotification(String notificationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getNotification(notificationId);
      return recv_getNotification();
    }

    public void send_getNotification(String notificationId) throws org.apache.thrift.TException
    {
      getNotification_args args = new getNotification_args();
      args.setNotificationId(notificationId);
      sendBase("getNotification", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getNotification() throws ControlThriftException, org.apache.thrift.TException
    {
      getNotification_result result = new getNotification_result();
      receiveBase(result, "getNotification");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotification failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getNotificationsByTopicId(String topicId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getNotificationsByTopicId(topicId);
      return recv_getNotificationsByTopicId();
    }

    public void send_getNotificationsByTopicId(String topicId) throws org.apache.thrift.TException
    {
      getNotificationsByTopicId_args args = new getNotificationsByTopicId_args();
      args.setTopicId(topicId);
      sendBase("getNotificationsByTopicId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getNotificationsByTopicId() throws ControlThriftException, org.apache.thrift.TException
    {
      getNotificationsByTopicId_result result = new getNotificationsByTopicId_result();
      receiveBase(result, "getNotificationsByTopicId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotificationsByTopicId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editTopic(topic);
      return recv_editTopic();
    }

    public void send_editTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic) throws org.apache.thrift.TException
    {
      editTopic_args args = new editTopic_args();
      args.setTopic(topic);
      sendBase("editTopic", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editTopic() throws ControlThriftException, org.apache.thrift.TException
    {
      editTopic_result result = new editTopic_result();
      receiveBase(result, "editTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editTopic failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTopic(String topicId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTopic(topicId);
      return recv_getTopic();
    }

    public void send_getTopic(String topicId) throws org.apache.thrift.TException
    {
      getTopic_args args = new getTopic_args();
      args.setTopicId(topicId);
      sendBase("getTopic", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getTopic() throws ControlThriftException, org.apache.thrift.TException
    {
      getTopic_result result = new getTopic_result();
      receiveBase(result, "getTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopic failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTopicByAppId(String appId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTopicByAppId(appId);
      return recv_getTopicByAppId();
    }

    public void send_getTopicByAppId(String appId) throws org.apache.thrift.TException
    {
      getTopicByAppId_args args = new getTopicByAppId_args();
      args.setAppId(appId);
      sendBase("getTopicByAppId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getTopicByAppId() throws ControlThriftException, org.apache.thrift.TException
    {
      getTopicByAppId_result result = new getTopicByAppId_result();
      receiveBase(result, "getTopicByAppId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopicByAppId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getTopicByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getTopicByEndpointGroupId(endpointGroupId);
      return recv_getTopicByEndpointGroupId();
    }

    public void send_getTopicByEndpointGroupId(String endpointGroupId) throws org.apache.thrift.TException
    {
      getTopicByEndpointGroupId_args args = new getTopicByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getTopicByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getTopicByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getTopicByEndpointGroupId_result result = new getTopicByEndpointGroupId_result();
      receiveBase(result, "getTopicByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopicByEndpointGroupId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantTopicByEndpointGroupId(String endpointGroupId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getVacantTopicByEndpointGroupId(endpointGroupId);
      return recv_getVacantTopicByEndpointGroupId();
    }

    public void send_getVacantTopicByEndpointGroupId(String endpointGroupId) throws org.apache.thrift.TException
    {
      getVacantTopicByEndpointGroupId_args args = new getVacantTopicByEndpointGroupId_args();
      args.setEndpointGroupId(endpointGroupId);
      sendBase("getVacantTopicByEndpointGroupId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getVacantTopicByEndpointGroupId() throws ControlThriftException, org.apache.thrift.TException
    {
      getVacantTopicByEndpointGroupId_result result = new getVacantTopicByEndpointGroupId_result();
      receiveBase(result, "getVacantTopicByEndpointGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVacantTopicByEndpointGroupId failed: unknown result");
    }

    public void deleteTopicById(String topicId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteTopicById(topicId);
      recv_deleteTopicById();
    }

    public void send_deleteTopicById(String topicId) throws org.apache.thrift.TException
    {
      deleteTopicById_args args = new deleteTopicById_args();
      args.setTopicId(topicId);
      sendBase("deleteTopicById", args);
    }

    public void recv_deleteTopicById() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteTopicById_result result = new deleteTopicById_result();
      receiveBase(result, "deleteTopicById");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUnicastNotification(String notificationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUnicastNotification(notificationId);
      return recv_getUnicastNotification();
    }

    public void send_getUnicastNotification(String notificationId) throws org.apache.thrift.TException
    {
      getUnicastNotification_args args = new getUnicastNotification_args();
      args.setNotificationId(notificationId);
      sendBase("getUnicastNotification", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getUnicastNotification() throws ControlThriftException, org.apache.thrift.TException
    {
      getUnicastNotification_result result = new getUnicastNotification_result();
      receiveBase(result, "getUnicastNotification");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUnicastNotification failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUnicastNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editUnicastNotification(notification);
      return recv_editUnicastNotification();
    }

    public void send_editUnicastNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) throws org.apache.thrift.TException
    {
      editUnicastNotification_args args = new editUnicastNotification_args();
      args.setNotification(notification);
      sendBase("editUnicastNotification", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editUnicastNotification() throws ControlThriftException, org.apache.thrift.TException
    {
      editUnicastNotification_result result = new editUnicastNotification_result();
      receiveBase(result, "editUnicastNotification");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editUnicastNotification failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUnicastNotificationsByKeyHash(ByteBuffer keyhash) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUnicastNotificationsByKeyHash(keyhash);
      return recv_getUnicastNotificationsByKeyHash();
    }

    public void send_getUnicastNotificationsByKeyHash(ByteBuffer keyhash) throws org.apache.thrift.TException
    {
      getUnicastNotificationsByKeyHash_args args = new getUnicastNotificationsByKeyHash_args();
      args.setKeyhash(keyhash);
      sendBase("getUnicastNotificationsByKeyHash", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getUnicastNotificationsByKeyHash() throws ControlThriftException, org.apache.thrift.TException
    {
      getUnicastNotificationsByKeyHash_result result = new getUnicastNotificationsByKeyHash_result();
      receiveBase(result, "getUnicastNotificationsByKeyHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUnicastNotificationsByKeyHash failed: unknown result");
    }

    public void addSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile) throws ControlThriftException, org.apache.thrift.TException
    {
      send_addSdkProfile(sdkProfile);
      recv_addSdkProfile();
    }

    public void send_addSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile) throws org.apache.thrift.TException
    {
      addSdkProfile_args args = new addSdkProfile_args();
      args.setSdkProfile(sdkProfile);
      sendBase("addSdkProfile", args);
    }

    public void recv_addSdkProfile() throws ControlThriftException, org.apache.thrift.TException
    {
      addSdkProfile_result result = new addSdkProfile_result();
      receiveBase(result, "addSdkProfile");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public void deleteSdkProfile(String sdkProfileId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteSdkProfile(sdkProfileId);
      recv_deleteSdkProfile();
    }

    public void send_deleteSdkProfile(String sdkProfileId) throws org.apache.thrift.TException
    {
      deleteSdkProfile_args args = new deleteSdkProfile_args();
      args.setSdkProfileId(sdkProfileId);
      sendBase("deleteSdkProfile", args);
    }

    public void recv_deleteSdkProfile() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteSdkProfile_result result = new deleteSdkProfile_result();
      receiveBase(result, "deleteSdkProfile");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSdkProfile(String sdkProfileId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getSdkProfile(sdkProfileId);
      return recv_getSdkProfile();
    }

    public void send_getSdkProfile(String sdkProfileId) throws org.apache.thrift.TException
    {
      getSdkProfile_args args = new getSdkProfile_args();
      args.setSdkProfileId(sdkProfileId);
      sendBase("getSdkProfile", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getSdkProfile() throws ControlThriftException, org.apache.thrift.TException
    {
      getSdkProfile_result result = new getSdkProfile_result();
      receiveBase(result, "getSdkProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSdkProfile failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSdkProfilesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getSdkProfilesByApplicationId(applicationId);
      return recv_getSdkProfilesByApplicationId();
    }

    public void send_getSdkProfilesByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getSdkProfilesByApplicationId_args args = new getSdkProfilesByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getSdkProfilesByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getSdkProfilesByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getSdkProfilesByApplicationId_result result = new getSdkProfilesByApplicationId_result();
      receiveBase(result, "getSdkProfilesByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSdkProfilesByApplicationId failed: unknown result");
    }

    public Sdk generateSdk(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform) throws ControlThriftException, org.apache.thrift.TException
    {
      send_generateSdk(sdkProfile, targetPlatform);
      return recv_generateSdk();
    }

    public void send_generateSdk(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform) throws org.apache.thrift.TException
    {
      generateSdk_args args = new generateSdk_args();
      args.setSdkProfile(sdkProfile);
      args.setTargetPlatform(targetPlatform);
      sendBase("generateSdk", args);
    }

    public Sdk recv_generateSdk() throws ControlThriftException, org.apache.thrift.TException
    {
      generateSdk_result result = new generateSdk_result();
      receiveBase(result, "generateSdk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateSdk failed: unknown result");
    }

    public boolean isSdkProfileUsed(String sdkToken) throws ControlThriftException, org.apache.thrift.TException
    {
      send_isSdkProfileUsed(sdkToken);
      return recv_isSdkProfileUsed();
    }

    public void send_isSdkProfileUsed(String sdkToken) throws org.apache.thrift.TException
    {
      isSdkProfileUsed_args args = new isSdkProfileUsed_args();
      args.setSdkToken(sdkToken);
      sendBase("isSdkProfileUsed", args);
    }

    public boolean recv_isSdkProfileUsed() throws ControlThriftException, org.apache.thrift.TException
    {
      isSdkProfileUsed_result result = new isSdkProfileUsed_result();
      receiveBase(result, "isSdkProfileUsed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isSdkProfileUsed failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editEventClassFamily(eventClassFamily);
      return recv_editEventClassFamily();
    }

    public void send_editEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily) throws org.apache.thrift.TException
    {
      editEventClassFamily_args args = new editEventClassFamily_args();
      args.setEventClassFamily(eventClassFamily);
      sendBase("editEventClassFamily", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editEventClassFamily() throws ControlThriftException, org.apache.thrift.TException
    {
      editEventClassFamily_result result = new editEventClassFamily_result();
      receiveBase(result, "editEventClassFamily");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editEventClassFamily failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassFamiliesByTenantId(String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEventClassFamiliesByTenantId(tenantId);
      return recv_getEventClassFamiliesByTenantId();
    }

    public void send_getEventClassFamiliesByTenantId(String tenantId) throws org.apache.thrift.TException
    {
      getEventClassFamiliesByTenantId_args args = new getEventClassFamiliesByTenantId_args();
      args.setTenantId(tenantId);
      sendBase("getEventClassFamiliesByTenantId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getEventClassFamiliesByTenantId() throws ControlThriftException, org.apache.thrift.TException
    {
      getEventClassFamiliesByTenantId_result result = new getEventClassFamiliesByTenantId_result();
      receiveBase(result, "getEventClassFamiliesByTenantId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventClassFamiliesByTenantId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEventClassFamily(String eventClassFamilyId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEventClassFamily(eventClassFamilyId);
      return recv_getEventClassFamily();
    }

    public void send_getEventClassFamily(String eventClassFamilyId) throws org.apache.thrift.TException
    {
      getEventClassFamily_args args = new getEventClassFamily_args();
      args.setEventClassFamilyId(eventClassFamilyId);
      sendBase("getEventClassFamily", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getEventClassFamily() throws ControlThriftException, org.apache.thrift.TException
    {
      getEventClassFamily_result result = new getEventClassFamily_result();
      receiveBase(result, "getEventClassFamily");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventClassFamily failed: unknown result");
    }

    public void addEventClassFamilySchema(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername) throws ControlThriftException, org.apache.thrift.TException
    {
      send_addEventClassFamilySchema(eventClassFamilyId, eventClassFamilySchema, createdUsername);
      recv_addEventClassFamilySchema();
    }

    public void send_addEventClassFamilySchema(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername) throws org.apache.thrift.TException
    {
      addEventClassFamilySchema_args args = new addEventClassFamilySchema_args();
      args.setEventClassFamilyId(eventClassFamilyId);
      args.setEventClassFamilySchema(eventClassFamilySchema);
      args.setCreatedUsername(createdUsername);
      sendBase("addEventClassFamilySchema", args);
    }

    public void recv_addEventClassFamilySchema() throws ControlThriftException, org.apache.thrift.TException
    {
      addEventClassFamilySchema_result result = new addEventClassFamilySchema_result();
      receiveBase(result, "addEventClassFamilySchema");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassesByFamilyIdVersionAndType(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEventClassesByFamilyIdVersionAndType(ecfId, version, type);
      return recv_getEventClassesByFamilyIdVersionAndType();
    }

    public void send_getEventClassesByFamilyIdVersionAndType(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) throws org.apache.thrift.TException
    {
      getEventClassesByFamilyIdVersionAndType_args args = new getEventClassesByFamilyIdVersionAndType_args();
      args.setEcfId(ecfId);
      args.setVersion(version);
      args.setType(type);
      sendBase("getEventClassesByFamilyIdVersionAndType", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getEventClassesByFamilyIdVersionAndType() throws ControlThriftException, org.apache.thrift.TException
    {
      getEventClassesByFamilyIdVersionAndType_result result = new getEventClassesByFamilyIdVersionAndType_result();
      receiveBase(result, "getEventClassesByFamilyIdVersionAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventClassesByFamilyIdVersionAndType failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editApplicationEventFamilyMap(applicationEventFamilyMap);
      return recv_editApplicationEventFamilyMap();
    }

    public void send_editApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap) throws org.apache.thrift.TException
    {
      editApplicationEventFamilyMap_args args = new editApplicationEventFamilyMap_args();
      args.setApplicationEventFamilyMap(applicationEventFamilyMap);
      sendBase("editApplicationEventFamilyMap", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editApplicationEventFamilyMap() throws ControlThriftException, org.apache.thrift.TException
    {
      editApplicationEventFamilyMap_result result = new editApplicationEventFamilyMap_result();
      receiveBase(result, "editApplicationEventFamilyMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editApplicationEventFamilyMap failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplicationEventFamilyMap(String applicationEventFamilyMapId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getApplicationEventFamilyMap(applicationEventFamilyMapId);
      return recv_getApplicationEventFamilyMap();
    }

    public void send_getApplicationEventFamilyMap(String applicationEventFamilyMapId) throws org.apache.thrift.TException
    {
      getApplicationEventFamilyMap_args args = new getApplicationEventFamilyMap_args();
      args.setApplicationEventFamilyMapId(applicationEventFamilyMapId);
      sendBase("getApplicationEventFamilyMap", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getApplicationEventFamilyMap() throws ControlThriftException, org.apache.thrift.TException
    {
      getApplicationEventFamilyMap_result result = new getApplicationEventFamilyMap_result();
      receiveBase(result, "getApplicationEventFamilyMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationEventFamilyMap failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getApplicationEventFamilyMapsByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getApplicationEventFamilyMapsByApplicationId(applicationId);
      return recv_getApplicationEventFamilyMapsByApplicationId();
    }

    public void send_getApplicationEventFamilyMapsByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getApplicationEventFamilyMapsByApplicationId_args args = new getApplicationEventFamilyMapsByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getApplicationEventFamilyMapsByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getApplicationEventFamilyMapsByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getApplicationEventFamilyMapsByApplicationId_result result = new getApplicationEventFamilyMapsByApplicationId_result();
      receiveBase(result, "getApplicationEventFamilyMapsByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationEventFamilyMapsByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getVacantEventClassFamiliesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getVacantEventClassFamiliesByApplicationId(applicationId);
      return recv_getVacantEventClassFamiliesByApplicationId();
    }

    public void send_getVacantEventClassFamiliesByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getVacantEventClassFamiliesByApplicationId_args args = new getVacantEventClassFamiliesByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getVacantEventClassFamiliesByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getVacantEventClassFamiliesByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getVacantEventClassFamiliesByApplicationId_result result = new getVacantEventClassFamiliesByApplicationId_result();
      receiveBase(result, "getVacantEventClassFamiliesByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVacantEventClassFamiliesByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEventClassFamiliesByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEventClassFamiliesByApplicationId(applicationId);
      return recv_getEventClassFamiliesByApplicationId();
    }

    public void send_getEventClassFamiliesByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getEventClassFamiliesByApplicationId_args args = new getEventClassFamiliesByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getEventClassFamiliesByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getEventClassFamiliesByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getEventClassFamiliesByApplicationId_result result = new getEventClassFamiliesByApplicationId_result();
      receiveBase(result, "getEventClassFamiliesByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventClassFamiliesByApplicationId failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getEndpointUsers() throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEndpointUsers();
      return recv_getEndpointUsers();
    }

    public void send_getEndpointUsers() throws org.apache.thrift.TException
    {
      getEndpointUsers_args args = new getEndpointUsers_args();
      sendBase("getEndpointUsers", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getEndpointUsers() throws ControlThriftException, org.apache.thrift.TException
    {
      getEndpointUsers_result result = new getEndpointUsers_result();
      receiveBase(result, "getEndpointUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEndpointUsers failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointUser(String endpointUserId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getEndpointUser(endpointUserId);
      return recv_getEndpointUser();
    }

    public void send_getEndpointUser(String endpointUserId) throws org.apache.thrift.TException
    {
      getEndpointUser_args args = new getEndpointUser_args();
      args.setEndpointUserId(endpointUserId);
      sendBase("getEndpointUser", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getEndpointUser() throws ControlThriftException, org.apache.thrift.TException
    {
      getEndpointUser_result result = new getEndpointUser_result();
      receiveBase(result, "getEndpointUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEndpointUser failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editEndpointUser(endpointUser);
      return recv_editEndpointUser();
    }

    public void send_editEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser) throws org.apache.thrift.TException
    {
      editEndpointUser_args args = new editEndpointUser_args();
      args.setEndpointUser(endpointUser);
      sendBase("editEndpointUser", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editEndpointUser() throws ControlThriftException, org.apache.thrift.TException
    {
      editEndpointUser_result result = new editEndpointUser_result();
      receiveBase(result, "editEndpointUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editEndpointUser failed: unknown result");
    }

    public void deleteEndpointUser(String endpointUserId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteEndpointUser(endpointUserId);
      recv_deleteEndpointUser();
    }

    public void send_deleteEndpointUser(String endpointUserId) throws org.apache.thrift.TException
    {
      deleteEndpointUser_args args = new deleteEndpointUser_args();
      args.setEndpointUserId(endpointUserId);
      sendBase("deleteEndpointUser", args);
    }

    public void recv_deleteEndpointUser() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteEndpointUser_result result = new deleteEndpointUser_result();
      receiveBase(result, "deleteEndpointUser");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public String generateEndpointUserAccessToken(String externalUid, String tenantId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_generateEndpointUserAccessToken(externalUid, tenantId);
      return recv_generateEndpointUserAccessToken();
    }

    public void send_generateEndpointUserAccessToken(String externalUid, String tenantId) throws org.apache.thrift.TException
    {
      generateEndpointUserAccessToken_args args = new generateEndpointUserAccessToken_args();
      args.setExternalUid(externalUid);
      args.setTenantId(tenantId);
      sendBase("generateEndpointUserAccessToken", args);
    }

    public String recv_generateEndpointUserAccessToken() throws ControlThriftException, org.apache.thrift.TException
    {
      generateEndpointUserAccessToken_result result = new generateEndpointUserAccessToken_result();
      receiveBase(result, "generateEndpointUserAccessToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateEndpointUserAccessToken failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getLogAppendersByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogAppendersByApplicationId(applicationId);
      return recv_getLogAppendersByApplicationId();
    }

    public void send_getLogAppendersByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getLogAppendersByApplicationId_args args = new getLogAppendersByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getLogAppendersByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getLogAppendersByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogAppendersByApplicationId_result result = new getLogAppendersByApplicationId_result();
      receiveBase(result, "getLogAppendersByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogAppendersByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogAppender(String logAppenderId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getLogAppender(logAppenderId);
      return recv_getLogAppender();
    }

    public void send_getLogAppender(String logAppenderId) throws org.apache.thrift.TException
    {
      getLogAppender_args args = new getLogAppender_args();
      args.setLogAppenderId(logAppenderId);
      sendBase("getLogAppender", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getLogAppender() throws ControlThriftException, org.apache.thrift.TException
    {
      getLogAppender_result result = new getLogAppender_result();
      receiveBase(result, "getLogAppender");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogAppender failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editLogAppender(logAppender);
      return recv_editLogAppender();
    }

    public void send_editLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender) throws org.apache.thrift.TException
    {
      editLogAppender_args args = new editLogAppender_args();
      args.setLogAppender(logAppender);
      sendBase("editLogAppender", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editLogAppender() throws ControlThriftException, org.apache.thrift.TException
    {
      editLogAppender_result result = new editLogAppender_result();
      receiveBase(result, "editLogAppender");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editLogAppender failed: unknown result");
    }

    public void deleteLogAppender(String logAppenderId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteLogAppender(logAppenderId);
      recv_deleteLogAppender();
    }

    public void send_deleteLogAppender(String logAppenderId) throws org.apache.thrift.TException
    {
      deleteLogAppender_args args = new deleteLogAppender_args();
      args.setLogAppenderId(logAppenderId);
      sendBase("deleteLogAppender", args);
    }

    public void recv_deleteLogAppender() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteLogAppender_result result = new deleteLogAppender_result();
      receiveBase(result, "deleteLogAppender");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

    public FileData generateRecordStructureLibrary(String applicationId, int logSchemaVersion) throws ControlThriftException, org.apache.thrift.TException
    {
      send_generateRecordStructureLibrary(applicationId, logSchemaVersion);
      return recv_generateRecordStructureLibrary();
    }

    public void send_generateRecordStructureLibrary(String applicationId, int logSchemaVersion) throws org.apache.thrift.TException
    {
      generateRecordStructureLibrary_args args = new generateRecordStructureLibrary_args();
      args.setApplicationId(applicationId);
      args.setLogSchemaVersion(logSchemaVersion);
      sendBase("generateRecordStructureLibrary", args);
    }

    public FileData recv_generateRecordStructureLibrary() throws ControlThriftException, org.apache.thrift.TException
    {
      generateRecordStructureLibrary_result result = new generateRecordStructureLibrary_result();
      receiveBase(result, "generateRecordStructureLibrary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateRecordStructureLibrary failed: unknown result");
    }

    public FileData getRecordStructureSchema(String applicationId, int logSchemaVersion) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getRecordStructureSchema(applicationId, logSchemaVersion);
      return recv_getRecordStructureSchema();
    }

    public void send_getRecordStructureSchema(String applicationId, int logSchemaVersion) throws org.apache.thrift.TException
    {
      getRecordStructureSchema_args args = new getRecordStructureSchema_args();
      args.setApplicationId(applicationId);
      args.setLogSchemaVersion(logSchemaVersion);
      sendBase("getRecordStructureSchema", args);
    }

    public FileData recv_getRecordStructureSchema() throws ControlThriftException, org.apache.thrift.TException
    {
      getRecordStructureSchema_result result = new getRecordStructureSchema_result();
      receiveBase(result, "getRecordStructureSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordStructureSchema failed: unknown result");
    }

    public FileData getRecordStructureData(String applicationId, int schemaVersion, RecordFile recordFile) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getRecordStructureData(applicationId, schemaVersion, recordFile);
      return recv_getRecordStructureData();
    }

    public void send_getRecordStructureData(String applicationId, int schemaVersion, RecordFile recordFile) throws org.apache.thrift.TException
    {
      getRecordStructureData_args args = new getRecordStructureData_args();
      args.setApplicationId(applicationId);
      args.setSchemaVersion(schemaVersion);
      args.setRecordFile(recordFile);
      sendBase("getRecordStructureData", args);
    }

    public FileData recv_getRecordStructureData() throws ControlThriftException, org.apache.thrift.TException
    {
      getRecordStructureData_result result = new getRecordStructureData_result();
      receiveBase(result, "getRecordStructureData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordStructureData failed: unknown result");
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getUserVerifiersByApplicationId(String applicationId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUserVerifiersByApplicationId(applicationId);
      return recv_getUserVerifiersByApplicationId();
    }

    public void send_getUserVerifiersByApplicationId(String applicationId) throws org.apache.thrift.TException
    {
      getUserVerifiersByApplicationId_args args = new getUserVerifiersByApplicationId_args();
      args.setApplicationId(applicationId);
      sendBase("getUserVerifiersByApplicationId", args);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> recv_getUserVerifiersByApplicationId() throws ControlThriftException, org.apache.thrift.TException
    {
      getUserVerifiersByApplicationId_result result = new getUserVerifiersByApplicationId_result();
      receiveBase(result, "getUserVerifiersByApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserVerifiersByApplicationId failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUserVerifier(String userVerifierId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_getUserVerifier(userVerifierId);
      return recv_getUserVerifier();
    }

    public void send_getUserVerifier(String userVerifierId) throws org.apache.thrift.TException
    {
      getUserVerifier_args args = new getUserVerifier_args();
      args.setUserVerifierId(userVerifierId);
      sendBase("getUserVerifier", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_getUserVerifier() throws ControlThriftException, org.apache.thrift.TException
    {
      getUserVerifier_result result = new getUserVerifier_result();
      receiveBase(result, "getUserVerifier");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserVerifier failed: unknown result");
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct editUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier) throws ControlThriftException, org.apache.thrift.TException
    {
      send_editUserVerifier(userVerifier);
      return recv_editUserVerifier();
    }

    public void send_editUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier) throws org.apache.thrift.TException
    {
      editUserVerifier_args args = new editUserVerifier_args();
      args.setUserVerifier(userVerifier);
      sendBase("editUserVerifier", args);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct recv_editUserVerifier() throws ControlThriftException, org.apache.thrift.TException
    {
      editUserVerifier_result result = new editUserVerifier_result();
      receiveBase(result, "editUserVerifier");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editUserVerifier failed: unknown result");
    }

    public void deleteUserVerifier(String userVerifierId) throws ControlThriftException, org.apache.thrift.TException
    {
      send_deleteUserVerifier(userVerifierId);
      recv_deleteUserVerifier();
    }

    public void send_deleteUserVerifier(String userVerifierId) throws org.apache.thrift.TException
    {
      deleteUserVerifier_args args = new deleteUserVerifier_args();
      args.setUserVerifierId(userVerifierId);
      sendBase("deleteUserVerifier", args);
    }

    public void recv_deleteUserVerifier() throws ControlThriftException, org.apache.thrift.TException
    {
      deleteUserVerifier_result result = new deleteUserVerifier_result();
      receiveBase(result, "deleteUserVerifier");
      if (result.ControlException != null) {
        throw result.ControlException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTenants(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTenants_call method_call = new getTenants_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTenants_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getTenants_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTenants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTenants_args args = new getTenants_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTenants();
      }
    }

    public void getTenant(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTenant_call method_call = new getTenant_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTenant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public getTenant_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTenant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTenant_args args = new getTenant_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTenant();
      }
    }

    public void editTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editTenant_call method_call = new editTenant_call(tenant, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editTenant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant;
      public editTenant_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenant = tenant;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editTenant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editTenant_args args = new editTenant_args();
        args.setTenant(tenant);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editTenant();
      }
    }

    public void deleteTenant(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTenant_call method_call = new deleteTenant_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTenant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public deleteTenant_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTenant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTenant_args args = new deleteTenant_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteTenant();
      }
    }

    public void getUsers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUsers_call method_call = new getUsers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUsers_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUsers_args args = new getUsers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUsers();
      }
    }

    public void getTenantUsers(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTenantUsers_call method_call = new getTenantUsers_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTenantUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public getTenantUsers_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTenantUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTenantUsers_args args = new getTenantUsers_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTenantUsers();
      }
    }

    public void getUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUser_call method_call = new getUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public getUser_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUser_args args = new getUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUser();
      }
    }

    public void getUserByExternalUid(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserByExternalUid_call method_call = new getUserByExternalUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserByExternalUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uid;
      public getUserByExternalUid_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserByExternalUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserByExternalUid_args args = new getUserByExternalUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserByExternalUid();
      }
    }

    public void editUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editUser_call method_call = new editUser_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user;
      public editUser_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editUser_args args = new editUser_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editUser();
      }
    }

    public void deleteUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUser_call method_call = new deleteUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public deleteUser_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUser_args args = new deleteUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUser();
      }
    }

    public void getTenantAdmins(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTenantAdmins_call method_call = new getTenantAdmins_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTenantAdmins_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getTenantAdmins_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTenantAdmins", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTenantAdmins_args args = new getTenantAdmins_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTenantAdmins();
      }
    }

    public void getTenantAdmin(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTenantAdmin_call method_call = new getTenantAdmin_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTenantAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public getTenantAdmin_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTenantAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTenantAdmin_args args = new getTenantAdmin_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTenantAdmin();
      }
    }

    public void editTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editTenantAdmin_call method_call = new editTenantAdmin_call(tenantAdmin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editTenantAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin;
      public editTenantAdmin_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantAdmin = tenantAdmin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editTenantAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editTenantAdmin_args args = new editTenantAdmin_args();
        args.setTenantAdmin(tenantAdmin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editTenantAdmin();
      }
    }

    public void deleteTenantAdmin(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTenantAdmin_call method_call = new deleteTenantAdmin_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTenantAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public deleteTenantAdmin_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTenantAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTenantAdmin_args args = new deleteTenantAdmin_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteTenantAdmin();
      }
    }

    public void getApplicationsByTenantId(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationsByTenantId_call method_call = new getApplicationsByTenantId_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationsByTenantId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public getApplicationsByTenantId_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationsByTenantId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationsByTenantId_args args = new getApplicationsByTenantId_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationsByTenantId();
      }
    }

    public void getApplication(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplication_call method_call = new getApplication_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getApplication_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplication_args args = new getApplication_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplication();
      }
    }

    public void getApplicationByApplicationToken(String applicationToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationByApplicationToken_call method_call = new getApplicationByApplicationToken_call(applicationToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationByApplicationToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationToken;
      public getApplicationByApplicationToken_call(String applicationToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationToken = applicationToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationByApplicationToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationByApplicationToken_args args = new getApplicationByApplicationToken_args();
        args.setApplicationToken(applicationToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationByApplicationToken();
      }
    }

    public void editApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editApplication_call method_call = new editApplication_call(application, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application;
      public editApplication_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.application = application;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editApplication_args args = new editApplication_args();
        args.setApplication(application);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editApplication();
      }
    }

    public void deleteApplication(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteApplication_call method_call = new deleteApplication_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public deleteApplication_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteApplication_args args = new deleteApplication_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteApplication();
      }
    }

    public void getConfigurationSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfigurationSchemaVersionsByApplicationId_call method_call = new getConfigurationSchemaVersionsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfigurationSchemaVersionsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getConfigurationSchemaVersionsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigurationSchemaVersionsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfigurationSchemaVersionsByApplicationId_args args = new getConfigurationSchemaVersionsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfigurationSchemaVersionsByApplicationId();
      }
    }

    public void getConfigurationSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfigurationSchemasByApplicationId_call method_call = new getConfigurationSchemasByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfigurationSchemasByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getConfigurationSchemasByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigurationSchemasByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfigurationSchemasByApplicationId_args args = new getConfigurationSchemasByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfigurationSchemasByApplicationId();
      }
    }

    public void getConfigurationSchema(String configurationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfigurationSchema_call method_call = new getConfigurationSchema_call(configurationSchemaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfigurationSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configurationSchemaId;
      public getConfigurationSchema_call(String configurationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurationSchemaId = configurationSchemaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigurationSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfigurationSchema_args args = new getConfigurationSchema_args();
        args.setConfigurationSchemaId(configurationSchemaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfigurationSchema();
      }
    }

    public void editConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editConfigurationSchema_call method_call = new editConfigurationSchema_call(configurationSchema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editConfigurationSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema;
      public editConfigurationSchema_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurationSchema = configurationSchema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editConfigurationSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editConfigurationSchema_args args = new editConfigurationSchema_args();
        args.setConfigurationSchema(configurationSchema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editConfigurationSchema();
      }
    }

    public void getProfileSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileSchemaVersionsByApplicationId_call method_call = new getProfileSchemaVersionsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileSchemaVersionsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getProfileSchemaVersionsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileSchemaVersionsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileSchemaVersionsByApplicationId_args args = new getProfileSchemaVersionsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileSchemaVersionsByApplicationId();
      }
    }

    public void getProfileSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileSchemasByApplicationId_call method_call = new getProfileSchemasByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileSchemasByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getProfileSchemasByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileSchemasByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileSchemasByApplicationId_args args = new getProfileSchemasByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileSchemasByApplicationId();
      }
    }

    public void getProfileSchema(String profileSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileSchema_call method_call = new getProfileSchema_call(profileSchemaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileSchemaId;
      public getProfileSchema_call(String profileSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileSchemaId = profileSchemaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileSchema_args args = new getProfileSchema_args();
        args.setProfileSchemaId(profileSchemaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileSchema();
      }
    }

    public void editProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editProfileSchema_call method_call = new editProfileSchema_call(profileSchema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editProfileSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema;
      public editProfileSchema_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileSchema = profileSchema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editProfileSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editProfileSchema_args args = new editProfileSchema_args();
        args.setProfileSchema(profileSchema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editProfileSchema();
      }
    }

    public void getLogSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogSchemaVersionsByApplicationId_call method_call = new getLogSchemaVersionsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogSchemaVersionsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getLogSchemaVersionsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogSchemaVersionsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogSchemaVersionsByApplicationId_args args = new getLogSchemaVersionsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogSchemaVersionsByApplicationId();
      }
    }

    public void getLogSchemasByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogSchemasByApplicationId_call method_call = new getLogSchemasByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogSchemasByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getLogSchemasByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogSchemasByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogSchemasByApplicationId_args args = new getLogSchemasByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogSchemasByApplicationId();
      }
    }

    public void getLogSchema(String logSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogSchema_call method_call = new getLogSchema_call(logSchemaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String logSchemaId;
      public getLogSchema_call(String logSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logSchemaId = logSchemaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogSchema_args args = new getLogSchema_args();
        args.setLogSchemaId(logSchemaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogSchema();
      }
    }

    public void getLogSchemaByApplicationIdAndVersion(String applicationId, int version, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogSchemaByApplicationIdAndVersion_call method_call = new getLogSchemaByApplicationIdAndVersion_call(applicationId, version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogSchemaByApplicationIdAndVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private int version;
      public getLogSchemaByApplicationIdAndVersion_call(String applicationId, int version, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.version = version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogSchemaByApplicationIdAndVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogSchemaByApplicationIdAndVersion_args args = new getLogSchemaByApplicationIdAndVersion_args();
        args.setApplicationId(applicationId);
        args.setVersion(version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogSchemaByApplicationIdAndVersion();
      }
    }

    public void editLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editLogSchema_call method_call = new editLogSchema_call(logSchema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editLogSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema;
      public editLogSchema_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logSchema = logSchema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editLogSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editLogSchema_args args = new editLogSchema_args();
        args.setLogSchema(logSchema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editLogSchema();
      }
    }

    public void getEndpointGroupsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEndpointGroupsByApplicationId_call method_call = new getEndpointGroupsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEndpointGroupsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getEndpointGroupsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEndpointGroupsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEndpointGroupsByApplicationId_args args = new getEndpointGroupsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEndpointGroupsByApplicationId();
      }
    }

    public void getEndpointGroup(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEndpointGroup_call method_call = new getEndpointGroup_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEndpointGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public getEndpointGroup_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEndpointGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEndpointGroup_args args = new getEndpointGroup_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEndpointGroup();
      }
    }

    public void editEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editEndpointGroup_call method_call = new editEndpointGroup_call(endpointGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editEndpointGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup;
      public editEndpointGroup_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroup = endpointGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editEndpointGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editEndpointGroup_args args = new editEndpointGroup_args();
        args.setEndpointGroup(endpointGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editEndpointGroup();
      }
    }

    public void deleteEndpointGroup(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEndpointGroup_call method_call = new deleteEndpointGroup_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEndpointGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public deleteEndpointGroup_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEndpointGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEndpointGroup_args args = new deleteEndpointGroup_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteEndpointGroup();
      }
    }

    public void removeTopicsFromEndpointGroup(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeTopicsFromEndpointGroup_call method_call = new removeTopicsFromEndpointGroup_call(endpointGroupId, topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeTopicsFromEndpointGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      private String topicId;
      public removeTopicsFromEndpointGroup_call(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeTopicsFromEndpointGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeTopicsFromEndpointGroup_args args = new removeTopicsFromEndpointGroup_args();
        args.setEndpointGroupId(endpointGroupId);
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeTopicsFromEndpointGroup();
      }
    }

    public void addTopicsToEndpointGroup(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTopicsToEndpointGroup_call method_call = new addTopicsToEndpointGroup_call(endpointGroupId, topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTopicsToEndpointGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      private String topicId;
      public addTopicsToEndpointGroup_call(String endpointGroupId, String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTopicsToEndpointGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTopicsToEndpointGroup_args args = new addTopicsToEndpointGroup_args();
        args.setEndpointGroupId(endpointGroupId);
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTopicsToEndpointGroup();
      }
    }

    public void getProfileFilterRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileFilterRecordsByEndpointGroupId_call method_call = new getProfileFilterRecordsByEndpointGroupId_call(endpointGroupId, includeDeprecated, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileFilterRecordsByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      private boolean includeDeprecated;
      public getProfileFilterRecordsByEndpointGroupId_call(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
        this.includeDeprecated = includeDeprecated;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterRecordsByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileFilterRecordsByEndpointGroupId_args args = new getProfileFilterRecordsByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.setIncludeDeprecated(includeDeprecated);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileFilterRecordsByEndpointGroupId();
      }
    }

    public void getProfileFilterRecord(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileFilterRecord_call method_call = new getProfileFilterRecord_call(schemaId, endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileFilterRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String schemaId;
      private String endpointGroupId;
      public getProfileFilterRecord_call(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaId = schemaId;
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileFilterRecord_args args = new getProfileFilterRecord_args();
        args.setSchemaId(schemaId);
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileFilterRecord();
      }
    }

    public void getVacantProfileSchemasByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVacantProfileSchemasByEndpointGroupId_call method_call = new getVacantProfileSchemasByEndpointGroupId_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVacantProfileSchemasByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public getVacantProfileSchemasByEndpointGroupId_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVacantProfileSchemasByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVacantProfileSchemasByEndpointGroupId_args args = new getVacantProfileSchemasByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVacantProfileSchemasByEndpointGroupId();
      }
    }

    public void getProfileFilter(String profileFilterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileFilter_call method_call = new getProfileFilter_call(profileFilterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileFilterId;
      public getProfileFilter_call(String profileFilterId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileFilterId = profileFilterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileFilter_args args = new getProfileFilter_args();
        args.setProfileFilterId(profileFilterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileFilter();
      }
    }

    public void editProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editProfileFilter_call method_call = new editProfileFilter_call(profileFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter;
      public editProfileFilter_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileFilter = profileFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editProfileFilter_args args = new editProfileFilter_args();
        args.setProfileFilter(profileFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editProfileFilter();
      }
    }

    public void activateProfileFilter(String profileFilterId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateProfileFilter_call method_call = new activateProfileFilter_call(profileFilterId, activatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileFilterId;
      private String activatedUsername;
      public activateProfileFilter_call(String profileFilterId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileFilterId = profileFilterId;
        this.activatedUsername = activatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateProfileFilter_args args = new activateProfileFilter_args();
        args.setProfileFilterId(profileFilterId);
        args.setActivatedUsername(activatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateProfileFilter();
      }
    }

    public void deactivateProfileFilter(String profileFilterId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivateProfileFilter_call method_call = new deactivateProfileFilter_call(profileFilterId, deactivatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivateProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileFilterId;
      private String deactivatedUsername;
      public deactivateProfileFilter_call(String profileFilterId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileFilterId = profileFilterId;
        this.deactivatedUsername = deactivatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivateProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivateProfileFilter_args args = new deactivateProfileFilter_args();
        args.setProfileFilterId(profileFilterId);
        args.setDeactivatedUsername(deactivatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deactivateProfileFilter();
      }
    }

    public void deleteProfileFilterRecord(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProfileFilterRecord_call method_call = new deleteProfileFilterRecord_call(schemaId, endpointGroupId, deactivatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProfileFilterRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String schemaId;
      private String endpointGroupId;
      private String deactivatedUsername;
      public deleteProfileFilterRecord_call(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaId = schemaId;
        this.endpointGroupId = endpointGroupId;
        this.deactivatedUsername = deactivatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProfileFilterRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProfileFilterRecord_args args = new deleteProfileFilterRecord_args();
        args.setSchemaId(schemaId);
        args.setEndpointGroupId(endpointGroupId);
        args.setDeactivatedUsername(deactivatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteProfileFilterRecord();
      }
    }

    public void getConfigurationRecordsByEndpointGroupId(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfigurationRecordsByEndpointGroupId_call method_call = new getConfigurationRecordsByEndpointGroupId_call(endpointGroupId, includeDeprecated, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfigurationRecordsByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      private boolean includeDeprecated;
      public getConfigurationRecordsByEndpointGroupId_call(String endpointGroupId, boolean includeDeprecated, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
        this.includeDeprecated = includeDeprecated;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigurationRecordsByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfigurationRecordsByEndpointGroupId_args args = new getConfigurationRecordsByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.setIncludeDeprecated(includeDeprecated);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfigurationRecordsByEndpointGroupId();
      }
    }

    public void getConfigurationRecord(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfigurationRecord_call method_call = new getConfigurationRecord_call(schemaId, endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfigurationRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String schemaId;
      private String endpointGroupId;
      public getConfigurationRecord_call(String schemaId, String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaId = schemaId;
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigurationRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfigurationRecord_args args = new getConfigurationRecord_args();
        args.setSchemaId(schemaId);
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfigurationRecord();
      }
    }

    public void getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVacantConfigurationSchemasByEndpointGroupId_call method_call = new getVacantConfigurationSchemasByEndpointGroupId_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVacantConfigurationSchemasByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public getVacantConfigurationSchemasByEndpointGroupId_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVacantConfigurationSchemasByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVacantConfigurationSchemasByEndpointGroupId_args args = new getVacantConfigurationSchemasByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVacantConfigurationSchemasByEndpointGroupId();
      }
    }

    public void getConfiguration(String configurationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConfiguration_call method_call = new getConfiguration_call(configurationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configurationId;
      public getConfiguration_call(String configurationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurationId = configurationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConfiguration_args args = new getConfiguration_args();
        args.setConfigurationId(configurationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConfiguration();
      }
    }

    public void editConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editConfiguration_call method_call = new editConfiguration_call(configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration;
      public editConfiguration_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editConfiguration_args args = new editConfiguration_args();
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editConfiguration();
      }
    }

    public void activateConfiguration(String configurationId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateConfiguration_call method_call = new activateConfiguration_call(configurationId, activatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configurationId;
      private String activatedUsername;
      public activateConfiguration_call(String configurationId, String activatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurationId = configurationId;
        this.activatedUsername = activatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateConfiguration_args args = new activateConfiguration_args();
        args.setConfigurationId(configurationId);
        args.setActivatedUsername(activatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateConfiguration();
      }
    }

    public void deactivateConfiguration(String configurationId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivateConfiguration_call method_call = new deactivateConfiguration_call(configurationId, deactivatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivateConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configurationId;
      private String deactivatedUsername;
      public deactivateConfiguration_call(String configurationId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurationId = configurationId;
        this.deactivatedUsername = deactivatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivateConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivateConfiguration_args args = new deactivateConfiguration_args();
        args.setConfigurationId(configurationId);
        args.setDeactivatedUsername(deactivatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deactivateConfiguration();
      }
    }

    public void deleteConfigurationRecord(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteConfigurationRecord_call method_call = new deleteConfigurationRecord_call(schemaId, endpointGroupId, deactivatedUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteConfigurationRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String schemaId;
      private String endpointGroupId;
      private String deactivatedUsername;
      public deleteConfigurationRecord_call(String schemaId, String endpointGroupId, String deactivatedUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaId = schemaId;
        this.endpointGroupId = endpointGroupId;
        this.deactivatedUsername = deactivatedUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteConfigurationRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteConfigurationRecord_args args = new deleteConfigurationRecord_args();
        args.setSchemaId(schemaId);
        args.setEndpointGroupId(endpointGroupId);
        args.setDeactivatedUsername(deactivatedUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteConfigurationRecord();
      }
    }

    public void editUserConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editUserConfiguration_call method_call = new editUserConfiguration_call(configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editUserConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration;
      public editUserConfiguration_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editUserConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editUserConfiguration_args args = new editUserConfiguration_args();
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_editUserConfiguration();
      }
    }

    public void getNotificationSchemaVersionsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotificationSchemaVersionsByApplicationId_call method_call = new getNotificationSchemaVersionsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotificationSchemaVersionsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getNotificationSchemaVersionsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotificationSchemaVersionsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotificationSchemaVersionsByApplicationId_args args = new getNotificationSchemaVersionsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotificationSchemaVersionsByApplicationId();
      }
    }

    public void editNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editNotificationSchema_call method_call = new editNotificationSchema_call(notificationSchema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editNotificationSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema;
      public editNotificationSchema_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notificationSchema = notificationSchema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editNotificationSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editNotificationSchema_args args = new editNotificationSchema_args();
        args.setNotificationSchema(notificationSchema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editNotificationSchema();
      }
    }

    public void getNotificationSchema(String notificationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotificationSchema_call method_call = new getNotificationSchema_call(notificationSchemaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotificationSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String notificationSchemaId;
      public getNotificationSchema_call(String notificationSchemaId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notificationSchemaId = notificationSchemaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotificationSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotificationSchema_args args = new getNotificationSchema_args();
        args.setNotificationSchemaId(notificationSchemaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotificationSchema();
      }
    }

    public void getNotificationSchemasByAppId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotificationSchemasByAppId_call method_call = new getNotificationSchemasByAppId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotificationSchemasByAppId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getNotificationSchemasByAppId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotificationSchemasByAppId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotificationSchemasByAppId_args args = new getNotificationSchemasByAppId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotificationSchemasByAppId();
      }
    }

    public void getUserNotificationSchemasByAppId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserNotificationSchemasByAppId_call method_call = new getUserNotificationSchemasByAppId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserNotificationSchemasByAppId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getUserNotificationSchemasByAppId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserNotificationSchemasByAppId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserNotificationSchemasByAppId_args args = new getUserNotificationSchemasByAppId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserNotificationSchemasByAppId();
      }
    }

    public void findNotificationSchemasByAppIdAndType(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNotificationSchemasByAppIdAndType_call method_call = new findNotificationSchemasByAppIdAndType_call(applicationId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNotificationSchemasByAppIdAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type;
      public findNotificationSchemasByAppIdAndType_call(String applicationId, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNotificationSchemasByAppIdAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNotificationSchemasByAppIdAndType_args args = new findNotificationSchemasByAppIdAndType_args();
        args.setApplicationId(applicationId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNotificationSchemasByAppIdAndType();
      }
    }

    public void editNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editNotification_call method_call = new editNotification_call(notification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification;
      public editNotification_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notification = notification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editNotification_args args = new editNotification_args();
        args.setNotification(notification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editNotification();
      }
    }

    public void getNotification(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotification_call method_call = new getNotification_call(notificationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String notificationId;
      public getNotification_call(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notificationId = notificationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotification_args args = new getNotification_args();
        args.setNotificationId(notificationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotification();
      }
    }

    public void getNotificationsByTopicId(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotificationsByTopicId_call method_call = new getNotificationsByTopicId_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotificationsByTopicId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String topicId;
      public getNotificationsByTopicId_call(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotificationsByTopicId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotificationsByTopicId_args args = new getNotificationsByTopicId_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotificationsByTopicId();
      }
    }

    public void editTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editTopic_call method_call = new editTopic_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic;
      public editTopic_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editTopic_args args = new editTopic_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editTopic();
      }
    }

    public void getTopic(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopic_call method_call = new getTopic_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String topicId;
      public getTopic_call(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopic_args args = new getTopic_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopic();
      }
    }

    public void getTopicByAppId(String appId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopicByAppId_call method_call = new getTopicByAppId_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopicByAppId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appId;
      public getTopicByAppId_call(String appId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopicByAppId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopicByAppId_args args = new getTopicByAppId_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopicByAppId();
      }
    }

    public void getTopicByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopicByEndpointGroupId_call method_call = new getTopicByEndpointGroupId_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopicByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public getTopicByEndpointGroupId_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopicByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopicByEndpointGroupId_args args = new getTopicByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopicByEndpointGroupId();
      }
    }

    public void getVacantTopicByEndpointGroupId(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVacantTopicByEndpointGroupId_call method_call = new getVacantTopicByEndpointGroupId_call(endpointGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVacantTopicByEndpointGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointGroupId;
      public getVacantTopicByEndpointGroupId_call(String endpointGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointGroupId = endpointGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVacantTopicByEndpointGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVacantTopicByEndpointGroupId_args args = new getVacantTopicByEndpointGroupId_args();
        args.setEndpointGroupId(endpointGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVacantTopicByEndpointGroupId();
      }
    }

    public void deleteTopicById(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTopicById_call method_call = new deleteTopicById_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTopicById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String topicId;
      public deleteTopicById_call(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTopicById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTopicById_args args = new deleteTopicById_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteTopicById();
      }
    }

    public void getUnicastNotification(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUnicastNotification_call method_call = new getUnicastNotification_call(notificationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUnicastNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String notificationId;
      public getUnicastNotification_call(String notificationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notificationId = notificationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUnicastNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUnicastNotification_args args = new getUnicastNotification_args();
        args.setNotificationId(notificationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUnicastNotification();
      }
    }

    public void editUnicastNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editUnicastNotification_call method_call = new editUnicastNotification_call(notification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editUnicastNotification_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification;
      public editUnicastNotification_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notification = notification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editUnicastNotification", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editUnicastNotification_args args = new editUnicastNotification_args();
        args.setNotification(notification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editUnicastNotification();
      }
    }

    public void getUnicastNotificationsByKeyHash(ByteBuffer keyhash, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUnicastNotificationsByKeyHash_call method_call = new getUnicastNotificationsByKeyHash_call(keyhash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUnicastNotificationsByKeyHash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer keyhash;
      public getUnicastNotificationsByKeyHash_call(ByteBuffer keyhash, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyhash = keyhash;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUnicastNotificationsByKeyHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUnicastNotificationsByKeyHash_args args = new getUnicastNotificationsByKeyHash_args();
        args.setKeyhash(keyhash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUnicastNotificationsByKeyHash();
      }
    }

    public void addSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSdkProfile_call method_call = new addSdkProfile_call(sdkProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSdkProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile;
      public addSdkProfile_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkProfile = sdkProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSdkProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSdkProfile_args args = new addSdkProfile_args();
        args.setSdkProfile(sdkProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSdkProfile();
      }
    }

    public void deleteSdkProfile(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSdkProfile_call method_call = new deleteSdkProfile_call(sdkProfileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSdkProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sdkProfileId;
      public deleteSdkProfile_call(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkProfileId = sdkProfileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSdkProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSdkProfile_args args = new deleteSdkProfile_args();
        args.setSdkProfileId(sdkProfileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSdkProfile();
      }
    }

    public void getSdkProfile(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSdkProfile_call method_call = new getSdkProfile_call(sdkProfileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSdkProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sdkProfileId;
      public getSdkProfile_call(String sdkProfileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkProfileId = sdkProfileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSdkProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSdkProfile_args args = new getSdkProfile_args();
        args.setSdkProfileId(sdkProfileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSdkProfile();
      }
    }

    public void getSdkProfilesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSdkProfilesByApplicationId_call method_call = new getSdkProfilesByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSdkProfilesByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getSdkProfilesByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSdkProfilesByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSdkProfilesByApplicationId_args args = new getSdkProfilesByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSdkProfilesByApplicationId();
      }
    }

    public void generateSdk(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateSdk_call method_call = new generateSdk_call(sdkProfile, targetPlatform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateSdk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile;
      private SdkPlatform targetPlatform;
      public generateSdk_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile, SdkPlatform targetPlatform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkProfile = sdkProfile;
        this.targetPlatform = targetPlatform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateSdk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateSdk_args args = new generateSdk_args();
        args.setSdkProfile(sdkProfile);
        args.setTargetPlatform(targetPlatform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Sdk getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateSdk();
      }
    }

    public void isSdkProfileUsed(String sdkToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isSdkProfileUsed_call method_call = new isSdkProfileUsed_call(sdkToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isSdkProfileUsed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sdkToken;
      public isSdkProfileUsed_call(String sdkToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkToken = sdkToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isSdkProfileUsed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isSdkProfileUsed_args args = new isSdkProfileUsed_args();
        args.setSdkToken(sdkToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isSdkProfileUsed();
      }
    }

    public void editEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editEventClassFamily_call method_call = new editEventClassFamily_call(eventClassFamily, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editEventClassFamily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily;
      public editEventClassFamily_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventClassFamily = eventClassFamily;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editEventClassFamily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editEventClassFamily_args args = new editEventClassFamily_args();
        args.setEventClassFamily(eventClassFamily);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editEventClassFamily();
      }
    }

    public void getEventClassFamiliesByTenantId(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventClassFamiliesByTenantId_call method_call = new getEventClassFamiliesByTenantId_call(tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventClassFamiliesByTenantId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tenantId;
      public getEventClassFamiliesByTenantId_call(String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventClassFamiliesByTenantId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventClassFamiliesByTenantId_args args = new getEventClassFamiliesByTenantId_args();
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventClassFamiliesByTenantId();
      }
    }

    public void getEventClassFamily(String eventClassFamilyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventClassFamily_call method_call = new getEventClassFamily_call(eventClassFamilyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventClassFamily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String eventClassFamilyId;
      public getEventClassFamily_call(String eventClassFamilyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventClassFamilyId = eventClassFamilyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventClassFamily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventClassFamily_args args = new getEventClassFamily_args();
        args.setEventClassFamilyId(eventClassFamilyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventClassFamily();
      }
    }

    public void addEventClassFamilySchema(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEventClassFamilySchema_call method_call = new addEventClassFamilySchema_call(eventClassFamilyId, eventClassFamilySchema, createdUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEventClassFamilySchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String eventClassFamilyId;
      private String eventClassFamilySchema;
      private String createdUsername;
      public addEventClassFamilySchema_call(String eventClassFamilyId, String eventClassFamilySchema, String createdUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventClassFamilyId = eventClassFamilyId;
        this.eventClassFamilySchema = eventClassFamilySchema;
        this.createdUsername = createdUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEventClassFamilySchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEventClassFamilySchema_args args = new addEventClassFamilySchema_args();
        args.setEventClassFamilyId(eventClassFamilyId);
        args.setEventClassFamilySchema(eventClassFamilySchema);
        args.setCreatedUsername(createdUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addEventClassFamilySchema();
      }
    }

    public void getEventClassesByFamilyIdVersionAndType(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventClassesByFamilyIdVersionAndType_call method_call = new getEventClassesByFamilyIdVersionAndType_call(ecfId, version, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventClassesByFamilyIdVersionAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ecfId;
      private int version;
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type;
      public getEventClassesByFamilyIdVersionAndType_call(String ecfId, int version, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ecfId = ecfId;
        this.version = version;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventClassesByFamilyIdVersionAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventClassesByFamilyIdVersionAndType_args args = new getEventClassesByFamilyIdVersionAndType_args();
        args.setEcfId(ecfId);
        args.setVersion(version);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventClassesByFamilyIdVersionAndType();
      }
    }

    public void editApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editApplicationEventFamilyMap_call method_call = new editApplicationEventFamilyMap_call(applicationEventFamilyMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editApplicationEventFamilyMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap;
      public editApplicationEventFamilyMap_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationEventFamilyMap = applicationEventFamilyMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editApplicationEventFamilyMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editApplicationEventFamilyMap_args args = new editApplicationEventFamilyMap_args();
        args.setApplicationEventFamilyMap(applicationEventFamilyMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editApplicationEventFamilyMap();
      }
    }

    public void getApplicationEventFamilyMap(String applicationEventFamilyMapId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationEventFamilyMap_call method_call = new getApplicationEventFamilyMap_call(applicationEventFamilyMapId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationEventFamilyMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationEventFamilyMapId;
      public getApplicationEventFamilyMap_call(String applicationEventFamilyMapId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationEventFamilyMapId = applicationEventFamilyMapId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationEventFamilyMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationEventFamilyMap_args args = new getApplicationEventFamilyMap_args();
        args.setApplicationEventFamilyMapId(applicationEventFamilyMapId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationEventFamilyMap();
      }
    }

    public void getApplicationEventFamilyMapsByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationEventFamilyMapsByApplicationId_call method_call = new getApplicationEventFamilyMapsByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationEventFamilyMapsByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getApplicationEventFamilyMapsByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationEventFamilyMapsByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationEventFamilyMapsByApplicationId_args args = new getApplicationEventFamilyMapsByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationEventFamilyMapsByApplicationId();
      }
    }

    public void getVacantEventClassFamiliesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVacantEventClassFamiliesByApplicationId_call method_call = new getVacantEventClassFamiliesByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVacantEventClassFamiliesByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getVacantEventClassFamiliesByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVacantEventClassFamiliesByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVacantEventClassFamiliesByApplicationId_args args = new getVacantEventClassFamiliesByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVacantEventClassFamiliesByApplicationId();
      }
    }

    public void getEventClassFamiliesByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventClassFamiliesByApplicationId_call method_call = new getEventClassFamiliesByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventClassFamiliesByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getEventClassFamiliesByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventClassFamiliesByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventClassFamiliesByApplicationId_args args = new getEventClassFamiliesByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventClassFamiliesByApplicationId();
      }
    }

    public void getEndpointUsers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEndpointUsers_call method_call = new getEndpointUsers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEndpointUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getEndpointUsers_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEndpointUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEndpointUsers_args args = new getEndpointUsers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEndpointUsers();
      }
    }

    public void getEndpointUser(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEndpointUser_call method_call = new getEndpointUser_call(endpointUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEndpointUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointUserId;
      public getEndpointUser_call(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointUserId = endpointUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEndpointUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEndpointUser_args args = new getEndpointUser_args();
        args.setEndpointUserId(endpointUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEndpointUser();
      }
    }

    public void editEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editEndpointUser_call method_call = new editEndpointUser_call(endpointUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editEndpointUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser;
      public editEndpointUser_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointUser = endpointUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editEndpointUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editEndpointUser_args args = new editEndpointUser_args();
        args.setEndpointUser(endpointUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editEndpointUser();
      }
    }

    public void deleteEndpointUser(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEndpointUser_call method_call = new deleteEndpointUser_call(endpointUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEndpointUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String endpointUserId;
      public deleteEndpointUser_call(String endpointUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpointUserId = endpointUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEndpointUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEndpointUser_args args = new deleteEndpointUser_args();
        args.setEndpointUserId(endpointUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteEndpointUser();
      }
    }

    public void generateEndpointUserAccessToken(String externalUid, String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateEndpointUserAccessToken_call method_call = new generateEndpointUserAccessToken_call(externalUid, tenantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateEndpointUserAccessToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String externalUid;
      private String tenantId;
      public generateEndpointUserAccessToken_call(String externalUid, String tenantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.externalUid = externalUid;
        this.tenantId = tenantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateEndpointUserAccessToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateEndpointUserAccessToken_args args = new generateEndpointUserAccessToken_args();
        args.setExternalUid(externalUid);
        args.setTenantId(tenantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateEndpointUserAccessToken();
      }
    }

    public void getLogAppendersByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogAppendersByApplicationId_call method_call = new getLogAppendersByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogAppendersByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getLogAppendersByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogAppendersByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogAppendersByApplicationId_args args = new getLogAppendersByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogAppendersByApplicationId();
      }
    }

    public void getLogAppender(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogAppender_call method_call = new getLogAppender_call(logAppenderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogAppender_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String logAppenderId;
      public getLogAppender_call(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logAppenderId = logAppenderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogAppender", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogAppender_args args = new getLogAppender_args();
        args.setLogAppenderId(logAppenderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogAppender();
      }
    }

    public void editLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editLogAppender_call method_call = new editLogAppender_call(logAppender, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editLogAppender_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender;
      public editLogAppender_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logAppender = logAppender;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editLogAppender", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editLogAppender_args args = new editLogAppender_args();
        args.setLogAppender(logAppender);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editLogAppender();
      }
    }

    public void deleteLogAppender(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLogAppender_call method_call = new deleteLogAppender_call(logAppenderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLogAppender_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String logAppenderId;
      public deleteLogAppender_call(String logAppenderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logAppenderId = logAppenderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLogAppender", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLogAppender_args args = new deleteLogAppender_args();
        args.setLogAppenderId(logAppenderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteLogAppender();
      }
    }

    public void generateRecordStructureLibrary(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateRecordStructureLibrary_call method_call = new generateRecordStructureLibrary_call(applicationId, logSchemaVersion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateRecordStructureLibrary_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private int logSchemaVersion;
      public generateRecordStructureLibrary_call(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.logSchemaVersion = logSchemaVersion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateRecordStructureLibrary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateRecordStructureLibrary_args args = new generateRecordStructureLibrary_args();
        args.setApplicationId(applicationId);
        args.setLogSchemaVersion(logSchemaVersion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileData getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateRecordStructureLibrary();
      }
    }

    public void getRecordStructureSchema(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordStructureSchema_call method_call = new getRecordStructureSchema_call(applicationId, logSchemaVersion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordStructureSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private int logSchemaVersion;
      public getRecordStructureSchema_call(String applicationId, int logSchemaVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.logSchemaVersion = logSchemaVersion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordStructureSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordStructureSchema_args args = new getRecordStructureSchema_args();
        args.setApplicationId(applicationId);
        args.setLogSchemaVersion(logSchemaVersion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileData getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordStructureSchema();
      }
    }

    public void getRecordStructureData(String applicationId, int schemaVersion, RecordFile recordFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordStructureData_call method_call = new getRecordStructureData_call(applicationId, schemaVersion, recordFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordStructureData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private int schemaVersion;
      private RecordFile recordFile;
      public getRecordStructureData_call(String applicationId, int schemaVersion, RecordFile recordFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.schemaVersion = schemaVersion;
        this.recordFile = recordFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordStructureData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordStructureData_args args = new getRecordStructureData_args();
        args.setApplicationId(applicationId);
        args.setSchemaVersion(schemaVersion);
        args.setRecordFile(recordFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileData getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordStructureData();
      }
    }

    public void getUserVerifiersByApplicationId(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserVerifiersByApplicationId_call method_call = new getUserVerifiersByApplicationId_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserVerifiersByApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      public getUserVerifiersByApplicationId_call(String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserVerifiersByApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserVerifiersByApplicationId_args args = new getUserVerifiersByApplicationId_args();
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserVerifiersByApplicationId();
      }
    }

    public void getUserVerifier(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserVerifier_call method_call = new getUserVerifier_call(userVerifierId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserVerifier_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userVerifierId;
      public getUserVerifier_call(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userVerifierId = userVerifierId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserVerifier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserVerifier_args args = new getUserVerifier_args();
        args.setUserVerifierId(userVerifierId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserVerifier();
      }
    }

    public void editUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editUserVerifier_call method_call = new editUserVerifier_call(userVerifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editUserVerifier_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier;
      public editUserVerifier_call(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userVerifier = userVerifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editUserVerifier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editUserVerifier_args args = new editUserVerifier_args();
        args.setUserVerifier(userVerifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editUserVerifier();
      }
    }

    public void deleteUserVerifier(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserVerifier_call method_call = new deleteUserVerifier_call(userVerifierId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserVerifier_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userVerifierId;
      public deleteUserVerifier_call(String userVerifierId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userVerifierId = userVerifierId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserVerifier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserVerifier_args args = new deleteUserVerifier_args();
        args.setUserVerifierId(userVerifierId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ControlThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUserVerifier();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTenants", new getTenants());
      processMap.put("getTenant", new getTenant());
      processMap.put("editTenant", new editTenant());
      processMap.put("deleteTenant", new deleteTenant());
      processMap.put("getUsers", new getUsers());
      processMap.put("getTenantUsers", new getTenantUsers());
      processMap.put("getUser", new getUser());
      processMap.put("getUserByExternalUid", new getUserByExternalUid());
      processMap.put("editUser", new editUser());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("getTenantAdmins", new getTenantAdmins());
      processMap.put("getTenantAdmin", new getTenantAdmin());
      processMap.put("editTenantAdmin", new editTenantAdmin());
      processMap.put("deleteTenantAdmin", new deleteTenantAdmin());
      processMap.put("getApplicationsByTenantId", new getApplicationsByTenantId());
      processMap.put("getApplication", new getApplication());
      processMap.put("getApplicationByApplicationToken", new getApplicationByApplicationToken());
      processMap.put("editApplication", new editApplication());
      processMap.put("deleteApplication", new deleteApplication());
      processMap.put("getConfigurationSchemaVersionsByApplicationId", new getConfigurationSchemaVersionsByApplicationId());
      processMap.put("getConfigurationSchemasByApplicationId", new getConfigurationSchemasByApplicationId());
      processMap.put("getConfigurationSchema", new getConfigurationSchema());
      processMap.put("editConfigurationSchema", new editConfigurationSchema());
      processMap.put("getProfileSchemaVersionsByApplicationId", new getProfileSchemaVersionsByApplicationId());
      processMap.put("getProfileSchemasByApplicationId", new getProfileSchemasByApplicationId());
      processMap.put("getProfileSchema", new getProfileSchema());
      processMap.put("editProfileSchema", new editProfileSchema());
      processMap.put("getLogSchemaVersionsByApplicationId", new getLogSchemaVersionsByApplicationId());
      processMap.put("getLogSchemasByApplicationId", new getLogSchemasByApplicationId());
      processMap.put("getLogSchema", new getLogSchema());
      processMap.put("getLogSchemaByApplicationIdAndVersion", new getLogSchemaByApplicationIdAndVersion());
      processMap.put("editLogSchema", new editLogSchema());
      processMap.put("getEndpointGroupsByApplicationId", new getEndpointGroupsByApplicationId());
      processMap.put("getEndpointGroup", new getEndpointGroup());
      processMap.put("editEndpointGroup", new editEndpointGroup());
      processMap.put("deleteEndpointGroup", new deleteEndpointGroup());
      processMap.put("removeTopicsFromEndpointGroup", new removeTopicsFromEndpointGroup());
      processMap.put("addTopicsToEndpointGroup", new addTopicsToEndpointGroup());
      processMap.put("getProfileFilterRecordsByEndpointGroupId", new getProfileFilterRecordsByEndpointGroupId());
      processMap.put("getProfileFilterRecord", new getProfileFilterRecord());
      processMap.put("getVacantProfileSchemasByEndpointGroupId", new getVacantProfileSchemasByEndpointGroupId());
      processMap.put("getProfileFilter", new getProfileFilter());
      processMap.put("editProfileFilter", new editProfileFilter());
      processMap.put("activateProfileFilter", new activateProfileFilter());
      processMap.put("deactivateProfileFilter", new deactivateProfileFilter());
      processMap.put("deleteProfileFilterRecord", new deleteProfileFilterRecord());
      processMap.put("getConfigurationRecordsByEndpointGroupId", new getConfigurationRecordsByEndpointGroupId());
      processMap.put("getConfigurationRecord", new getConfigurationRecord());
      processMap.put("getVacantConfigurationSchemasByEndpointGroupId", new getVacantConfigurationSchemasByEndpointGroupId());
      processMap.put("getConfiguration", new getConfiguration());
      processMap.put("editConfiguration", new editConfiguration());
      processMap.put("activateConfiguration", new activateConfiguration());
      processMap.put("deactivateConfiguration", new deactivateConfiguration());
      processMap.put("deleteConfigurationRecord", new deleteConfigurationRecord());
      processMap.put("editUserConfiguration", new editUserConfiguration());
      processMap.put("getNotificationSchemaVersionsByApplicationId", new getNotificationSchemaVersionsByApplicationId());
      processMap.put("editNotificationSchema", new editNotificationSchema());
      processMap.put("getNotificationSchema", new getNotificationSchema());
      processMap.put("getNotificationSchemasByAppId", new getNotificationSchemasByAppId());
      processMap.put("getUserNotificationSchemasByAppId", new getUserNotificationSchemasByAppId());
      processMap.put("findNotificationSchemasByAppIdAndType", new findNotificationSchemasByAppIdAndType());
      processMap.put("editNotification", new editNotification());
      processMap.put("getNotification", new getNotification());
      processMap.put("getNotificationsByTopicId", new getNotificationsByTopicId());
      processMap.put("editTopic", new editTopic());
      processMap.put("getTopic", new getTopic());
      processMap.put("getTopicByAppId", new getTopicByAppId());
      processMap.put("getTopicByEndpointGroupId", new getTopicByEndpointGroupId());
      processMap.put("getVacantTopicByEndpointGroupId", new getVacantTopicByEndpointGroupId());
      processMap.put("deleteTopicById", new deleteTopicById());
      processMap.put("getUnicastNotification", new getUnicastNotification());
      processMap.put("editUnicastNotification", new editUnicastNotification());
      processMap.put("getUnicastNotificationsByKeyHash", new getUnicastNotificationsByKeyHash());
      processMap.put("addSdkProfile", new addSdkProfile());
      processMap.put("deleteSdkProfile", new deleteSdkProfile());
      processMap.put("getSdkProfile", new getSdkProfile());
      processMap.put("getSdkProfilesByApplicationId", new getSdkProfilesByApplicationId());
      processMap.put("generateSdk", new generateSdk());
      processMap.put("isSdkProfileUsed", new isSdkProfileUsed());
      processMap.put("editEventClassFamily", new editEventClassFamily());
      processMap.put("getEventClassFamiliesByTenantId", new getEventClassFamiliesByTenantId());
      processMap.put("getEventClassFamily", new getEventClassFamily());
      processMap.put("addEventClassFamilySchema", new addEventClassFamilySchema());
      processMap.put("getEventClassesByFamilyIdVersionAndType", new getEventClassesByFamilyIdVersionAndType());
      processMap.put("editApplicationEventFamilyMap", new editApplicationEventFamilyMap());
      processMap.put("getApplicationEventFamilyMap", new getApplicationEventFamilyMap());
      processMap.put("getApplicationEventFamilyMapsByApplicationId", new getApplicationEventFamilyMapsByApplicationId());
      processMap.put("getVacantEventClassFamiliesByApplicationId", new getVacantEventClassFamiliesByApplicationId());
      processMap.put("getEventClassFamiliesByApplicationId", new getEventClassFamiliesByApplicationId());
      processMap.put("getEndpointUsers", new getEndpointUsers());
      processMap.put("getEndpointUser", new getEndpointUser());
      processMap.put("editEndpointUser", new editEndpointUser());
      processMap.put("deleteEndpointUser", new deleteEndpointUser());
      processMap.put("generateEndpointUserAccessToken", new generateEndpointUserAccessToken());
      processMap.put("getLogAppendersByApplicationId", new getLogAppendersByApplicationId());
      processMap.put("getLogAppender", new getLogAppender());
      processMap.put("editLogAppender", new editLogAppender());
      processMap.put("deleteLogAppender", new deleteLogAppender());
      processMap.put("generateRecordStructureLibrary", new generateRecordStructureLibrary());
      processMap.put("getRecordStructureSchema", new getRecordStructureSchema());
      processMap.put("getRecordStructureData", new getRecordStructureData());
      processMap.put("getUserVerifiersByApplicationId", new getUserVerifiersByApplicationId());
      processMap.put("getUserVerifier", new getUserVerifier());
      processMap.put("editUserVerifier", new editUserVerifier());
      processMap.put("deleteUserVerifier", new deleteUserVerifier());
      return processMap;
    }

    public static class getTenants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTenants_args> {
      public getTenants() {
        super("getTenants");
      }

      public getTenants_args getEmptyArgsInstance() {
        return new getTenants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTenants_result getResult(I iface, getTenants_args args) throws org.apache.thrift.TException {
        getTenants_result result = new getTenants_result();
        try {
          result.success = iface.getTenants();
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTenant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTenant_args> {
      public getTenant() {
        super("getTenant");
      }

      public getTenant_args getEmptyArgsInstance() {
        return new getTenant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTenant_result getResult(I iface, getTenant_args args) throws org.apache.thrift.TException {
        getTenant_result result = new getTenant_result();
        try {
          result.success = iface.getTenant(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editTenant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editTenant_args> {
      public editTenant() {
        super("editTenant");
      }

      public editTenant_args getEmptyArgsInstance() {
        return new editTenant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editTenant_result getResult(I iface, editTenant_args args) throws org.apache.thrift.TException {
        editTenant_result result = new editTenant_result();
        try {
          result.success = iface.editTenant(args.tenant);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteTenant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTenant_args> {
      public deleteTenant() {
        super("deleteTenant");
      }

      public deleteTenant_args getEmptyArgsInstance() {
        return new deleteTenant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTenant_result getResult(I iface, deleteTenant_args args) throws org.apache.thrift.TException {
        deleteTenant_result result = new deleteTenant_result();
        try {
          iface.deleteTenant(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUsers_args> {
      public getUsers() {
        super("getUsers");
      }

      public getUsers_args getEmptyArgsInstance() {
        return new getUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUsers_result getResult(I iface, getUsers_args args) throws org.apache.thrift.TException {
        getUsers_result result = new getUsers_result();
        try {
          result.success = iface.getUsers();
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTenantUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTenantUsers_args> {
      public getTenantUsers() {
        super("getTenantUsers");
      }

      public getTenantUsers_args getEmptyArgsInstance() {
        return new getTenantUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTenantUsers_result getResult(I iface, getTenantUsers_args args) throws org.apache.thrift.TException {
        getTenantUsers_result result = new getTenantUsers_result();
        try {
          result.success = iface.getTenantUsers(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {
      public getUser() {
        super("getUser");
      }

      public getUser_args getEmptyArgsInstance() {
        return new getUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
        getUser_result result = new getUser_result();
        try {
          result.success = iface.getUser(args.userId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUserByExternalUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserByExternalUid_args> {
      public getUserByExternalUid() {
        super("getUserByExternalUid");
      }

      public getUserByExternalUid_args getEmptyArgsInstance() {
        return new getUserByExternalUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserByExternalUid_result getResult(I iface, getUserByExternalUid_args args) throws org.apache.thrift.TException {
        getUserByExternalUid_result result = new getUserByExternalUid_result();
        try {
          result.success = iface.getUserByExternalUid(args.uid);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editUser_args> {
      public editUser() {
        super("editUser");
      }

      public editUser_args getEmptyArgsInstance() {
        return new editUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editUser_result getResult(I iface, editUser_args args) throws org.apache.thrift.TException {
        editUser_result result = new editUser_result();
        try {
          result.success = iface.editUser(args.user);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUser_args> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUser_result getResult(I iface, deleteUser_args args) throws org.apache.thrift.TException {
        deleteUser_result result = new deleteUser_result();
        try {
          iface.deleteUser(args.userId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTenantAdmins<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTenantAdmins_args> {
      public getTenantAdmins() {
        super("getTenantAdmins");
      }

      public getTenantAdmins_args getEmptyArgsInstance() {
        return new getTenantAdmins_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTenantAdmins_result getResult(I iface, getTenantAdmins_args args) throws org.apache.thrift.TException {
        getTenantAdmins_result result = new getTenantAdmins_result();
        try {
          result.success = iface.getTenantAdmins();
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTenantAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTenantAdmin_args> {
      public getTenantAdmin() {
        super("getTenantAdmin");
      }

      public getTenantAdmin_args getEmptyArgsInstance() {
        return new getTenantAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTenantAdmin_result getResult(I iface, getTenantAdmin_args args) throws org.apache.thrift.TException {
        getTenantAdmin_result result = new getTenantAdmin_result();
        try {
          result.success = iface.getTenantAdmin(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editTenantAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editTenantAdmin_args> {
      public editTenantAdmin() {
        super("editTenantAdmin");
      }

      public editTenantAdmin_args getEmptyArgsInstance() {
        return new editTenantAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editTenantAdmin_result getResult(I iface, editTenantAdmin_args args) throws org.apache.thrift.TException {
        editTenantAdmin_result result = new editTenantAdmin_result();
        try {
          result.success = iface.editTenantAdmin(args.tenantAdmin);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteTenantAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTenantAdmin_args> {
      public deleteTenantAdmin() {
        super("deleteTenantAdmin");
      }

      public deleteTenantAdmin_args getEmptyArgsInstance() {
        return new deleteTenantAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTenantAdmin_result getResult(I iface, deleteTenantAdmin_args args) throws org.apache.thrift.TException {
        deleteTenantAdmin_result result = new deleteTenantAdmin_result();
        try {
          iface.deleteTenantAdmin(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getApplicationsByTenantId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationsByTenantId_args> {
      public getApplicationsByTenantId() {
        super("getApplicationsByTenantId");
      }

      public getApplicationsByTenantId_args getEmptyArgsInstance() {
        return new getApplicationsByTenantId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationsByTenantId_result getResult(I iface, getApplicationsByTenantId_args args) throws org.apache.thrift.TException {
        getApplicationsByTenantId_result result = new getApplicationsByTenantId_result();
        try {
          result.success = iface.getApplicationsByTenantId(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplication_args> {
      public getApplication() {
        super("getApplication");
      }

      public getApplication_args getEmptyArgsInstance() {
        return new getApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplication_result getResult(I iface, getApplication_args args) throws org.apache.thrift.TException {
        getApplication_result result = new getApplication_result();
        try {
          result.success = iface.getApplication(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getApplicationByApplicationToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationByApplicationToken_args> {
      public getApplicationByApplicationToken() {
        super("getApplicationByApplicationToken");
      }

      public getApplicationByApplicationToken_args getEmptyArgsInstance() {
        return new getApplicationByApplicationToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationByApplicationToken_result getResult(I iface, getApplicationByApplicationToken_args args) throws org.apache.thrift.TException {
        getApplicationByApplicationToken_result result = new getApplicationByApplicationToken_result();
        try {
          result.success = iface.getApplicationByApplicationToken(args.applicationToken);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editApplication_args> {
      public editApplication() {
        super("editApplication");
      }

      public editApplication_args getEmptyArgsInstance() {
        return new editApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editApplication_result getResult(I iface, editApplication_args args) throws org.apache.thrift.TException {
        editApplication_result result = new editApplication_result();
        try {
          result.success = iface.editApplication(args.application);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteApplication_args> {
      public deleteApplication() {
        super("deleteApplication");
      }

      public deleteApplication_args getEmptyArgsInstance() {
        return new deleteApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteApplication_result getResult(I iface, deleteApplication_args args) throws org.apache.thrift.TException {
        deleteApplication_result result = new deleteApplication_result();
        try {
          iface.deleteApplication(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfigurationSchemaVersionsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigurationSchemaVersionsByApplicationId_args> {
      public getConfigurationSchemaVersionsByApplicationId() {
        super("getConfigurationSchemaVersionsByApplicationId");
      }

      public getConfigurationSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getConfigurationSchemaVersionsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfigurationSchemaVersionsByApplicationId_result getResult(I iface, getConfigurationSchemaVersionsByApplicationId_args args) throws org.apache.thrift.TException {
        getConfigurationSchemaVersionsByApplicationId_result result = new getConfigurationSchemaVersionsByApplicationId_result();
        try {
          result.success = iface.getConfigurationSchemaVersionsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfigurationSchemasByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigurationSchemasByApplicationId_args> {
      public getConfigurationSchemasByApplicationId() {
        super("getConfigurationSchemasByApplicationId");
      }

      public getConfigurationSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getConfigurationSchemasByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfigurationSchemasByApplicationId_result getResult(I iface, getConfigurationSchemasByApplicationId_args args) throws org.apache.thrift.TException {
        getConfigurationSchemasByApplicationId_result result = new getConfigurationSchemasByApplicationId_result();
        try {
          result.success = iface.getConfigurationSchemasByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfigurationSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigurationSchema_args> {
      public getConfigurationSchema() {
        super("getConfigurationSchema");
      }

      public getConfigurationSchema_args getEmptyArgsInstance() {
        return new getConfigurationSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfigurationSchema_result getResult(I iface, getConfigurationSchema_args args) throws org.apache.thrift.TException {
        getConfigurationSchema_result result = new getConfigurationSchema_result();
        try {
          result.success = iface.getConfigurationSchema(args.configurationSchemaId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editConfigurationSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editConfigurationSchema_args> {
      public editConfigurationSchema() {
        super("editConfigurationSchema");
      }

      public editConfigurationSchema_args getEmptyArgsInstance() {
        return new editConfigurationSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editConfigurationSchema_result getResult(I iface, editConfigurationSchema_args args) throws org.apache.thrift.TException {
        editConfigurationSchema_result result = new editConfigurationSchema_result();
        try {
          result.success = iface.editConfigurationSchema(args.configurationSchema);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileSchemaVersionsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileSchemaVersionsByApplicationId_args> {
      public getProfileSchemaVersionsByApplicationId() {
        super("getProfileSchemaVersionsByApplicationId");
      }

      public getProfileSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getProfileSchemaVersionsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileSchemaVersionsByApplicationId_result getResult(I iface, getProfileSchemaVersionsByApplicationId_args args) throws org.apache.thrift.TException {
        getProfileSchemaVersionsByApplicationId_result result = new getProfileSchemaVersionsByApplicationId_result();
        try {
          result.success = iface.getProfileSchemaVersionsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileSchemasByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileSchemasByApplicationId_args> {
      public getProfileSchemasByApplicationId() {
        super("getProfileSchemasByApplicationId");
      }

      public getProfileSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getProfileSchemasByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileSchemasByApplicationId_result getResult(I iface, getProfileSchemasByApplicationId_args args) throws org.apache.thrift.TException {
        getProfileSchemasByApplicationId_result result = new getProfileSchemasByApplicationId_result();
        try {
          result.success = iface.getProfileSchemasByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileSchema_args> {
      public getProfileSchema() {
        super("getProfileSchema");
      }

      public getProfileSchema_args getEmptyArgsInstance() {
        return new getProfileSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileSchema_result getResult(I iface, getProfileSchema_args args) throws org.apache.thrift.TException {
        getProfileSchema_result result = new getProfileSchema_result();
        try {
          result.success = iface.getProfileSchema(args.profileSchemaId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editProfileSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editProfileSchema_args> {
      public editProfileSchema() {
        super("editProfileSchema");
      }

      public editProfileSchema_args getEmptyArgsInstance() {
        return new editProfileSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editProfileSchema_result getResult(I iface, editProfileSchema_args args) throws org.apache.thrift.TException {
        editProfileSchema_result result = new editProfileSchema_result();
        try {
          result.success = iface.editProfileSchema(args.profileSchema);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogSchemaVersionsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogSchemaVersionsByApplicationId_args> {
      public getLogSchemaVersionsByApplicationId() {
        super("getLogSchemaVersionsByApplicationId");
      }

      public getLogSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getLogSchemaVersionsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogSchemaVersionsByApplicationId_result getResult(I iface, getLogSchemaVersionsByApplicationId_args args) throws org.apache.thrift.TException {
        getLogSchemaVersionsByApplicationId_result result = new getLogSchemaVersionsByApplicationId_result();
        try {
          result.success = iface.getLogSchemaVersionsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogSchemasByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogSchemasByApplicationId_args> {
      public getLogSchemasByApplicationId() {
        super("getLogSchemasByApplicationId");
      }

      public getLogSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getLogSchemasByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogSchemasByApplicationId_result getResult(I iface, getLogSchemasByApplicationId_args args) throws org.apache.thrift.TException {
        getLogSchemasByApplicationId_result result = new getLogSchemasByApplicationId_result();
        try {
          result.success = iface.getLogSchemasByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogSchema_args> {
      public getLogSchema() {
        super("getLogSchema");
      }

      public getLogSchema_args getEmptyArgsInstance() {
        return new getLogSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogSchema_result getResult(I iface, getLogSchema_args args) throws org.apache.thrift.TException {
        getLogSchema_result result = new getLogSchema_result();
        try {
          result.success = iface.getLogSchema(args.logSchemaId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogSchemaByApplicationIdAndVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogSchemaByApplicationIdAndVersion_args> {
      public getLogSchemaByApplicationIdAndVersion() {
        super("getLogSchemaByApplicationIdAndVersion");
      }

      public getLogSchemaByApplicationIdAndVersion_args getEmptyArgsInstance() {
        return new getLogSchemaByApplicationIdAndVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogSchemaByApplicationIdAndVersion_result getResult(I iface, getLogSchemaByApplicationIdAndVersion_args args) throws org.apache.thrift.TException {
        getLogSchemaByApplicationIdAndVersion_result result = new getLogSchemaByApplicationIdAndVersion_result();
        try {
          result.success = iface.getLogSchemaByApplicationIdAndVersion(args.applicationId, args.version);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editLogSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editLogSchema_args> {
      public editLogSchema() {
        super("editLogSchema");
      }

      public editLogSchema_args getEmptyArgsInstance() {
        return new editLogSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editLogSchema_result getResult(I iface, editLogSchema_args args) throws org.apache.thrift.TException {
        editLogSchema_result result = new editLogSchema_result();
        try {
          result.success = iface.editLogSchema(args.logSchema);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEndpointGroupsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEndpointGroupsByApplicationId_args> {
      public getEndpointGroupsByApplicationId() {
        super("getEndpointGroupsByApplicationId");
      }

      public getEndpointGroupsByApplicationId_args getEmptyArgsInstance() {
        return new getEndpointGroupsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEndpointGroupsByApplicationId_result getResult(I iface, getEndpointGroupsByApplicationId_args args) throws org.apache.thrift.TException {
        getEndpointGroupsByApplicationId_result result = new getEndpointGroupsByApplicationId_result();
        try {
          result.success = iface.getEndpointGroupsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEndpointGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEndpointGroup_args> {
      public getEndpointGroup() {
        super("getEndpointGroup");
      }

      public getEndpointGroup_args getEmptyArgsInstance() {
        return new getEndpointGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEndpointGroup_result getResult(I iface, getEndpointGroup_args args) throws org.apache.thrift.TException {
        getEndpointGroup_result result = new getEndpointGroup_result();
        try {
          result.success = iface.getEndpointGroup(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editEndpointGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editEndpointGroup_args> {
      public editEndpointGroup() {
        super("editEndpointGroup");
      }

      public editEndpointGroup_args getEmptyArgsInstance() {
        return new editEndpointGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editEndpointGroup_result getResult(I iface, editEndpointGroup_args args) throws org.apache.thrift.TException {
        editEndpointGroup_result result = new editEndpointGroup_result();
        try {
          result.success = iface.editEndpointGroup(args.endpointGroup);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteEndpointGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEndpointGroup_args> {
      public deleteEndpointGroup() {
        super("deleteEndpointGroup");
      }

      public deleteEndpointGroup_args getEmptyArgsInstance() {
        return new deleteEndpointGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEndpointGroup_result getResult(I iface, deleteEndpointGroup_args args) throws org.apache.thrift.TException {
        deleteEndpointGroup_result result = new deleteEndpointGroup_result();
        try {
          iface.deleteEndpointGroup(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class removeTopicsFromEndpointGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeTopicsFromEndpointGroup_args> {
      public removeTopicsFromEndpointGroup() {
        super("removeTopicsFromEndpointGroup");
      }

      public removeTopicsFromEndpointGroup_args getEmptyArgsInstance() {
        return new removeTopicsFromEndpointGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeTopicsFromEndpointGroup_result getResult(I iface, removeTopicsFromEndpointGroup_args args) throws org.apache.thrift.TException {
        removeTopicsFromEndpointGroup_result result = new removeTopicsFromEndpointGroup_result();
        try {
          result.success = iface.removeTopicsFromEndpointGroup(args.endpointGroupId, args.topicId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class addTopicsToEndpointGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTopicsToEndpointGroup_args> {
      public addTopicsToEndpointGroup() {
        super("addTopicsToEndpointGroup");
      }

      public addTopicsToEndpointGroup_args getEmptyArgsInstance() {
        return new addTopicsToEndpointGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTopicsToEndpointGroup_result getResult(I iface, addTopicsToEndpointGroup_args args) throws org.apache.thrift.TException {
        addTopicsToEndpointGroup_result result = new addTopicsToEndpointGroup_result();
        try {
          result.success = iface.addTopicsToEndpointGroup(args.endpointGroupId, args.topicId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileFilterRecordsByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterRecordsByEndpointGroupId_args> {
      public getProfileFilterRecordsByEndpointGroupId() {
        super("getProfileFilterRecordsByEndpointGroupId");
      }

      public getProfileFilterRecordsByEndpointGroupId_args getEmptyArgsInstance() {
        return new getProfileFilterRecordsByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileFilterRecordsByEndpointGroupId_result getResult(I iface, getProfileFilterRecordsByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getProfileFilterRecordsByEndpointGroupId_result result = new getProfileFilterRecordsByEndpointGroupId_result();
        try {
          result.success = iface.getProfileFilterRecordsByEndpointGroupId(args.endpointGroupId, args.includeDeprecated);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileFilterRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterRecord_args> {
      public getProfileFilterRecord() {
        super("getProfileFilterRecord");
      }

      public getProfileFilterRecord_args getEmptyArgsInstance() {
        return new getProfileFilterRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileFilterRecord_result getResult(I iface, getProfileFilterRecord_args args) throws org.apache.thrift.TException {
        getProfileFilterRecord_result result = new getProfileFilterRecord_result();
        try {
          result.success = iface.getProfileFilterRecord(args.schemaId, args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getVacantProfileSchemasByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVacantProfileSchemasByEndpointGroupId_args> {
      public getVacantProfileSchemasByEndpointGroupId() {
        super("getVacantProfileSchemasByEndpointGroupId");
      }

      public getVacantProfileSchemasByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantProfileSchemasByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVacantProfileSchemasByEndpointGroupId_result getResult(I iface, getVacantProfileSchemasByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getVacantProfileSchemasByEndpointGroupId_result result = new getVacantProfileSchemasByEndpointGroupId_result();
        try {
          result.success = iface.getVacantProfileSchemasByEndpointGroupId(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilter_args> {
      public getProfileFilter() {
        super("getProfileFilter");
      }

      public getProfileFilter_args getEmptyArgsInstance() {
        return new getProfileFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileFilter_result getResult(I iface, getProfileFilter_args args) throws org.apache.thrift.TException {
        getProfileFilter_result result = new getProfileFilter_result();
        try {
          result.success = iface.getProfileFilter(args.profileFilterId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editProfileFilter_args> {
      public editProfileFilter() {
        super("editProfileFilter");
      }

      public editProfileFilter_args getEmptyArgsInstance() {
        return new editProfileFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editProfileFilter_result getResult(I iface, editProfileFilter_args args) throws org.apache.thrift.TException {
        editProfileFilter_result result = new editProfileFilter_result();
        try {
          result.success = iface.editProfileFilter(args.profileFilter);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class activateProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateProfileFilter_args> {
      public activateProfileFilter() {
        super("activateProfileFilter");
      }

      public activateProfileFilter_args getEmptyArgsInstance() {
        return new activateProfileFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateProfileFilter_result getResult(I iface, activateProfileFilter_args args) throws org.apache.thrift.TException {
        activateProfileFilter_result result = new activateProfileFilter_result();
        try {
          result.success = iface.activateProfileFilter(args.profileFilterId, args.activatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deactivateProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivateProfileFilter_args> {
      public deactivateProfileFilter() {
        super("deactivateProfileFilter");
      }

      public deactivateProfileFilter_args getEmptyArgsInstance() {
        return new deactivateProfileFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deactivateProfileFilter_result getResult(I iface, deactivateProfileFilter_args args) throws org.apache.thrift.TException {
        deactivateProfileFilter_result result = new deactivateProfileFilter_result();
        try {
          result.success = iface.deactivateProfileFilter(args.profileFilterId, args.deactivatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteProfileFilterRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProfileFilterRecord_args> {
      public deleteProfileFilterRecord() {
        super("deleteProfileFilterRecord");
      }

      public deleteProfileFilterRecord_args getEmptyArgsInstance() {
        return new deleteProfileFilterRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProfileFilterRecord_result getResult(I iface, deleteProfileFilterRecord_args args) throws org.apache.thrift.TException {
        deleteProfileFilterRecord_result result = new deleteProfileFilterRecord_result();
        try {
          iface.deleteProfileFilterRecord(args.schemaId, args.endpointGroupId, args.deactivatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfigurationRecordsByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigurationRecordsByEndpointGroupId_args> {
      public getConfigurationRecordsByEndpointGroupId() {
        super("getConfigurationRecordsByEndpointGroupId");
      }

      public getConfigurationRecordsByEndpointGroupId_args getEmptyArgsInstance() {
        return new getConfigurationRecordsByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfigurationRecordsByEndpointGroupId_result getResult(I iface, getConfigurationRecordsByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getConfigurationRecordsByEndpointGroupId_result result = new getConfigurationRecordsByEndpointGroupId_result();
        try {
          result.success = iface.getConfigurationRecordsByEndpointGroupId(args.endpointGroupId, args.includeDeprecated);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfigurationRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigurationRecord_args> {
      public getConfigurationRecord() {
        super("getConfigurationRecord");
      }

      public getConfigurationRecord_args getEmptyArgsInstance() {
        return new getConfigurationRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfigurationRecord_result getResult(I iface, getConfigurationRecord_args args) throws org.apache.thrift.TException {
        getConfigurationRecord_result result = new getConfigurationRecord_result();
        try {
          result.success = iface.getConfigurationRecord(args.schemaId, args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getVacantConfigurationSchemasByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVacantConfigurationSchemasByEndpointGroupId_args> {
      public getVacantConfigurationSchemasByEndpointGroupId() {
        super("getVacantConfigurationSchemasByEndpointGroupId");
      }

      public getVacantConfigurationSchemasByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantConfigurationSchemasByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVacantConfigurationSchemasByEndpointGroupId_result getResult(I iface, getVacantConfigurationSchemasByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getVacantConfigurationSchemasByEndpointGroupId_result result = new getVacantConfigurationSchemasByEndpointGroupId_result();
        try {
          result.success = iface.getVacantConfigurationSchemasByEndpointGroupId(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfiguration_args> {
      public getConfiguration() {
        super("getConfiguration");
      }

      public getConfiguration_args getEmptyArgsInstance() {
        return new getConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConfiguration_result getResult(I iface, getConfiguration_args args) throws org.apache.thrift.TException {
        getConfiguration_result result = new getConfiguration_result();
        try {
          result.success = iface.getConfiguration(args.configurationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editConfiguration_args> {
      public editConfiguration() {
        super("editConfiguration");
      }

      public editConfiguration_args getEmptyArgsInstance() {
        return new editConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editConfiguration_result getResult(I iface, editConfiguration_args args) throws org.apache.thrift.TException {
        editConfiguration_result result = new editConfiguration_result();
        try {
          result.success = iface.editConfiguration(args.configuration);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class activateConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateConfiguration_args> {
      public activateConfiguration() {
        super("activateConfiguration");
      }

      public activateConfiguration_args getEmptyArgsInstance() {
        return new activateConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateConfiguration_result getResult(I iface, activateConfiguration_args args) throws org.apache.thrift.TException {
        activateConfiguration_result result = new activateConfiguration_result();
        try {
          result.success = iface.activateConfiguration(args.configurationId, args.activatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deactivateConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivateConfiguration_args> {
      public deactivateConfiguration() {
        super("deactivateConfiguration");
      }

      public deactivateConfiguration_args getEmptyArgsInstance() {
        return new deactivateConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deactivateConfiguration_result getResult(I iface, deactivateConfiguration_args args) throws org.apache.thrift.TException {
        deactivateConfiguration_result result = new deactivateConfiguration_result();
        try {
          result.success = iface.deactivateConfiguration(args.configurationId, args.deactivatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteConfigurationRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteConfigurationRecord_args> {
      public deleteConfigurationRecord() {
        super("deleteConfigurationRecord");
      }

      public deleteConfigurationRecord_args getEmptyArgsInstance() {
        return new deleteConfigurationRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteConfigurationRecord_result getResult(I iface, deleteConfigurationRecord_args args) throws org.apache.thrift.TException {
        deleteConfigurationRecord_result result = new deleteConfigurationRecord_result();
        try {
          iface.deleteConfigurationRecord(args.schemaId, args.endpointGroupId, args.deactivatedUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editUserConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editUserConfiguration_args> {
      public editUserConfiguration() {
        super("editUserConfiguration");
      }

      public editUserConfiguration_args getEmptyArgsInstance() {
        return new editUserConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editUserConfiguration_result getResult(I iface, editUserConfiguration_args args) throws org.apache.thrift.TException {
        editUserConfiguration_result result = new editUserConfiguration_result();
        try {
          iface.editUserConfiguration(args.configuration);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getNotificationSchemaVersionsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotificationSchemaVersionsByApplicationId_args> {
      public getNotificationSchemaVersionsByApplicationId() {
        super("getNotificationSchemaVersionsByApplicationId");
      }

      public getNotificationSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getNotificationSchemaVersionsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotificationSchemaVersionsByApplicationId_result getResult(I iface, getNotificationSchemaVersionsByApplicationId_args args) throws org.apache.thrift.TException {
        getNotificationSchemaVersionsByApplicationId_result result = new getNotificationSchemaVersionsByApplicationId_result();
        try {
          result.success = iface.getNotificationSchemaVersionsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editNotificationSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editNotificationSchema_args> {
      public editNotificationSchema() {
        super("editNotificationSchema");
      }

      public editNotificationSchema_args getEmptyArgsInstance() {
        return new editNotificationSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editNotificationSchema_result getResult(I iface, editNotificationSchema_args args) throws org.apache.thrift.TException {
        editNotificationSchema_result result = new editNotificationSchema_result();
        try {
          result.success = iface.editNotificationSchema(args.notificationSchema);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getNotificationSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotificationSchema_args> {
      public getNotificationSchema() {
        super("getNotificationSchema");
      }

      public getNotificationSchema_args getEmptyArgsInstance() {
        return new getNotificationSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotificationSchema_result getResult(I iface, getNotificationSchema_args args) throws org.apache.thrift.TException {
        getNotificationSchema_result result = new getNotificationSchema_result();
        try {
          result.success = iface.getNotificationSchema(args.notificationSchemaId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getNotificationSchemasByAppId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotificationSchemasByAppId_args> {
      public getNotificationSchemasByAppId() {
        super("getNotificationSchemasByAppId");
      }

      public getNotificationSchemasByAppId_args getEmptyArgsInstance() {
        return new getNotificationSchemasByAppId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotificationSchemasByAppId_result getResult(I iface, getNotificationSchemasByAppId_args args) throws org.apache.thrift.TException {
        getNotificationSchemasByAppId_result result = new getNotificationSchemasByAppId_result();
        try {
          result.success = iface.getNotificationSchemasByAppId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUserNotificationSchemasByAppId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserNotificationSchemasByAppId_args> {
      public getUserNotificationSchemasByAppId() {
        super("getUserNotificationSchemasByAppId");
      }

      public getUserNotificationSchemasByAppId_args getEmptyArgsInstance() {
        return new getUserNotificationSchemasByAppId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserNotificationSchemasByAppId_result getResult(I iface, getUserNotificationSchemasByAppId_args args) throws org.apache.thrift.TException {
        getUserNotificationSchemasByAppId_result result = new getUserNotificationSchemasByAppId_result();
        try {
          result.success = iface.getUserNotificationSchemasByAppId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class findNotificationSchemasByAppIdAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNotificationSchemasByAppIdAndType_args> {
      public findNotificationSchemasByAppIdAndType() {
        super("findNotificationSchemasByAppIdAndType");
      }

      public findNotificationSchemasByAppIdAndType_args getEmptyArgsInstance() {
        return new findNotificationSchemasByAppIdAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findNotificationSchemasByAppIdAndType_result getResult(I iface, findNotificationSchemasByAppIdAndType_args args) throws org.apache.thrift.TException {
        findNotificationSchemasByAppIdAndType_result result = new findNotificationSchemasByAppIdAndType_result();
        try {
          result.success = iface.findNotificationSchemasByAppIdAndType(args.applicationId, args.type);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editNotification_args> {
      public editNotification() {
        super("editNotification");
      }

      public editNotification_args getEmptyArgsInstance() {
        return new editNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editNotification_result getResult(I iface, editNotification_args args) throws org.apache.thrift.TException {
        editNotification_result result = new editNotification_result();
        try {
          result.success = iface.editNotification(args.notification);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotification_args> {
      public getNotification() {
        super("getNotification");
      }

      public getNotification_args getEmptyArgsInstance() {
        return new getNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotification_result getResult(I iface, getNotification_args args) throws org.apache.thrift.TException {
        getNotification_result result = new getNotification_result();
        try {
          result.success = iface.getNotification(args.notificationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getNotificationsByTopicId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotificationsByTopicId_args> {
      public getNotificationsByTopicId() {
        super("getNotificationsByTopicId");
      }

      public getNotificationsByTopicId_args getEmptyArgsInstance() {
        return new getNotificationsByTopicId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotificationsByTopicId_result getResult(I iface, getNotificationsByTopicId_args args) throws org.apache.thrift.TException {
        getNotificationsByTopicId_result result = new getNotificationsByTopicId_result();
        try {
          result.success = iface.getNotificationsByTopicId(args.topicId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editTopic_args> {
      public editTopic() {
        super("editTopic");
      }

      public editTopic_args getEmptyArgsInstance() {
        return new editTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editTopic_result getResult(I iface, editTopic_args args) throws org.apache.thrift.TException {
        editTopic_result result = new editTopic_result();
        try {
          result.success = iface.editTopic(args.topic);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopic_args> {
      public getTopic() {
        super("getTopic");
      }

      public getTopic_args getEmptyArgsInstance() {
        return new getTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopic_result getResult(I iface, getTopic_args args) throws org.apache.thrift.TException {
        getTopic_result result = new getTopic_result();
        try {
          result.success = iface.getTopic(args.topicId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTopicByAppId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopicByAppId_args> {
      public getTopicByAppId() {
        super("getTopicByAppId");
      }

      public getTopicByAppId_args getEmptyArgsInstance() {
        return new getTopicByAppId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopicByAppId_result getResult(I iface, getTopicByAppId_args args) throws org.apache.thrift.TException {
        getTopicByAppId_result result = new getTopicByAppId_result();
        try {
          result.success = iface.getTopicByAppId(args.appId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getTopicByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopicByEndpointGroupId_args> {
      public getTopicByEndpointGroupId() {
        super("getTopicByEndpointGroupId");
      }

      public getTopicByEndpointGroupId_args getEmptyArgsInstance() {
        return new getTopicByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopicByEndpointGroupId_result getResult(I iface, getTopicByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getTopicByEndpointGroupId_result result = new getTopicByEndpointGroupId_result();
        try {
          result.success = iface.getTopicByEndpointGroupId(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getVacantTopicByEndpointGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVacantTopicByEndpointGroupId_args> {
      public getVacantTopicByEndpointGroupId() {
        super("getVacantTopicByEndpointGroupId");
      }

      public getVacantTopicByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantTopicByEndpointGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVacantTopicByEndpointGroupId_result getResult(I iface, getVacantTopicByEndpointGroupId_args args) throws org.apache.thrift.TException {
        getVacantTopicByEndpointGroupId_result result = new getVacantTopicByEndpointGroupId_result();
        try {
          result.success = iface.getVacantTopicByEndpointGroupId(args.endpointGroupId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteTopicById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTopicById_args> {
      public deleteTopicById() {
        super("deleteTopicById");
      }

      public deleteTopicById_args getEmptyArgsInstance() {
        return new deleteTopicById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTopicById_result getResult(I iface, deleteTopicById_args args) throws org.apache.thrift.TException {
        deleteTopicById_result result = new deleteTopicById_result();
        try {
          iface.deleteTopicById(args.topicId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUnicastNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUnicastNotification_args> {
      public getUnicastNotification() {
        super("getUnicastNotification");
      }

      public getUnicastNotification_args getEmptyArgsInstance() {
        return new getUnicastNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUnicastNotification_result getResult(I iface, getUnicastNotification_args args) throws org.apache.thrift.TException {
        getUnicastNotification_result result = new getUnicastNotification_result();
        try {
          result.success = iface.getUnicastNotification(args.notificationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editUnicastNotification<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editUnicastNotification_args> {
      public editUnicastNotification() {
        super("editUnicastNotification");
      }

      public editUnicastNotification_args getEmptyArgsInstance() {
        return new editUnicastNotification_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editUnicastNotification_result getResult(I iface, editUnicastNotification_args args) throws org.apache.thrift.TException {
        editUnicastNotification_result result = new editUnicastNotification_result();
        try {
          result.success = iface.editUnicastNotification(args.notification);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUnicastNotificationsByKeyHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUnicastNotificationsByKeyHash_args> {
      public getUnicastNotificationsByKeyHash() {
        super("getUnicastNotificationsByKeyHash");
      }

      public getUnicastNotificationsByKeyHash_args getEmptyArgsInstance() {
        return new getUnicastNotificationsByKeyHash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUnicastNotificationsByKeyHash_result getResult(I iface, getUnicastNotificationsByKeyHash_args args) throws org.apache.thrift.TException {
        getUnicastNotificationsByKeyHash_result result = new getUnicastNotificationsByKeyHash_result();
        try {
          result.success = iface.getUnicastNotificationsByKeyHash(args.keyhash);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class addSdkProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSdkProfile_args> {
      public addSdkProfile() {
        super("addSdkProfile");
      }

      public addSdkProfile_args getEmptyArgsInstance() {
        return new addSdkProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSdkProfile_result getResult(I iface, addSdkProfile_args args) throws org.apache.thrift.TException {
        addSdkProfile_result result = new addSdkProfile_result();
        try {
          iface.addSdkProfile(args.sdkProfile);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteSdkProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSdkProfile_args> {
      public deleteSdkProfile() {
        super("deleteSdkProfile");
      }

      public deleteSdkProfile_args getEmptyArgsInstance() {
        return new deleteSdkProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSdkProfile_result getResult(I iface, deleteSdkProfile_args args) throws org.apache.thrift.TException {
        deleteSdkProfile_result result = new deleteSdkProfile_result();
        try {
          iface.deleteSdkProfile(args.sdkProfileId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getSdkProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSdkProfile_args> {
      public getSdkProfile() {
        super("getSdkProfile");
      }

      public getSdkProfile_args getEmptyArgsInstance() {
        return new getSdkProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSdkProfile_result getResult(I iface, getSdkProfile_args args) throws org.apache.thrift.TException {
        getSdkProfile_result result = new getSdkProfile_result();
        try {
          result.success = iface.getSdkProfile(args.sdkProfileId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getSdkProfilesByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSdkProfilesByApplicationId_args> {
      public getSdkProfilesByApplicationId() {
        super("getSdkProfilesByApplicationId");
      }

      public getSdkProfilesByApplicationId_args getEmptyArgsInstance() {
        return new getSdkProfilesByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSdkProfilesByApplicationId_result getResult(I iface, getSdkProfilesByApplicationId_args args) throws org.apache.thrift.TException {
        getSdkProfilesByApplicationId_result result = new getSdkProfilesByApplicationId_result();
        try {
          result.success = iface.getSdkProfilesByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class generateSdk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateSdk_args> {
      public generateSdk() {
        super("generateSdk");
      }

      public generateSdk_args getEmptyArgsInstance() {
        return new generateSdk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateSdk_result getResult(I iface, generateSdk_args args) throws org.apache.thrift.TException {
        generateSdk_result result = new generateSdk_result();
        try {
          result.success = iface.generateSdk(args.sdkProfile, args.targetPlatform);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class isSdkProfileUsed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isSdkProfileUsed_args> {
      public isSdkProfileUsed() {
        super("isSdkProfileUsed");
      }

      public isSdkProfileUsed_args getEmptyArgsInstance() {
        return new isSdkProfileUsed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isSdkProfileUsed_result getResult(I iface, isSdkProfileUsed_args args) throws org.apache.thrift.TException {
        isSdkProfileUsed_result result = new isSdkProfileUsed_result();
        try {
          result.success = iface.isSdkProfileUsed(args.sdkToken);
          result.setSuccessIsSet(true);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editEventClassFamily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editEventClassFamily_args> {
      public editEventClassFamily() {
        super("editEventClassFamily");
      }

      public editEventClassFamily_args getEmptyArgsInstance() {
        return new editEventClassFamily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editEventClassFamily_result getResult(I iface, editEventClassFamily_args args) throws org.apache.thrift.TException {
        editEventClassFamily_result result = new editEventClassFamily_result();
        try {
          result.success = iface.editEventClassFamily(args.eventClassFamily);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEventClassFamiliesByTenantId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventClassFamiliesByTenantId_args> {
      public getEventClassFamiliesByTenantId() {
        super("getEventClassFamiliesByTenantId");
      }

      public getEventClassFamiliesByTenantId_args getEmptyArgsInstance() {
        return new getEventClassFamiliesByTenantId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventClassFamiliesByTenantId_result getResult(I iface, getEventClassFamiliesByTenantId_args args) throws org.apache.thrift.TException {
        getEventClassFamiliesByTenantId_result result = new getEventClassFamiliesByTenantId_result();
        try {
          result.success = iface.getEventClassFamiliesByTenantId(args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEventClassFamily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventClassFamily_args> {
      public getEventClassFamily() {
        super("getEventClassFamily");
      }

      public getEventClassFamily_args getEmptyArgsInstance() {
        return new getEventClassFamily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventClassFamily_result getResult(I iface, getEventClassFamily_args args) throws org.apache.thrift.TException {
        getEventClassFamily_result result = new getEventClassFamily_result();
        try {
          result.success = iface.getEventClassFamily(args.eventClassFamilyId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class addEventClassFamilySchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEventClassFamilySchema_args> {
      public addEventClassFamilySchema() {
        super("addEventClassFamilySchema");
      }

      public addEventClassFamilySchema_args getEmptyArgsInstance() {
        return new addEventClassFamilySchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addEventClassFamilySchema_result getResult(I iface, addEventClassFamilySchema_args args) throws org.apache.thrift.TException {
        addEventClassFamilySchema_result result = new addEventClassFamilySchema_result();
        try {
          iface.addEventClassFamilySchema(args.eventClassFamilyId, args.eventClassFamilySchema, args.createdUsername);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEventClassesByFamilyIdVersionAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventClassesByFamilyIdVersionAndType_args> {
      public getEventClassesByFamilyIdVersionAndType() {
        super("getEventClassesByFamilyIdVersionAndType");
      }

      public getEventClassesByFamilyIdVersionAndType_args getEmptyArgsInstance() {
        return new getEventClassesByFamilyIdVersionAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventClassesByFamilyIdVersionAndType_result getResult(I iface, getEventClassesByFamilyIdVersionAndType_args args) throws org.apache.thrift.TException {
        getEventClassesByFamilyIdVersionAndType_result result = new getEventClassesByFamilyIdVersionAndType_result();
        try {
          result.success = iface.getEventClassesByFamilyIdVersionAndType(args.ecfId, args.version, args.type);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editApplicationEventFamilyMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editApplicationEventFamilyMap_args> {
      public editApplicationEventFamilyMap() {
        super("editApplicationEventFamilyMap");
      }

      public editApplicationEventFamilyMap_args getEmptyArgsInstance() {
        return new editApplicationEventFamilyMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editApplicationEventFamilyMap_result getResult(I iface, editApplicationEventFamilyMap_args args) throws org.apache.thrift.TException {
        editApplicationEventFamilyMap_result result = new editApplicationEventFamilyMap_result();
        try {
          result.success = iface.editApplicationEventFamilyMap(args.applicationEventFamilyMap);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getApplicationEventFamilyMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationEventFamilyMap_args> {
      public getApplicationEventFamilyMap() {
        super("getApplicationEventFamilyMap");
      }

      public getApplicationEventFamilyMap_args getEmptyArgsInstance() {
        return new getApplicationEventFamilyMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationEventFamilyMap_result getResult(I iface, getApplicationEventFamilyMap_args args) throws org.apache.thrift.TException {
        getApplicationEventFamilyMap_result result = new getApplicationEventFamilyMap_result();
        try {
          result.success = iface.getApplicationEventFamilyMap(args.applicationEventFamilyMapId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getApplicationEventFamilyMapsByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationEventFamilyMapsByApplicationId_args> {
      public getApplicationEventFamilyMapsByApplicationId() {
        super("getApplicationEventFamilyMapsByApplicationId");
      }

      public getApplicationEventFamilyMapsByApplicationId_args getEmptyArgsInstance() {
        return new getApplicationEventFamilyMapsByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationEventFamilyMapsByApplicationId_result getResult(I iface, getApplicationEventFamilyMapsByApplicationId_args args) throws org.apache.thrift.TException {
        getApplicationEventFamilyMapsByApplicationId_result result = new getApplicationEventFamilyMapsByApplicationId_result();
        try {
          result.success = iface.getApplicationEventFamilyMapsByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getVacantEventClassFamiliesByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVacantEventClassFamiliesByApplicationId_args> {
      public getVacantEventClassFamiliesByApplicationId() {
        super("getVacantEventClassFamiliesByApplicationId");
      }

      public getVacantEventClassFamiliesByApplicationId_args getEmptyArgsInstance() {
        return new getVacantEventClassFamiliesByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVacantEventClassFamiliesByApplicationId_result getResult(I iface, getVacantEventClassFamiliesByApplicationId_args args) throws org.apache.thrift.TException {
        getVacantEventClassFamiliesByApplicationId_result result = new getVacantEventClassFamiliesByApplicationId_result();
        try {
          result.success = iface.getVacantEventClassFamiliesByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEventClassFamiliesByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventClassFamiliesByApplicationId_args> {
      public getEventClassFamiliesByApplicationId() {
        super("getEventClassFamiliesByApplicationId");
      }

      public getEventClassFamiliesByApplicationId_args getEmptyArgsInstance() {
        return new getEventClassFamiliesByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventClassFamiliesByApplicationId_result getResult(I iface, getEventClassFamiliesByApplicationId_args args) throws org.apache.thrift.TException {
        getEventClassFamiliesByApplicationId_result result = new getEventClassFamiliesByApplicationId_result();
        try {
          result.success = iface.getEventClassFamiliesByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEndpointUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEndpointUsers_args> {
      public getEndpointUsers() {
        super("getEndpointUsers");
      }

      public getEndpointUsers_args getEmptyArgsInstance() {
        return new getEndpointUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEndpointUsers_result getResult(I iface, getEndpointUsers_args args) throws org.apache.thrift.TException {
        getEndpointUsers_result result = new getEndpointUsers_result();
        try {
          result.success = iface.getEndpointUsers();
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getEndpointUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEndpointUser_args> {
      public getEndpointUser() {
        super("getEndpointUser");
      }

      public getEndpointUser_args getEmptyArgsInstance() {
        return new getEndpointUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEndpointUser_result getResult(I iface, getEndpointUser_args args) throws org.apache.thrift.TException {
        getEndpointUser_result result = new getEndpointUser_result();
        try {
          result.success = iface.getEndpointUser(args.endpointUserId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editEndpointUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editEndpointUser_args> {
      public editEndpointUser() {
        super("editEndpointUser");
      }

      public editEndpointUser_args getEmptyArgsInstance() {
        return new editEndpointUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editEndpointUser_result getResult(I iface, editEndpointUser_args args) throws org.apache.thrift.TException {
        editEndpointUser_result result = new editEndpointUser_result();
        try {
          result.success = iface.editEndpointUser(args.endpointUser);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteEndpointUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEndpointUser_args> {
      public deleteEndpointUser() {
        super("deleteEndpointUser");
      }

      public deleteEndpointUser_args getEmptyArgsInstance() {
        return new deleteEndpointUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEndpointUser_result getResult(I iface, deleteEndpointUser_args args) throws org.apache.thrift.TException {
        deleteEndpointUser_result result = new deleteEndpointUser_result();
        try {
          iface.deleteEndpointUser(args.endpointUserId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class generateEndpointUserAccessToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateEndpointUserAccessToken_args> {
      public generateEndpointUserAccessToken() {
        super("generateEndpointUserAccessToken");
      }

      public generateEndpointUserAccessToken_args getEmptyArgsInstance() {
        return new generateEndpointUserAccessToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateEndpointUserAccessToken_result getResult(I iface, generateEndpointUserAccessToken_args args) throws org.apache.thrift.TException {
        generateEndpointUserAccessToken_result result = new generateEndpointUserAccessToken_result();
        try {
          result.success = iface.generateEndpointUserAccessToken(args.externalUid, args.tenantId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogAppendersByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogAppendersByApplicationId_args> {
      public getLogAppendersByApplicationId() {
        super("getLogAppendersByApplicationId");
      }

      public getLogAppendersByApplicationId_args getEmptyArgsInstance() {
        return new getLogAppendersByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogAppendersByApplicationId_result getResult(I iface, getLogAppendersByApplicationId_args args) throws org.apache.thrift.TException {
        getLogAppendersByApplicationId_result result = new getLogAppendersByApplicationId_result();
        try {
          result.success = iface.getLogAppendersByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getLogAppender<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogAppender_args> {
      public getLogAppender() {
        super("getLogAppender");
      }

      public getLogAppender_args getEmptyArgsInstance() {
        return new getLogAppender_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLogAppender_result getResult(I iface, getLogAppender_args args) throws org.apache.thrift.TException {
        getLogAppender_result result = new getLogAppender_result();
        try {
          result.success = iface.getLogAppender(args.logAppenderId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editLogAppender<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editLogAppender_args> {
      public editLogAppender() {
        super("editLogAppender");
      }

      public editLogAppender_args getEmptyArgsInstance() {
        return new editLogAppender_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editLogAppender_result getResult(I iface, editLogAppender_args args) throws org.apache.thrift.TException {
        editLogAppender_result result = new editLogAppender_result();
        try {
          result.success = iface.editLogAppender(args.logAppender);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteLogAppender<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLogAppender_args> {
      public deleteLogAppender() {
        super("deleteLogAppender");
      }

      public deleteLogAppender_args getEmptyArgsInstance() {
        return new deleteLogAppender_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLogAppender_result getResult(I iface, deleteLogAppender_args args) throws org.apache.thrift.TException {
        deleteLogAppender_result result = new deleteLogAppender_result();
        try {
          iface.deleteLogAppender(args.logAppenderId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class generateRecordStructureLibrary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateRecordStructureLibrary_args> {
      public generateRecordStructureLibrary() {
        super("generateRecordStructureLibrary");
      }

      public generateRecordStructureLibrary_args getEmptyArgsInstance() {
        return new generateRecordStructureLibrary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateRecordStructureLibrary_result getResult(I iface, generateRecordStructureLibrary_args args) throws org.apache.thrift.TException {
        generateRecordStructureLibrary_result result = new generateRecordStructureLibrary_result();
        try {
          result.success = iface.generateRecordStructureLibrary(args.applicationId, args.logSchemaVersion);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getRecordStructureSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordStructureSchema_args> {
      public getRecordStructureSchema() {
        super("getRecordStructureSchema");
      }

      public getRecordStructureSchema_args getEmptyArgsInstance() {
        return new getRecordStructureSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordStructureSchema_result getResult(I iface, getRecordStructureSchema_args args) throws org.apache.thrift.TException {
        getRecordStructureSchema_result result = new getRecordStructureSchema_result();
        try {
          result.success = iface.getRecordStructureSchema(args.applicationId, args.logSchemaVersion);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getRecordStructureData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordStructureData_args> {
      public getRecordStructureData() {
        super("getRecordStructureData");
      }

      public getRecordStructureData_args getEmptyArgsInstance() {
        return new getRecordStructureData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordStructureData_result getResult(I iface, getRecordStructureData_args args) throws org.apache.thrift.TException {
        getRecordStructureData_result result = new getRecordStructureData_result();
        try {
          result.success = iface.getRecordStructureData(args.applicationId, args.schemaVersion, args.recordFile);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUserVerifiersByApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserVerifiersByApplicationId_args> {
      public getUserVerifiersByApplicationId() {
        super("getUserVerifiersByApplicationId");
      }

      public getUserVerifiersByApplicationId_args getEmptyArgsInstance() {
        return new getUserVerifiersByApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserVerifiersByApplicationId_result getResult(I iface, getUserVerifiersByApplicationId_args args) throws org.apache.thrift.TException {
        getUserVerifiersByApplicationId_result result = new getUserVerifiersByApplicationId_result();
        try {
          result.success = iface.getUserVerifiersByApplicationId(args.applicationId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class getUserVerifier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserVerifier_args> {
      public getUserVerifier() {
        super("getUserVerifier");
      }

      public getUserVerifier_args getEmptyArgsInstance() {
        return new getUserVerifier_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserVerifier_result getResult(I iface, getUserVerifier_args args) throws org.apache.thrift.TException {
        getUserVerifier_result result = new getUserVerifier_result();
        try {
          result.success = iface.getUserVerifier(args.userVerifierId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class editUserVerifier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editUserVerifier_args> {
      public editUserVerifier() {
        super("editUserVerifier");
      }

      public editUserVerifier_args getEmptyArgsInstance() {
        return new editUserVerifier_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editUserVerifier_result getResult(I iface, editUserVerifier_args args) throws org.apache.thrift.TException {
        editUserVerifier_result result = new editUserVerifier_result();
        try {
          result.success = iface.editUserVerifier(args.userVerifier);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

    public static class deleteUserVerifier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserVerifier_args> {
      public deleteUserVerifier() {
        super("deleteUserVerifier");
      }

      public deleteUserVerifier_args getEmptyArgsInstance() {
        return new deleteUserVerifier_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserVerifier_result getResult(I iface, deleteUserVerifier_args args) throws org.apache.thrift.TException {
        deleteUserVerifier_result result = new deleteUserVerifier_result();
        try {
          iface.deleteUserVerifier(args.userVerifierId);
        } catch (ControlThriftException ControlException) {
          result.ControlException = ControlException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.kaaproject.kaa.server.common.thrift.gen.cli.CliThriftService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTenants", new getTenants());
      processMap.put("getTenant", new getTenant());
      processMap.put("editTenant", new editTenant());
      processMap.put("deleteTenant", new deleteTenant());
      processMap.put("getUsers", new getUsers());
      processMap.put("getTenantUsers", new getTenantUsers());
      processMap.put("getUser", new getUser());
      processMap.put("getUserByExternalUid", new getUserByExternalUid());
      processMap.put("editUser", new editUser());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("getTenantAdmins", new getTenantAdmins());
      processMap.put("getTenantAdmin", new getTenantAdmin());
      processMap.put("editTenantAdmin", new editTenantAdmin());
      processMap.put("deleteTenantAdmin", new deleteTenantAdmin());
      processMap.put("getApplicationsByTenantId", new getApplicationsByTenantId());
      processMap.put("getApplication", new getApplication());
      processMap.put("getApplicationByApplicationToken", new getApplicationByApplicationToken());
      processMap.put("editApplication", new editApplication());
      processMap.put("deleteApplication", new deleteApplication());
      processMap.put("getConfigurationSchemaVersionsByApplicationId", new getConfigurationSchemaVersionsByApplicationId());
      processMap.put("getConfigurationSchemasByApplicationId", new getConfigurationSchemasByApplicationId());
      processMap.put("getConfigurationSchema", new getConfigurationSchema());
      processMap.put("editConfigurationSchema", new editConfigurationSchema());
      processMap.put("getProfileSchemaVersionsByApplicationId", new getProfileSchemaVersionsByApplicationId());
      processMap.put("getProfileSchemasByApplicationId", new getProfileSchemasByApplicationId());
      processMap.put("getProfileSchema", new getProfileSchema());
      processMap.put("editProfileSchema", new editProfileSchema());
      processMap.put("getLogSchemaVersionsByApplicationId", new getLogSchemaVersionsByApplicationId());
      processMap.put("getLogSchemasByApplicationId", new getLogSchemasByApplicationId());
      processMap.put("getLogSchema", new getLogSchema());
      processMap.put("getLogSchemaByApplicationIdAndVersion", new getLogSchemaByApplicationIdAndVersion());
      processMap.put("editLogSchema", new editLogSchema());
      processMap.put("getEndpointGroupsByApplicationId", new getEndpointGroupsByApplicationId());
      processMap.put("getEndpointGroup", new getEndpointGroup());
      processMap.put("editEndpointGroup", new editEndpointGroup());
      processMap.put("deleteEndpointGroup", new deleteEndpointGroup());
      processMap.put("removeTopicsFromEndpointGroup", new removeTopicsFromEndpointGroup());
      processMap.put("addTopicsToEndpointGroup", new addTopicsToEndpointGroup());
      processMap.put("getProfileFilterRecordsByEndpointGroupId", new getProfileFilterRecordsByEndpointGroupId());
      processMap.put("getProfileFilterRecord", new getProfileFilterRecord());
      processMap.put("getVacantProfileSchemasByEndpointGroupId", new getVacantProfileSchemasByEndpointGroupId());
      processMap.put("getProfileFilter", new getProfileFilter());
      processMap.put("editProfileFilter", new editProfileFilter());
      processMap.put("activateProfileFilter", new activateProfileFilter());
      processMap.put("deactivateProfileFilter", new deactivateProfileFilter());
      processMap.put("deleteProfileFilterRecord", new deleteProfileFilterRecord());
      processMap.put("getConfigurationRecordsByEndpointGroupId", new getConfigurationRecordsByEndpointGroupId());
      processMap.put("getConfigurationRecord", new getConfigurationRecord());
      processMap.put("getVacantConfigurationSchemasByEndpointGroupId", new getVacantConfigurationSchemasByEndpointGroupId());
      processMap.put("getConfiguration", new getConfiguration());
      processMap.put("editConfiguration", new editConfiguration());
      processMap.put("activateConfiguration", new activateConfiguration());
      processMap.put("deactivateConfiguration", new deactivateConfiguration());
      processMap.put("deleteConfigurationRecord", new deleteConfigurationRecord());
      processMap.put("editUserConfiguration", new editUserConfiguration());
      processMap.put("getNotificationSchemaVersionsByApplicationId", new getNotificationSchemaVersionsByApplicationId());
      processMap.put("editNotificationSchema", new editNotificationSchema());
      processMap.put("getNotificationSchema", new getNotificationSchema());
      processMap.put("getNotificationSchemasByAppId", new getNotificationSchemasByAppId());
      processMap.put("getUserNotificationSchemasByAppId", new getUserNotificationSchemasByAppId());
      processMap.put("findNotificationSchemasByAppIdAndType", new findNotificationSchemasByAppIdAndType());
      processMap.put("editNotification", new editNotification());
      processMap.put("getNotification", new getNotification());
      processMap.put("getNotificationsByTopicId", new getNotificationsByTopicId());
      processMap.put("editTopic", new editTopic());
      processMap.put("getTopic", new getTopic());
      processMap.put("getTopicByAppId", new getTopicByAppId());
      processMap.put("getTopicByEndpointGroupId", new getTopicByEndpointGroupId());
      processMap.put("getVacantTopicByEndpointGroupId", new getVacantTopicByEndpointGroupId());
      processMap.put("deleteTopicById", new deleteTopicById());
      processMap.put("getUnicastNotification", new getUnicastNotification());
      processMap.put("editUnicastNotification", new editUnicastNotification());
      processMap.put("getUnicastNotificationsByKeyHash", new getUnicastNotificationsByKeyHash());
      processMap.put("addSdkProfile", new addSdkProfile());
      processMap.put("deleteSdkProfile", new deleteSdkProfile());
      processMap.put("getSdkProfile", new getSdkProfile());
      processMap.put("getSdkProfilesByApplicationId", new getSdkProfilesByApplicationId());
      processMap.put("generateSdk", new generateSdk());
      processMap.put("isSdkProfileUsed", new isSdkProfileUsed());
      processMap.put("editEventClassFamily", new editEventClassFamily());
      processMap.put("getEventClassFamiliesByTenantId", new getEventClassFamiliesByTenantId());
      processMap.put("getEventClassFamily", new getEventClassFamily());
      processMap.put("addEventClassFamilySchema", new addEventClassFamilySchema());
      processMap.put("getEventClassesByFamilyIdVersionAndType", new getEventClassesByFamilyIdVersionAndType());
      processMap.put("editApplicationEventFamilyMap", new editApplicationEventFamilyMap());
      processMap.put("getApplicationEventFamilyMap", new getApplicationEventFamilyMap());
      processMap.put("getApplicationEventFamilyMapsByApplicationId", new getApplicationEventFamilyMapsByApplicationId());
      processMap.put("getVacantEventClassFamiliesByApplicationId", new getVacantEventClassFamiliesByApplicationId());
      processMap.put("getEventClassFamiliesByApplicationId", new getEventClassFamiliesByApplicationId());
      processMap.put("getEndpointUsers", new getEndpointUsers());
      processMap.put("getEndpointUser", new getEndpointUser());
      processMap.put("editEndpointUser", new editEndpointUser());
      processMap.put("deleteEndpointUser", new deleteEndpointUser());
      processMap.put("generateEndpointUserAccessToken", new generateEndpointUserAccessToken());
      processMap.put("getLogAppendersByApplicationId", new getLogAppendersByApplicationId());
      processMap.put("getLogAppender", new getLogAppender());
      processMap.put("editLogAppender", new editLogAppender());
      processMap.put("deleteLogAppender", new deleteLogAppender());
      processMap.put("generateRecordStructureLibrary", new generateRecordStructureLibrary());
      processMap.put("getRecordStructureSchema", new getRecordStructureSchema());
      processMap.put("getRecordStructureData", new getRecordStructureData());
      processMap.put("getUserVerifiersByApplicationId", new getUserVerifiersByApplicationId());
      processMap.put("getUserVerifier", new getUserVerifier());
      processMap.put("editUserVerifier", new editUserVerifier());
      processMap.put("deleteUserVerifier", new deleteUserVerifier());
      return processMap;
    }

    public static class getTenants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTenants_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getTenants() {
        super("getTenants");
      }

      public getTenants_args getEmptyArgsInstance() {
        return new getTenants_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getTenants_result result = new getTenants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTenants_result result = new getTenants_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTenants_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getTenants(resultHandler);
      }
    }

    public static class getTenant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTenant_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getTenant() {
        super("getTenant");
      }

      public getTenant_args getEmptyArgsInstance() {
        return new getTenant_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getTenant_result result = new getTenant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTenant_result result = new getTenant_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTenant_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getTenant(args.tenantId,resultHandler);
      }
    }

    public static class editTenant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editTenant_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editTenant() {
        super("editTenant");
      }

      public editTenant_args getEmptyArgsInstance() {
        return new editTenant_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editTenant_result result = new editTenant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editTenant_result result = new editTenant_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editTenant_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editTenant(args.tenant,resultHandler);
      }
    }

    public static class deleteTenant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTenant_args, Void> {
      public deleteTenant() {
        super("deleteTenant");
      }

      public deleteTenant_args getEmptyArgsInstance() {
        return new deleteTenant_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteTenant_result result = new deleteTenant_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTenant_result result = new deleteTenant_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTenant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteTenant(args.tenantId,resultHandler);
      }
    }

    public static class getUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUsers_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getUsers() {
        super("getUsers");
      }

      public getUsers_args getEmptyArgsInstance() {
        return new getUsers_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getUsers_result result = new getUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUsers_result result = new getUsers_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUsers_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getUsers(resultHandler);
      }
    }

    public static class getTenantUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTenantUsers_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getTenantUsers() {
        super("getTenantUsers");
      }

      public getTenantUsers_args getEmptyArgsInstance() {
        return new getTenantUsers_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getTenantUsers_result result = new getTenantUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTenantUsers_result result = new getTenantUsers_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTenantUsers_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getTenantUsers(args.tenantId,resultHandler);
      }
    }

    public static class getUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getUser() {
        super("getUser");
      }

      public getUser_args getEmptyArgsInstance() {
        return new getUser_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getUser_result result = new getUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUser_result result = new getUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUser_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getUser(args.userId,resultHandler);
      }
    }

    public static class getUserByExternalUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserByExternalUid_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getUserByExternalUid() {
        super("getUserByExternalUid");
      }

      public getUserByExternalUid_args getEmptyArgsInstance() {
        return new getUserByExternalUid_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getUserByExternalUid_result result = new getUserByExternalUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserByExternalUid_result result = new getUserByExternalUid_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserByExternalUid_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getUserByExternalUid(args.uid,resultHandler);
      }
    }

    public static class editUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editUser_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editUser() {
        super("editUser");
      }

      public editUser_args getEmptyArgsInstance() {
        return new editUser_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editUser_result result = new editUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editUser_result result = new editUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editUser_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editUser(args.user,resultHandler);
      }
    }

    public static class deleteUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUser_args, Void> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteUser_result result = new deleteUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUser_result result = new deleteUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteUser(args.userId,resultHandler);
      }
    }

    public static class getTenantAdmins<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTenantAdmins_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getTenantAdmins() {
        super("getTenantAdmins");
      }

      public getTenantAdmins_args getEmptyArgsInstance() {
        return new getTenantAdmins_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getTenantAdmins_result result = new getTenantAdmins_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTenantAdmins_result result = new getTenantAdmins_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTenantAdmins_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getTenantAdmins(resultHandler);
      }
    }

    public static class getTenantAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTenantAdmin_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getTenantAdmin() {
        super("getTenantAdmin");
      }

      public getTenantAdmin_args getEmptyArgsInstance() {
        return new getTenantAdmin_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getTenantAdmin_result result = new getTenantAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTenantAdmin_result result = new getTenantAdmin_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTenantAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getTenantAdmin(args.tenantId,resultHandler);
      }
    }

    public static class editTenantAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editTenantAdmin_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editTenantAdmin() {
        super("editTenantAdmin");
      }

      public editTenantAdmin_args getEmptyArgsInstance() {
        return new editTenantAdmin_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editTenantAdmin_result result = new editTenantAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editTenantAdmin_result result = new editTenantAdmin_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editTenantAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editTenantAdmin(args.tenantAdmin,resultHandler);
      }
    }

    public static class deleteTenantAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTenantAdmin_args, Void> {
      public deleteTenantAdmin() {
        super("deleteTenantAdmin");
      }

      public deleteTenantAdmin_args getEmptyArgsInstance() {
        return new deleteTenantAdmin_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteTenantAdmin_result result = new deleteTenantAdmin_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTenantAdmin_result result = new deleteTenantAdmin_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTenantAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteTenantAdmin(args.tenantId,resultHandler);
      }
    }

    public static class getApplicationsByTenantId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationsByTenantId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getApplicationsByTenantId() {
        super("getApplicationsByTenantId");
      }

      public getApplicationsByTenantId_args getEmptyArgsInstance() {
        return new getApplicationsByTenantId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getApplicationsByTenantId_result result = new getApplicationsByTenantId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationsByTenantId_result result = new getApplicationsByTenantId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationsByTenantId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getApplicationsByTenantId(args.tenantId,resultHandler);
      }
    }

    public static class getApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplication_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getApplication() {
        super("getApplication");
      }

      public getApplication_args getEmptyArgsInstance() {
        return new getApplication_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getApplication_result result = new getApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplication_result result = new getApplication_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplication_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getApplication(args.applicationId,resultHandler);
      }
    }

    public static class getApplicationByApplicationToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationByApplicationToken_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getApplicationByApplicationToken() {
        super("getApplicationByApplicationToken");
      }

      public getApplicationByApplicationToken_args getEmptyArgsInstance() {
        return new getApplicationByApplicationToken_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getApplicationByApplicationToken_result result = new getApplicationByApplicationToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationByApplicationToken_result result = new getApplicationByApplicationToken_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationByApplicationToken_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getApplicationByApplicationToken(args.applicationToken,resultHandler);
      }
    }

    public static class editApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editApplication_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editApplication() {
        super("editApplication");
      }

      public editApplication_args getEmptyArgsInstance() {
        return new editApplication_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editApplication_result result = new editApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editApplication_result result = new editApplication_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editApplication_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editApplication(args.application,resultHandler);
      }
    }

    public static class deleteApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteApplication_args, Void> {
      public deleteApplication() {
        super("deleteApplication");
      }

      public deleteApplication_args getEmptyArgsInstance() {
        return new deleteApplication_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteApplication_result result = new deleteApplication_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteApplication_result result = new deleteApplication_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteApplication_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteApplication(args.applicationId,resultHandler);
      }
    }

    public static class getConfigurationSchemaVersionsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigurationSchemaVersionsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getConfigurationSchemaVersionsByApplicationId() {
        super("getConfigurationSchemaVersionsByApplicationId");
      }

      public getConfigurationSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getConfigurationSchemaVersionsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getConfigurationSchemaVersionsByApplicationId_result result = new getConfigurationSchemaVersionsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfigurationSchemaVersionsByApplicationId_result result = new getConfigurationSchemaVersionsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfigurationSchemaVersionsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getConfigurationSchemaVersionsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getConfigurationSchemasByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigurationSchemasByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getConfigurationSchemasByApplicationId() {
        super("getConfigurationSchemasByApplicationId");
      }

      public getConfigurationSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getConfigurationSchemasByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getConfigurationSchemasByApplicationId_result result = new getConfigurationSchemasByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfigurationSchemasByApplicationId_result result = new getConfigurationSchemasByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfigurationSchemasByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getConfigurationSchemasByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getConfigurationSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigurationSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getConfigurationSchema() {
        super("getConfigurationSchema");
      }

      public getConfigurationSchema_args getEmptyArgsInstance() {
        return new getConfigurationSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getConfigurationSchema_result result = new getConfigurationSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfigurationSchema_result result = new getConfigurationSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfigurationSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getConfigurationSchema(args.configurationSchemaId,resultHandler);
      }
    }

    public static class editConfigurationSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editConfigurationSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editConfigurationSchema() {
        super("editConfigurationSchema");
      }

      public editConfigurationSchema_args getEmptyArgsInstance() {
        return new editConfigurationSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editConfigurationSchema_result result = new editConfigurationSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editConfigurationSchema_result result = new editConfigurationSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editConfigurationSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editConfigurationSchema(args.configurationSchema,resultHandler);
      }
    }

    public static class getProfileSchemaVersionsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileSchemaVersionsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getProfileSchemaVersionsByApplicationId() {
        super("getProfileSchemaVersionsByApplicationId");
      }

      public getProfileSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getProfileSchemaVersionsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getProfileSchemaVersionsByApplicationId_result result = new getProfileSchemaVersionsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileSchemaVersionsByApplicationId_result result = new getProfileSchemaVersionsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileSchemaVersionsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getProfileSchemaVersionsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getProfileSchemasByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileSchemasByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getProfileSchemasByApplicationId() {
        super("getProfileSchemasByApplicationId");
      }

      public getProfileSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getProfileSchemasByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getProfileSchemasByApplicationId_result result = new getProfileSchemasByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileSchemasByApplicationId_result result = new getProfileSchemasByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileSchemasByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getProfileSchemasByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getProfileSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getProfileSchema() {
        super("getProfileSchema");
      }

      public getProfileSchema_args getEmptyArgsInstance() {
        return new getProfileSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getProfileSchema_result result = new getProfileSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileSchema_result result = new getProfileSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getProfileSchema(args.profileSchemaId,resultHandler);
      }
    }

    public static class editProfileSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editProfileSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editProfileSchema() {
        super("editProfileSchema");
      }

      public editProfileSchema_args getEmptyArgsInstance() {
        return new editProfileSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editProfileSchema_result result = new editProfileSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editProfileSchema_result result = new editProfileSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editProfileSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editProfileSchema(args.profileSchema,resultHandler);
      }
    }

    public static class getLogSchemaVersionsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogSchemaVersionsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getLogSchemaVersionsByApplicationId() {
        super("getLogSchemaVersionsByApplicationId");
      }

      public getLogSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getLogSchemaVersionsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getLogSchemaVersionsByApplicationId_result result = new getLogSchemaVersionsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogSchemaVersionsByApplicationId_result result = new getLogSchemaVersionsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogSchemaVersionsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getLogSchemaVersionsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getLogSchemasByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogSchemasByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getLogSchemasByApplicationId() {
        super("getLogSchemasByApplicationId");
      }

      public getLogSchemasByApplicationId_args getEmptyArgsInstance() {
        return new getLogSchemasByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getLogSchemasByApplicationId_result result = new getLogSchemasByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogSchemasByApplicationId_result result = new getLogSchemasByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogSchemasByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getLogSchemasByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getLogSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getLogSchema() {
        super("getLogSchema");
      }

      public getLogSchema_args getEmptyArgsInstance() {
        return new getLogSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getLogSchema_result result = new getLogSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogSchema_result result = new getLogSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getLogSchema(args.logSchemaId,resultHandler);
      }
    }

    public static class getLogSchemaByApplicationIdAndVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogSchemaByApplicationIdAndVersion_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getLogSchemaByApplicationIdAndVersion() {
        super("getLogSchemaByApplicationIdAndVersion");
      }

      public getLogSchemaByApplicationIdAndVersion_args getEmptyArgsInstance() {
        return new getLogSchemaByApplicationIdAndVersion_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getLogSchemaByApplicationIdAndVersion_result result = new getLogSchemaByApplicationIdAndVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogSchemaByApplicationIdAndVersion_result result = new getLogSchemaByApplicationIdAndVersion_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogSchemaByApplicationIdAndVersion_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getLogSchemaByApplicationIdAndVersion(args.applicationId, args.version,resultHandler);
      }
    }

    public static class editLogSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editLogSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editLogSchema() {
        super("editLogSchema");
      }

      public editLogSchema_args getEmptyArgsInstance() {
        return new editLogSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editLogSchema_result result = new editLogSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editLogSchema_result result = new editLogSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editLogSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editLogSchema(args.logSchema,resultHandler);
      }
    }

    public static class getEndpointGroupsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEndpointGroupsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getEndpointGroupsByApplicationId() {
        super("getEndpointGroupsByApplicationId");
      }

      public getEndpointGroupsByApplicationId_args getEmptyArgsInstance() {
        return new getEndpointGroupsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getEndpointGroupsByApplicationId_result result = new getEndpointGroupsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEndpointGroupsByApplicationId_result result = new getEndpointGroupsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEndpointGroupsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getEndpointGroupsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getEndpointGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEndpointGroup_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getEndpointGroup() {
        super("getEndpointGroup");
      }

      public getEndpointGroup_args getEmptyArgsInstance() {
        return new getEndpointGroup_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getEndpointGroup_result result = new getEndpointGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEndpointGroup_result result = new getEndpointGroup_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEndpointGroup_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getEndpointGroup(args.endpointGroupId,resultHandler);
      }
    }

    public static class editEndpointGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editEndpointGroup_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editEndpointGroup() {
        super("editEndpointGroup");
      }

      public editEndpointGroup_args getEmptyArgsInstance() {
        return new editEndpointGroup_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editEndpointGroup_result result = new editEndpointGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editEndpointGroup_result result = new editEndpointGroup_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editEndpointGroup_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editEndpointGroup(args.endpointGroup,resultHandler);
      }
    }

    public static class deleteEndpointGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEndpointGroup_args, Void> {
      public deleteEndpointGroup() {
        super("deleteEndpointGroup");
      }

      public deleteEndpointGroup_args getEmptyArgsInstance() {
        return new deleteEndpointGroup_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteEndpointGroup_result result = new deleteEndpointGroup_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEndpointGroup_result result = new deleteEndpointGroup_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEndpointGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteEndpointGroup(args.endpointGroupId,resultHandler);
      }
    }

    public static class removeTopicsFromEndpointGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeTopicsFromEndpointGroup_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public removeTopicsFromEndpointGroup() {
        super("removeTopicsFromEndpointGroup");
      }

      public removeTopicsFromEndpointGroup_args getEmptyArgsInstance() {
        return new removeTopicsFromEndpointGroup_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            removeTopicsFromEndpointGroup_result result = new removeTopicsFromEndpointGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeTopicsFromEndpointGroup_result result = new removeTopicsFromEndpointGroup_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeTopicsFromEndpointGroup_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.removeTopicsFromEndpointGroup(args.endpointGroupId, args.topicId,resultHandler);
      }
    }

    public static class addTopicsToEndpointGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTopicsToEndpointGroup_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public addTopicsToEndpointGroup() {
        super("addTopicsToEndpointGroup");
      }

      public addTopicsToEndpointGroup_args getEmptyArgsInstance() {
        return new addTopicsToEndpointGroup_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            addTopicsToEndpointGroup_result result = new addTopicsToEndpointGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTopicsToEndpointGroup_result result = new addTopicsToEndpointGroup_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTopicsToEndpointGroup_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.addTopicsToEndpointGroup(args.endpointGroupId, args.topicId,resultHandler);
      }
    }

    public static class getProfileFilterRecordsByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterRecordsByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getProfileFilterRecordsByEndpointGroupId() {
        super("getProfileFilterRecordsByEndpointGroupId");
      }

      public getProfileFilterRecordsByEndpointGroupId_args getEmptyArgsInstance() {
        return new getProfileFilterRecordsByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getProfileFilterRecordsByEndpointGroupId_result result = new getProfileFilterRecordsByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileFilterRecordsByEndpointGroupId_result result = new getProfileFilterRecordsByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileFilterRecordsByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getProfileFilterRecordsByEndpointGroupId(args.endpointGroupId, args.includeDeprecated,resultHandler);
      }
    }

    public static class getProfileFilterRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterRecord_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getProfileFilterRecord() {
        super("getProfileFilterRecord");
      }

      public getProfileFilterRecord_args getEmptyArgsInstance() {
        return new getProfileFilterRecord_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getProfileFilterRecord_result result = new getProfileFilterRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileFilterRecord_result result = new getProfileFilterRecord_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileFilterRecord_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getProfileFilterRecord(args.schemaId, args.endpointGroupId,resultHandler);
      }
    }

    public static class getVacantProfileSchemasByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVacantProfileSchemasByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getVacantProfileSchemasByEndpointGroupId() {
        super("getVacantProfileSchemasByEndpointGroupId");
      }

      public getVacantProfileSchemasByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantProfileSchemasByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getVacantProfileSchemasByEndpointGroupId_result result = new getVacantProfileSchemasByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVacantProfileSchemasByEndpointGroupId_result result = new getVacantProfileSchemasByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVacantProfileSchemasByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getVacantProfileSchemasByEndpointGroupId(args.endpointGroupId,resultHandler);
      }
    }

    public static class getProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilter_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getProfileFilter() {
        super("getProfileFilter");
      }

      public getProfileFilter_args getEmptyArgsInstance() {
        return new getProfileFilter_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getProfileFilter_result result = new getProfileFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileFilter_result result = new getProfileFilter_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getProfileFilter(args.profileFilterId,resultHandler);
      }
    }

    public static class editProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editProfileFilter_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editProfileFilter() {
        super("editProfileFilter");
      }

      public editProfileFilter_args getEmptyArgsInstance() {
        return new editProfileFilter_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editProfileFilter_result result = new editProfileFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editProfileFilter_result result = new editProfileFilter_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editProfileFilter(args.profileFilter,resultHandler);
      }
    }

    public static class activateProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateProfileFilter_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public activateProfileFilter() {
        super("activateProfileFilter");
      }

      public activateProfileFilter_args getEmptyArgsInstance() {
        return new activateProfileFilter_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            activateProfileFilter_result result = new activateProfileFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateProfileFilter_result result = new activateProfileFilter_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.activateProfileFilter(args.profileFilterId, args.activatedUsername,resultHandler);
      }
    }

    public static class deactivateProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deactivateProfileFilter_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public deactivateProfileFilter() {
        super("deactivateProfileFilter");
      }

      public deactivateProfileFilter_args getEmptyArgsInstance() {
        return new deactivateProfileFilter_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            deactivateProfileFilter_result result = new deactivateProfileFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deactivateProfileFilter_result result = new deactivateProfileFilter_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deactivateProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.deactivateProfileFilter(args.profileFilterId, args.deactivatedUsername,resultHandler);
      }
    }

    public static class deleteProfileFilterRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProfileFilterRecord_args, Void> {
      public deleteProfileFilterRecord() {
        super("deleteProfileFilterRecord");
      }

      public deleteProfileFilterRecord_args getEmptyArgsInstance() {
        return new deleteProfileFilterRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteProfileFilterRecord_result result = new deleteProfileFilterRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProfileFilterRecord_result result = new deleteProfileFilterRecord_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProfileFilterRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteProfileFilterRecord(args.schemaId, args.endpointGroupId, args.deactivatedUsername,resultHandler);
      }
    }

    public static class getConfigurationRecordsByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigurationRecordsByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getConfigurationRecordsByEndpointGroupId() {
        super("getConfigurationRecordsByEndpointGroupId");
      }

      public getConfigurationRecordsByEndpointGroupId_args getEmptyArgsInstance() {
        return new getConfigurationRecordsByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getConfigurationRecordsByEndpointGroupId_result result = new getConfigurationRecordsByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfigurationRecordsByEndpointGroupId_result result = new getConfigurationRecordsByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfigurationRecordsByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getConfigurationRecordsByEndpointGroupId(args.endpointGroupId, args.includeDeprecated,resultHandler);
      }
    }

    public static class getConfigurationRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigurationRecord_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getConfigurationRecord() {
        super("getConfigurationRecord");
      }

      public getConfigurationRecord_args getEmptyArgsInstance() {
        return new getConfigurationRecord_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getConfigurationRecord_result result = new getConfigurationRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfigurationRecord_result result = new getConfigurationRecord_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfigurationRecord_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getConfigurationRecord(args.schemaId, args.endpointGroupId,resultHandler);
      }
    }

    public static class getVacantConfigurationSchemasByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVacantConfigurationSchemasByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getVacantConfigurationSchemasByEndpointGroupId() {
        super("getVacantConfigurationSchemasByEndpointGroupId");
      }

      public getVacantConfigurationSchemasByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantConfigurationSchemasByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getVacantConfigurationSchemasByEndpointGroupId_result result = new getVacantConfigurationSchemasByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVacantConfigurationSchemasByEndpointGroupId_result result = new getVacantConfigurationSchemasByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVacantConfigurationSchemasByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getVacantConfigurationSchemasByEndpointGroupId(args.endpointGroupId,resultHandler);
      }
    }

    public static class getConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfiguration_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getConfiguration() {
        super("getConfiguration");
      }

      public getConfiguration_args getEmptyArgsInstance() {
        return new getConfiguration_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getConfiguration_result result = new getConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConfiguration_result result = new getConfiguration_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getConfiguration(args.configurationId,resultHandler);
      }
    }

    public static class editConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editConfiguration_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editConfiguration() {
        super("editConfiguration");
      }

      public editConfiguration_args getEmptyArgsInstance() {
        return new editConfiguration_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editConfiguration_result result = new editConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editConfiguration_result result = new editConfiguration_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editConfiguration(args.configuration,resultHandler);
      }
    }

    public static class activateConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateConfiguration_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public activateConfiguration() {
        super("activateConfiguration");
      }

      public activateConfiguration_args getEmptyArgsInstance() {
        return new activateConfiguration_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            activateConfiguration_result result = new activateConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateConfiguration_result result = new activateConfiguration_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.activateConfiguration(args.configurationId, args.activatedUsername,resultHandler);
      }
    }

    public static class deactivateConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deactivateConfiguration_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public deactivateConfiguration() {
        super("deactivateConfiguration");
      }

      public deactivateConfiguration_args getEmptyArgsInstance() {
        return new deactivateConfiguration_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            deactivateConfiguration_result result = new deactivateConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deactivateConfiguration_result result = new deactivateConfiguration_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deactivateConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.deactivateConfiguration(args.configurationId, args.deactivatedUsername,resultHandler);
      }
    }

    public static class deleteConfigurationRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteConfigurationRecord_args, Void> {
      public deleteConfigurationRecord() {
        super("deleteConfigurationRecord");
      }

      public deleteConfigurationRecord_args getEmptyArgsInstance() {
        return new deleteConfigurationRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteConfigurationRecord_result result = new deleteConfigurationRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteConfigurationRecord_result result = new deleteConfigurationRecord_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteConfigurationRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteConfigurationRecord(args.schemaId, args.endpointGroupId, args.deactivatedUsername,resultHandler);
      }
    }

    public static class editUserConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editUserConfiguration_args, Void> {
      public editUserConfiguration() {
        super("editUserConfiguration");
      }

      public editUserConfiguration_args getEmptyArgsInstance() {
        return new editUserConfiguration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            editUserConfiguration_result result = new editUserConfiguration_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editUserConfiguration_result result = new editUserConfiguration_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editUserConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.editUserConfiguration(args.configuration,resultHandler);
      }
    }

    public static class getNotificationSchemaVersionsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotificationSchemaVersionsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getNotificationSchemaVersionsByApplicationId() {
        super("getNotificationSchemaVersionsByApplicationId");
      }

      public getNotificationSchemaVersionsByApplicationId_args getEmptyArgsInstance() {
        return new getNotificationSchemaVersionsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getNotificationSchemaVersionsByApplicationId_result result = new getNotificationSchemaVersionsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotificationSchemaVersionsByApplicationId_result result = new getNotificationSchemaVersionsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotificationSchemaVersionsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getNotificationSchemaVersionsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class editNotificationSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editNotificationSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editNotificationSchema() {
        super("editNotificationSchema");
      }

      public editNotificationSchema_args getEmptyArgsInstance() {
        return new editNotificationSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editNotificationSchema_result result = new editNotificationSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editNotificationSchema_result result = new editNotificationSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editNotificationSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editNotificationSchema(args.notificationSchema,resultHandler);
      }
    }

    public static class getNotificationSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotificationSchema_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getNotificationSchema() {
        super("getNotificationSchema");
      }

      public getNotificationSchema_args getEmptyArgsInstance() {
        return new getNotificationSchema_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getNotificationSchema_result result = new getNotificationSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotificationSchema_result result = new getNotificationSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotificationSchema_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getNotificationSchema(args.notificationSchemaId,resultHandler);
      }
    }

    public static class getNotificationSchemasByAppId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotificationSchemasByAppId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getNotificationSchemasByAppId() {
        super("getNotificationSchemasByAppId");
      }

      public getNotificationSchemasByAppId_args getEmptyArgsInstance() {
        return new getNotificationSchemasByAppId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getNotificationSchemasByAppId_result result = new getNotificationSchemasByAppId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotificationSchemasByAppId_result result = new getNotificationSchemasByAppId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotificationSchemasByAppId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getNotificationSchemasByAppId(args.applicationId,resultHandler);
      }
    }

    public static class getUserNotificationSchemasByAppId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserNotificationSchemasByAppId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getUserNotificationSchemasByAppId() {
        super("getUserNotificationSchemasByAppId");
      }

      public getUserNotificationSchemasByAppId_args getEmptyArgsInstance() {
        return new getUserNotificationSchemasByAppId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getUserNotificationSchemasByAppId_result result = new getUserNotificationSchemasByAppId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserNotificationSchemasByAppId_result result = new getUserNotificationSchemasByAppId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserNotificationSchemasByAppId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getUserNotificationSchemasByAppId(args.applicationId,resultHandler);
      }
    }

    public static class findNotificationSchemasByAppIdAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNotificationSchemasByAppIdAndType_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public findNotificationSchemasByAppIdAndType() {
        super("findNotificationSchemasByAppIdAndType");
      }

      public findNotificationSchemasByAppIdAndType_args getEmptyArgsInstance() {
        return new findNotificationSchemasByAppIdAndType_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            findNotificationSchemasByAppIdAndType_result result = new findNotificationSchemasByAppIdAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findNotificationSchemasByAppIdAndType_result result = new findNotificationSchemasByAppIdAndType_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNotificationSchemasByAppIdAndType_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.findNotificationSchemasByAppIdAndType(args.applicationId, args.type,resultHandler);
      }
    }

    public static class editNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editNotification_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editNotification() {
        super("editNotification");
      }

      public editNotification_args getEmptyArgsInstance() {
        return new editNotification_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editNotification_result result = new editNotification_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editNotification_result result = new editNotification_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editNotification_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editNotification(args.notification,resultHandler);
      }
    }

    public static class getNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotification_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getNotification() {
        super("getNotification");
      }

      public getNotification_args getEmptyArgsInstance() {
        return new getNotification_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getNotification_result result = new getNotification_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotification_result result = new getNotification_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotification_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getNotification(args.notificationId,resultHandler);
      }
    }

    public static class getNotificationsByTopicId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotificationsByTopicId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getNotificationsByTopicId() {
        super("getNotificationsByTopicId");
      }

      public getNotificationsByTopicId_args getEmptyArgsInstance() {
        return new getNotificationsByTopicId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getNotificationsByTopicId_result result = new getNotificationsByTopicId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotificationsByTopicId_result result = new getNotificationsByTopicId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotificationsByTopicId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getNotificationsByTopicId(args.topicId,resultHandler);
      }
    }

    public static class editTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editTopic_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editTopic() {
        super("editTopic");
      }

      public editTopic_args getEmptyArgsInstance() {
        return new editTopic_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editTopic_result result = new editTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editTopic_result result = new editTopic_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editTopic_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editTopic(args.topic,resultHandler);
      }
    }

    public static class getTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopic_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getTopic() {
        super("getTopic");
      }

      public getTopic_args getEmptyArgsInstance() {
        return new getTopic_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getTopic_result result = new getTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopic_result result = new getTopic_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopic_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getTopic(args.topicId,resultHandler);
      }
    }

    public static class getTopicByAppId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopicByAppId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getTopicByAppId() {
        super("getTopicByAppId");
      }

      public getTopicByAppId_args getEmptyArgsInstance() {
        return new getTopicByAppId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getTopicByAppId_result result = new getTopicByAppId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopicByAppId_result result = new getTopicByAppId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopicByAppId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getTopicByAppId(args.appId,resultHandler);
      }
    }

    public static class getTopicByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopicByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getTopicByEndpointGroupId() {
        super("getTopicByEndpointGroupId");
      }

      public getTopicByEndpointGroupId_args getEmptyArgsInstance() {
        return new getTopicByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getTopicByEndpointGroupId_result result = new getTopicByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopicByEndpointGroupId_result result = new getTopicByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopicByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getTopicByEndpointGroupId(args.endpointGroupId,resultHandler);
      }
    }

    public static class getVacantTopicByEndpointGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVacantTopicByEndpointGroupId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getVacantTopicByEndpointGroupId() {
        super("getVacantTopicByEndpointGroupId");
      }

      public getVacantTopicByEndpointGroupId_args getEmptyArgsInstance() {
        return new getVacantTopicByEndpointGroupId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getVacantTopicByEndpointGroupId_result result = new getVacantTopicByEndpointGroupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVacantTopicByEndpointGroupId_result result = new getVacantTopicByEndpointGroupId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVacantTopicByEndpointGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getVacantTopicByEndpointGroupId(args.endpointGroupId,resultHandler);
      }
    }

    public static class deleteTopicById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTopicById_args, Void> {
      public deleteTopicById() {
        super("deleteTopicById");
      }

      public deleteTopicById_args getEmptyArgsInstance() {
        return new deleteTopicById_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteTopicById_result result = new deleteTopicById_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTopicById_result result = new deleteTopicById_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTopicById_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteTopicById(args.topicId,resultHandler);
      }
    }

    public static class getUnicastNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUnicastNotification_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getUnicastNotification() {
        super("getUnicastNotification");
      }

      public getUnicastNotification_args getEmptyArgsInstance() {
        return new getUnicastNotification_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getUnicastNotification_result result = new getUnicastNotification_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUnicastNotification_result result = new getUnicastNotification_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUnicastNotification_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getUnicastNotification(args.notificationId,resultHandler);
      }
    }

    public static class editUnicastNotification<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editUnicastNotification_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editUnicastNotification() {
        super("editUnicastNotification");
      }

      public editUnicastNotification_args getEmptyArgsInstance() {
        return new editUnicastNotification_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editUnicastNotification_result result = new editUnicastNotification_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editUnicastNotification_result result = new editUnicastNotification_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editUnicastNotification_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editUnicastNotification(args.notification,resultHandler);
      }
    }

    public static class getUnicastNotificationsByKeyHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUnicastNotificationsByKeyHash_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getUnicastNotificationsByKeyHash() {
        super("getUnicastNotificationsByKeyHash");
      }

      public getUnicastNotificationsByKeyHash_args getEmptyArgsInstance() {
        return new getUnicastNotificationsByKeyHash_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getUnicastNotificationsByKeyHash_result result = new getUnicastNotificationsByKeyHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUnicastNotificationsByKeyHash_result result = new getUnicastNotificationsByKeyHash_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUnicastNotificationsByKeyHash_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getUnicastNotificationsByKeyHash(args.keyhash,resultHandler);
      }
    }

    public static class addSdkProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSdkProfile_args, Void> {
      public addSdkProfile() {
        super("addSdkProfile");
      }

      public addSdkProfile_args getEmptyArgsInstance() {
        return new addSdkProfile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSdkProfile_result result = new addSdkProfile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSdkProfile_result result = new addSdkProfile_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSdkProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addSdkProfile(args.sdkProfile,resultHandler);
      }
    }

    public static class deleteSdkProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSdkProfile_args, Void> {
      public deleteSdkProfile() {
        super("deleteSdkProfile");
      }

      public deleteSdkProfile_args getEmptyArgsInstance() {
        return new deleteSdkProfile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSdkProfile_result result = new deleteSdkProfile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSdkProfile_result result = new deleteSdkProfile_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSdkProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteSdkProfile(args.sdkProfileId,resultHandler);
      }
    }

    public static class getSdkProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSdkProfile_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getSdkProfile() {
        super("getSdkProfile");
      }

      public getSdkProfile_args getEmptyArgsInstance() {
        return new getSdkProfile_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getSdkProfile_result result = new getSdkProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSdkProfile_result result = new getSdkProfile_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSdkProfile_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getSdkProfile(args.sdkProfileId,resultHandler);
      }
    }

    public static class getSdkProfilesByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSdkProfilesByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getSdkProfilesByApplicationId() {
        super("getSdkProfilesByApplicationId");
      }

      public getSdkProfilesByApplicationId_args getEmptyArgsInstance() {
        return new getSdkProfilesByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getSdkProfilesByApplicationId_result result = new getSdkProfilesByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSdkProfilesByApplicationId_result result = new getSdkProfilesByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSdkProfilesByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getSdkProfilesByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class generateSdk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateSdk_args, Sdk> {
      public generateSdk() {
        super("generateSdk");
      }

      public generateSdk_args getEmptyArgsInstance() {
        return new generateSdk_args();
      }

      public AsyncMethodCallback<Sdk> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Sdk>() { 
          public void onComplete(Sdk o) {
            generateSdk_result result = new generateSdk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateSdk_result result = new generateSdk_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateSdk_args args, org.apache.thrift.async.AsyncMethodCallback<Sdk> resultHandler) throws TException {
        iface.generateSdk(args.sdkProfile, args.targetPlatform,resultHandler);
      }
    }

    public static class isSdkProfileUsed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isSdkProfileUsed_args, Boolean> {
      public isSdkProfileUsed() {
        super("isSdkProfileUsed");
      }

      public isSdkProfileUsed_args getEmptyArgsInstance() {
        return new isSdkProfileUsed_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isSdkProfileUsed_result result = new isSdkProfileUsed_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isSdkProfileUsed_result result = new isSdkProfileUsed_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isSdkProfileUsed_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isSdkProfileUsed(args.sdkToken,resultHandler);
      }
    }

    public static class editEventClassFamily<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editEventClassFamily_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editEventClassFamily() {
        super("editEventClassFamily");
      }

      public editEventClassFamily_args getEmptyArgsInstance() {
        return new editEventClassFamily_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editEventClassFamily_result result = new editEventClassFamily_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editEventClassFamily_result result = new editEventClassFamily_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editEventClassFamily_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editEventClassFamily(args.eventClassFamily,resultHandler);
      }
    }

    public static class getEventClassFamiliesByTenantId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventClassFamiliesByTenantId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getEventClassFamiliesByTenantId() {
        super("getEventClassFamiliesByTenantId");
      }

      public getEventClassFamiliesByTenantId_args getEmptyArgsInstance() {
        return new getEventClassFamiliesByTenantId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getEventClassFamiliesByTenantId_result result = new getEventClassFamiliesByTenantId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventClassFamiliesByTenantId_result result = new getEventClassFamiliesByTenantId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventClassFamiliesByTenantId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getEventClassFamiliesByTenantId(args.tenantId,resultHandler);
      }
    }

    public static class getEventClassFamily<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventClassFamily_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getEventClassFamily() {
        super("getEventClassFamily");
      }

      public getEventClassFamily_args getEmptyArgsInstance() {
        return new getEventClassFamily_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getEventClassFamily_result result = new getEventClassFamily_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventClassFamily_result result = new getEventClassFamily_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventClassFamily_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getEventClassFamily(args.eventClassFamilyId,resultHandler);
      }
    }

    public static class addEventClassFamilySchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEventClassFamilySchema_args, Void> {
      public addEventClassFamilySchema() {
        super("addEventClassFamilySchema");
      }

      public addEventClassFamilySchema_args getEmptyArgsInstance() {
        return new addEventClassFamilySchema_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addEventClassFamilySchema_result result = new addEventClassFamilySchema_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addEventClassFamilySchema_result result = new addEventClassFamilySchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEventClassFamilySchema_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addEventClassFamilySchema(args.eventClassFamilyId, args.eventClassFamilySchema, args.createdUsername,resultHandler);
      }
    }

    public static class getEventClassesByFamilyIdVersionAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventClassesByFamilyIdVersionAndType_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getEventClassesByFamilyIdVersionAndType() {
        super("getEventClassesByFamilyIdVersionAndType");
      }

      public getEventClassesByFamilyIdVersionAndType_args getEmptyArgsInstance() {
        return new getEventClassesByFamilyIdVersionAndType_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getEventClassesByFamilyIdVersionAndType_result result = new getEventClassesByFamilyIdVersionAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventClassesByFamilyIdVersionAndType_result result = new getEventClassesByFamilyIdVersionAndType_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventClassesByFamilyIdVersionAndType_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getEventClassesByFamilyIdVersionAndType(args.ecfId, args.version, args.type,resultHandler);
      }
    }

    public static class editApplicationEventFamilyMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editApplicationEventFamilyMap_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editApplicationEventFamilyMap() {
        super("editApplicationEventFamilyMap");
      }

      public editApplicationEventFamilyMap_args getEmptyArgsInstance() {
        return new editApplicationEventFamilyMap_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editApplicationEventFamilyMap_result result = new editApplicationEventFamilyMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editApplicationEventFamilyMap_result result = new editApplicationEventFamilyMap_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editApplicationEventFamilyMap_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editApplicationEventFamilyMap(args.applicationEventFamilyMap,resultHandler);
      }
    }

    public static class getApplicationEventFamilyMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationEventFamilyMap_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getApplicationEventFamilyMap() {
        super("getApplicationEventFamilyMap");
      }

      public getApplicationEventFamilyMap_args getEmptyArgsInstance() {
        return new getApplicationEventFamilyMap_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getApplicationEventFamilyMap_result result = new getApplicationEventFamilyMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationEventFamilyMap_result result = new getApplicationEventFamilyMap_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationEventFamilyMap_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getApplicationEventFamilyMap(args.applicationEventFamilyMapId,resultHandler);
      }
    }

    public static class getApplicationEventFamilyMapsByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationEventFamilyMapsByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getApplicationEventFamilyMapsByApplicationId() {
        super("getApplicationEventFamilyMapsByApplicationId");
      }

      public getApplicationEventFamilyMapsByApplicationId_args getEmptyArgsInstance() {
        return new getApplicationEventFamilyMapsByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getApplicationEventFamilyMapsByApplicationId_result result = new getApplicationEventFamilyMapsByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationEventFamilyMapsByApplicationId_result result = new getApplicationEventFamilyMapsByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationEventFamilyMapsByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getApplicationEventFamilyMapsByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getVacantEventClassFamiliesByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVacantEventClassFamiliesByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getVacantEventClassFamiliesByApplicationId() {
        super("getVacantEventClassFamiliesByApplicationId");
      }

      public getVacantEventClassFamiliesByApplicationId_args getEmptyArgsInstance() {
        return new getVacantEventClassFamiliesByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getVacantEventClassFamiliesByApplicationId_result result = new getVacantEventClassFamiliesByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVacantEventClassFamiliesByApplicationId_result result = new getVacantEventClassFamiliesByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVacantEventClassFamiliesByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getVacantEventClassFamiliesByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getEventClassFamiliesByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventClassFamiliesByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getEventClassFamiliesByApplicationId() {
        super("getEventClassFamiliesByApplicationId");
      }

      public getEventClassFamiliesByApplicationId_args getEmptyArgsInstance() {
        return new getEventClassFamiliesByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getEventClassFamiliesByApplicationId_result result = new getEventClassFamiliesByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventClassFamiliesByApplicationId_result result = new getEventClassFamiliesByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventClassFamiliesByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getEventClassFamiliesByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getEndpointUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEndpointUsers_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getEndpointUsers() {
        super("getEndpointUsers");
      }

      public getEndpointUsers_args getEmptyArgsInstance() {
        return new getEndpointUsers_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getEndpointUsers_result result = new getEndpointUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEndpointUsers_result result = new getEndpointUsers_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEndpointUsers_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getEndpointUsers(resultHandler);
      }
    }

    public static class getEndpointUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEndpointUser_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getEndpointUser() {
        super("getEndpointUser");
      }

      public getEndpointUser_args getEmptyArgsInstance() {
        return new getEndpointUser_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getEndpointUser_result result = new getEndpointUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEndpointUser_result result = new getEndpointUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEndpointUser_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getEndpointUser(args.endpointUserId,resultHandler);
      }
    }

    public static class editEndpointUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editEndpointUser_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editEndpointUser() {
        super("editEndpointUser");
      }

      public editEndpointUser_args getEmptyArgsInstance() {
        return new editEndpointUser_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editEndpointUser_result result = new editEndpointUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editEndpointUser_result result = new editEndpointUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editEndpointUser_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editEndpointUser(args.endpointUser,resultHandler);
      }
    }

    public static class deleteEndpointUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEndpointUser_args, Void> {
      public deleteEndpointUser() {
        super("deleteEndpointUser");
      }

      public deleteEndpointUser_args getEmptyArgsInstance() {
        return new deleteEndpointUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteEndpointUser_result result = new deleteEndpointUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEndpointUser_result result = new deleteEndpointUser_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEndpointUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteEndpointUser(args.endpointUserId,resultHandler);
      }
    }

    public static class generateEndpointUserAccessToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateEndpointUserAccessToken_args, String> {
      public generateEndpointUserAccessToken() {
        super("generateEndpointUserAccessToken");
      }

      public generateEndpointUserAccessToken_args getEmptyArgsInstance() {
        return new generateEndpointUserAccessToken_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            generateEndpointUserAccessToken_result result = new generateEndpointUserAccessToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateEndpointUserAccessToken_result result = new generateEndpointUserAccessToken_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateEndpointUserAccessToken_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.generateEndpointUserAccessToken(args.externalUid, args.tenantId,resultHandler);
      }
    }

    public static class getLogAppendersByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogAppendersByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getLogAppendersByApplicationId() {
        super("getLogAppendersByApplicationId");
      }

      public getLogAppendersByApplicationId_args getEmptyArgsInstance() {
        return new getLogAppendersByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getLogAppendersByApplicationId_result result = new getLogAppendersByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogAppendersByApplicationId_result result = new getLogAppendersByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogAppendersByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getLogAppendersByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getLogAppender<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLogAppender_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getLogAppender() {
        super("getLogAppender");
      }

      public getLogAppender_args getEmptyArgsInstance() {
        return new getLogAppender_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getLogAppender_result result = new getLogAppender_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLogAppender_result result = new getLogAppender_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLogAppender_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getLogAppender(args.logAppenderId,resultHandler);
      }
    }

    public static class editLogAppender<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editLogAppender_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editLogAppender() {
        super("editLogAppender");
      }

      public editLogAppender_args getEmptyArgsInstance() {
        return new editLogAppender_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editLogAppender_result result = new editLogAppender_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editLogAppender_result result = new editLogAppender_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editLogAppender_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editLogAppender(args.logAppender,resultHandler);
      }
    }

    public static class deleteLogAppender<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLogAppender_args, Void> {
      public deleteLogAppender() {
        super("deleteLogAppender");
      }

      public deleteLogAppender_args getEmptyArgsInstance() {
        return new deleteLogAppender_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteLogAppender_result result = new deleteLogAppender_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLogAppender_result result = new deleteLogAppender_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLogAppender_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteLogAppender(args.logAppenderId,resultHandler);
      }
    }

    public static class generateRecordStructureLibrary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateRecordStructureLibrary_args, FileData> {
      public generateRecordStructureLibrary() {
        super("generateRecordStructureLibrary");
      }

      public generateRecordStructureLibrary_args getEmptyArgsInstance() {
        return new generateRecordStructureLibrary_args();
      }

      public AsyncMethodCallback<FileData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FileData>() { 
          public void onComplete(FileData o) {
            generateRecordStructureLibrary_result result = new generateRecordStructureLibrary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateRecordStructureLibrary_result result = new generateRecordStructureLibrary_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateRecordStructureLibrary_args args, org.apache.thrift.async.AsyncMethodCallback<FileData> resultHandler) throws TException {
        iface.generateRecordStructureLibrary(args.applicationId, args.logSchemaVersion,resultHandler);
      }
    }

    public static class getRecordStructureSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordStructureSchema_args, FileData> {
      public getRecordStructureSchema() {
        super("getRecordStructureSchema");
      }

      public getRecordStructureSchema_args getEmptyArgsInstance() {
        return new getRecordStructureSchema_args();
      }

      public AsyncMethodCallback<FileData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FileData>() { 
          public void onComplete(FileData o) {
            getRecordStructureSchema_result result = new getRecordStructureSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordStructureSchema_result result = new getRecordStructureSchema_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordStructureSchema_args args, org.apache.thrift.async.AsyncMethodCallback<FileData> resultHandler) throws TException {
        iface.getRecordStructureSchema(args.applicationId, args.logSchemaVersion,resultHandler);
      }
    }

    public static class getRecordStructureData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordStructureData_args, FileData> {
      public getRecordStructureData() {
        super("getRecordStructureData");
      }

      public getRecordStructureData_args getEmptyArgsInstance() {
        return new getRecordStructureData_args();
      }

      public AsyncMethodCallback<FileData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FileData>() { 
          public void onComplete(FileData o) {
            getRecordStructureData_result result = new getRecordStructureData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordStructureData_result result = new getRecordStructureData_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordStructureData_args args, org.apache.thrift.async.AsyncMethodCallback<FileData> resultHandler) throws TException {
        iface.getRecordStructureData(args.applicationId, args.schemaVersion, args.recordFile,resultHandler);
      }
    }

    public static class getUserVerifiersByApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserVerifiersByApplicationId_args, List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> {
      public getUserVerifiersByApplicationId() {
        super("getUserVerifiersByApplicationId");
      }

      public getUserVerifiersByApplicationId_args getEmptyArgsInstance() {
        return new getUserVerifiersByApplicationId_args();
      }

      public AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>>() { 
          public void onComplete(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> o) {
            getUserVerifiersByApplicationId_result result = new getUserVerifiersByApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserVerifiersByApplicationId_result result = new getUserVerifiersByApplicationId_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserVerifiersByApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>> resultHandler) throws TException {
        iface.getUserVerifiersByApplicationId(args.applicationId,resultHandler);
      }
    }

    public static class getUserVerifier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserVerifier_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public getUserVerifier() {
        super("getUserVerifier");
      }

      public getUserVerifier_args getEmptyArgsInstance() {
        return new getUserVerifier_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            getUserVerifier_result result = new getUserVerifier_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserVerifier_result result = new getUserVerifier_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserVerifier_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.getUserVerifier(args.userVerifierId,resultHandler);
      }
    }

    public static class editUserVerifier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editUserVerifier_args, org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> {
      public editUserVerifier() {
        super("editUserVerifier");
      }

      public editUserVerifier_args getEmptyArgsInstance() {
        return new editUserVerifier_args();
      }

      public AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>() { 
          public void onComplete(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct o) {
            editUserVerifier_result result = new editUserVerifier_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editUserVerifier_result result = new editUserVerifier_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editUserVerifier_args args, org.apache.thrift.async.AsyncMethodCallback<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> resultHandler) throws TException {
        iface.editUserVerifier(args.userVerifier,resultHandler);
      }
    }

    public static class deleteUserVerifier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUserVerifier_args, Void> {
      public deleteUserVerifier() {
        super("deleteUserVerifier");
      }

      public deleteUserVerifier_args getEmptyArgsInstance() {
        return new deleteUserVerifier_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteUserVerifier_result result = new deleteUserVerifier_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUserVerifier_result result = new deleteUserVerifier_result();
            if (e instanceof ControlThriftException) {
                        result.ControlException = (ControlThriftException) e;
                        result.setControlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUserVerifier_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteUserVerifier(args.userVerifierId,resultHandler);
      }
    }

  }

  public static class getTenants_args implements org.apache.thrift.TBase<getTenants_args, getTenants_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTenants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenants_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenants_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenants_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenants_args.class, metaDataMap);
    }

    public getTenants_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenants_args(getTenants_args other) {
    }

    public getTenants_args deepCopy() {
      return new getTenants_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenants_args)
        return this.equals((getTenants_args)that);
      return false;
    }

    public boolean equals(getTenants_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenants_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenants_argsStandardSchemeFactory implements SchemeFactory {
      public getTenants_argsStandardScheme getScheme() {
        return new getTenants_argsStandardScheme();
      }
    }

    private static class getTenants_argsStandardScheme extends StandardScheme<getTenants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenants_argsTupleSchemeFactory implements SchemeFactory {
      public getTenants_argsTupleScheme getScheme() {
        return new getTenants_argsTupleScheme();
      }
    }

    private static class getTenants_argsTupleScheme extends TupleScheme<getTenants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTenants_result implements org.apache.thrift.TBase<getTenants_result, getTenants_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTenants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenants_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenants_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenants_result.class, metaDataMap);
    }

    public getTenants_result() {
    }

    public getTenants_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenants_result(getTenants_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTenants_result deepCopy() {
      return new getTenants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getTenants_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTenants_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenants_result)
        return this.equals((getTenants_result)that);
      return false;
    }

    public boolean equals(getTenants_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenants_resultStandardSchemeFactory implements SchemeFactory {
      public getTenants_resultStandardScheme getScheme() {
        return new getTenants_resultStandardScheme();
      }
    }

    private static class getTenants_resultStandardScheme extends StandardScheme<getTenants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem2;
                    _elem2 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenants_resultTupleSchemeFactory implements SchemeFactory {
      public getTenants_resultTupleScheme getScheme() {
        return new getTenants_resultTupleScheme();
      }
    }

    private static class getTenants_resultTupleScheme extends TupleScheme<getTenants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem7;
              _elem7 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTenant_args implements org.apache.thrift.TBase<getTenant_args, getTenant_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTenant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenant_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenant_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenant_args.class, metaDataMap);
    }

    public getTenant_args() {
    }

    public getTenant_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenant_args(getTenant_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public getTenant_args deepCopy() {
      return new getTenant_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public getTenant_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenant_args)
        return this.equals((getTenant_args)that);
      return false;
    }

    public boolean equals(getTenant_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenant_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenant_argsStandardSchemeFactory implements SchemeFactory {
      public getTenant_argsStandardScheme getScheme() {
        return new getTenant_argsStandardScheme();
      }
    }

    private static class getTenant_argsStandardScheme extends StandardScheme<getTenant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenant_argsTupleSchemeFactory implements SchemeFactory {
      public getTenant_argsTupleScheme getScheme() {
        return new getTenant_argsTupleScheme();
      }
    }

    private static class getTenant_argsTupleScheme extends TupleScheme<getTenant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class getTenant_result implements org.apache.thrift.TBase<getTenant_result, getTenant_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTenant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenant_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenant_result.class, metaDataMap);
    }

    public getTenant_result() {
    }

    public getTenant_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenant_result(getTenant_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTenant_result deepCopy() {
      return new getTenant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getTenant_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTenant_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenant_result)
        return this.equals((getTenant_result)that);
      return false;
    }

    public boolean equals(getTenant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenant_resultStandardSchemeFactory implements SchemeFactory {
      public getTenant_resultStandardScheme getScheme() {
        return new getTenant_resultStandardScheme();
      }
    }

    private static class getTenant_resultStandardScheme extends StandardScheme<getTenant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenant_resultTupleSchemeFactory implements SchemeFactory {
      public getTenant_resultTupleScheme getScheme() {
        return new getTenant_resultTupleScheme();
      }
    }

    private static class getTenant_resultTupleScheme extends TupleScheme<getTenant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editTenant_args implements org.apache.thrift.TBase<editTenant_args, editTenant_args._Fields>, java.io.Serializable, Cloneable, Comparable<editTenant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTenant_args");

    private static final org.apache.thrift.protocol.TField TENANT_FIELD_DESC = new org.apache.thrift.protocol.TField("tenant", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTenant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTenant_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT((short)1, "tenant");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT
            return TENANT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT, new org.apache.thrift.meta_data.FieldMetaData("tenant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTenant_args.class, metaDataMap);
    }

    public editTenant_args() {
    }

    public editTenant_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant)
    {
      this();
      this.tenant = tenant;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTenant_args(editTenant_args other) {
      if (other.isSetTenant()) {
        this.tenant = other.tenant;
      }
    }

    public editTenant_args deepCopy() {
      return new editTenant_args(this);
    }

    @Override
    public void clear() {
      this.tenant = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenant() {
      return this.tenant;
    }

    public editTenant_args setTenant(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenant) {
      this.tenant = tenant;
      return this;
    }

    public void unsetTenant() {
      this.tenant = null;
    }

    /** Returns true if field tenant is set (has been assigned a value) and false otherwise */
    public boolean isSetTenant() {
      return this.tenant != null;
    }

    public void setTenantIsSet(boolean value) {
      if (!value) {
        this.tenant = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT:
        if (value == null) {
          unsetTenant();
        } else {
          setTenant((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT:
        return getTenant();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT:
        return isSetTenant();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTenant_args)
        return this.equals((editTenant_args)that);
      return false;
    }

    public boolean equals(editTenant_args that) {
      if (that == null)
        return false;

      boolean this_present_tenant = true && this.isSetTenant();
      boolean that_present_tenant = true && that.isSetTenant();
      if (this_present_tenant || that_present_tenant) {
        if (!(this_present_tenant && that_present_tenant))
          return false;
        if (!this.tenant.equals(that.tenant))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenant = true && (isSetTenant());
      builder.append(present_tenant);
      if (present_tenant)
        builder.append(tenant);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTenant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenant()).compareTo(other.isSetTenant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenant, other.tenant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTenant_args(");
      boolean first = true;

      sb.append("tenant:");
      if (this.tenant == null) {
        sb.append("null");
      } else {
        sb.append(this.tenant);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTenant_argsStandardSchemeFactory implements SchemeFactory {
      public editTenant_argsStandardScheme getScheme() {
        return new editTenant_argsStandardScheme();
      }
    }

    private static class editTenant_argsStandardScheme extends StandardScheme<editTenant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTenant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tenant = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.tenant.read(iprot);
                struct.setTenantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTenant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenant != null) {
          oprot.writeFieldBegin(TENANT_FIELD_DESC);
          struct.tenant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTenant_argsTupleSchemeFactory implements SchemeFactory {
      public editTenant_argsTupleScheme getScheme() {
        return new editTenant_argsTupleScheme();
      }
    }

    private static class editTenant_argsTupleScheme extends TupleScheme<editTenant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenant()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenant()) {
          struct.tenant.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenant = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.tenant.read(iprot);
          struct.setTenantIsSet(true);
        }
      }
    }

  }

  public static class editTenant_result implements org.apache.thrift.TBase<editTenant_result, editTenant_result._Fields>, java.io.Serializable, Cloneable, Comparable<editTenant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTenant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTenant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTenant_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTenant_result.class, metaDataMap);
    }

    public editTenant_result() {
    }

    public editTenant_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTenant_result(editTenant_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editTenant_result deepCopy() {
      return new editTenant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editTenant_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editTenant_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTenant_result)
        return this.equals((editTenant_result)that);
      return false;
    }

    public boolean equals(editTenant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTenant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTenant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTenant_resultStandardSchemeFactory implements SchemeFactory {
      public editTenant_resultStandardScheme getScheme() {
        return new editTenant_resultStandardScheme();
      }
    }

    private static class editTenant_resultStandardScheme extends StandardScheme<editTenant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTenant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTenant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTenant_resultTupleSchemeFactory implements SchemeFactory {
      public editTenant_resultTupleScheme getScheme() {
        return new editTenant_resultTupleScheme();
      }
    }

    private static class editTenant_resultTupleScheme extends TupleScheme<editTenant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteTenant_args implements org.apache.thrift.TBase<deleteTenant_args, deleteTenant_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTenant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTenant_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTenant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTenant_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTenant_args.class, metaDataMap);
    }

    public deleteTenant_args() {
    }

    public deleteTenant_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTenant_args(deleteTenant_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public deleteTenant_args deepCopy() {
      return new deleteTenant_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public deleteTenant_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTenant_args)
        return this.equals((deleteTenant_args)that);
      return false;
    }

    public boolean equals(deleteTenant_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTenant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTenant_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTenant_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTenant_argsStandardScheme getScheme() {
        return new deleteTenant_argsStandardScheme();
      }
    }

    private static class deleteTenant_argsStandardScheme extends StandardScheme<deleteTenant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTenant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTenant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTenant_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTenant_argsTupleScheme getScheme() {
        return new deleteTenant_argsTupleScheme();
      }
    }

    private static class deleteTenant_argsTupleScheme extends TupleScheme<deleteTenant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTenant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class deleteTenant_result implements org.apache.thrift.TBase<deleteTenant_result, deleteTenant_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTenant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTenant_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTenant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTenant_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTenant_result.class, metaDataMap);
    }

    public deleteTenant_result() {
    }

    public deleteTenant_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTenant_result(deleteTenant_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteTenant_result deepCopy() {
      return new deleteTenant_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteTenant_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTenant_result)
        return this.equals((deleteTenant_result)that);
      return false;
    }

    public boolean equals(deleteTenant_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTenant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTenant_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTenant_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTenant_resultStandardScheme getScheme() {
        return new deleteTenant_resultStandardScheme();
      }
    }

    private static class deleteTenant_resultStandardScheme extends StandardScheme<deleteTenant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTenant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTenant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTenant_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTenant_resultTupleScheme getScheme() {
        return new deleteTenant_resultTupleScheme();
      }
    }

    private static class deleteTenant_resultTupleScheme extends TupleScheme<deleteTenant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTenant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUsers_args implements org.apache.thrift.TBase<getUsers_args, getUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsers_args.class, metaDataMap);
    }

    public getUsers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsers_args(getUsers_args other) {
    }

    public getUsers_args deepCopy() {
      return new getUsers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsers_args)
        return this.equals((getUsers_args)that);
      return false;
    }

    public boolean equals(getUsers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsers_argsStandardSchemeFactory implements SchemeFactory {
      public getUsers_argsStandardScheme getScheme() {
        return new getUsers_argsStandardScheme();
      }
    }

    private static class getUsers_argsStandardScheme extends StandardScheme<getUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsers_argsTupleSchemeFactory implements SchemeFactory {
      public getUsers_argsTupleScheme getScheme() {
        return new getUsers_argsTupleScheme();
      }
    }

    private static class getUsers_argsTupleScheme extends TupleScheme<getUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUsers_result implements org.apache.thrift.TBase<getUsers_result, getUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsers_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsers_result.class, metaDataMap);
    }

    public getUsers_result() {
    }

    public getUsers_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsers_result(getUsers_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUsers_result deepCopy() {
      return new getUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getUsers_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUsers_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsers_result)
        return this.equals((getUsers_result)that);
      return false;
    }

    public boolean equals(getUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsers_resultStandardSchemeFactory implements SchemeFactory {
      public getUsers_resultStandardScheme getScheme() {
        return new getUsers_resultStandardScheme();
      }
    }

    private static class getUsers_resultStandardScheme extends StandardScheme<getUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem10;
                    _elem10 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsers_resultTupleSchemeFactory implements SchemeFactory {
      public getUsers_resultTupleScheme getScheme() {
        return new getUsers_resultTupleScheme();
      }
    }

    private static class getUsers_resultTupleScheme extends TupleScheme<getUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem15;
              _elem15 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTenantUsers_args implements org.apache.thrift.TBase<getTenantUsers_args, getTenantUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantUsers_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantUsers_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantUsers_args.class, metaDataMap);
    }

    public getTenantUsers_args() {
    }

    public getTenantUsers_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantUsers_args(getTenantUsers_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public getTenantUsers_args deepCopy() {
      return new getTenantUsers_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public getTenantUsers_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantUsers_args)
        return this.equals((getTenantUsers_args)that);
      return false;
    }

    public boolean equals(getTenantUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantUsers_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantUsers_argsStandardSchemeFactory implements SchemeFactory {
      public getTenantUsers_argsStandardScheme getScheme() {
        return new getTenantUsers_argsStandardScheme();
      }
    }

    private static class getTenantUsers_argsStandardScheme extends StandardScheme<getTenantUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantUsers_argsTupleSchemeFactory implements SchemeFactory {
      public getTenantUsers_argsTupleScheme getScheme() {
        return new getTenantUsers_argsTupleScheme();
      }
    }

    private static class getTenantUsers_argsTupleScheme extends TupleScheme<getTenantUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class getTenantUsers_result implements org.apache.thrift.TBase<getTenantUsers_result, getTenantUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantUsers_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantUsers_result.class, metaDataMap);
    }

    public getTenantUsers_result() {
    }

    public getTenantUsers_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantUsers_result(getTenantUsers_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTenantUsers_result deepCopy() {
      return new getTenantUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getTenantUsers_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTenantUsers_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantUsers_result)
        return this.equals((getTenantUsers_result)that);
      return false;
    }

    public boolean equals(getTenantUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantUsers_resultStandardSchemeFactory implements SchemeFactory {
      public getTenantUsers_resultStandardScheme getScheme() {
        return new getTenantUsers_resultStandardScheme();
      }
    }

    private static class getTenantUsers_resultStandardScheme extends StandardScheme<getTenantUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem18;
                    _elem18 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantUsers_resultTupleSchemeFactory implements SchemeFactory {
      public getTenantUsers_resultTupleScheme getScheme() {
        return new getTenantUsers_resultTupleScheme();
      }
    }

    private static class getTenantUsers_resultTupleScheme extends TupleScheme<getTenantUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem23;
              _elem23 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUser_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
    }

    public getUser_args() {
    }

    public getUser_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_args(getUser_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getUser_args deepCopy() {
      return new getUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_args)
        return this.equals((getUser_args)that);
      return false;
    }

    public boolean equals(getUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userId = true && (isSetUserId());
      builder.append(present_userId);
      if (present_userId)
        builder.append(userId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUser_argsStandardSchemeFactory implements SchemeFactory {
      public getUser_argsStandardScheme getScheme() {
        return new getUser_argsStandardScheme();
      }
    }

    private static class getUser_argsStandardScheme extends StandardScheme<getUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUser_argsTupleSchemeFactory implements SchemeFactory {
      public getUser_argsTupleScheme getScheme() {
        return new getUser_argsTupleScheme();
      }
    }

    private static class getUser_argsTupleScheme extends TupleScheme<getUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUser_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
    }

    public getUser_result() {
    }

    public getUser_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_result(getUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUser_result deepCopy() {
      return new getUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getUser_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_result)
        return this.equals((getUser_result)that);
      return false;
    }

    public boolean equals(getUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUser_resultStandardSchemeFactory implements SchemeFactory {
      public getUser_resultStandardScheme getScheme() {
        return new getUser_resultStandardScheme();
      }
    }

    private static class getUser_resultStandardScheme extends StandardScheme<getUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUser_resultTupleSchemeFactory implements SchemeFactory {
      public getUser_resultTupleScheme getScheme() {
        return new getUser_resultTupleScheme();
      }
    }

    private static class getUser_resultTupleScheme extends TupleScheme<getUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUserByExternalUid_args implements org.apache.thrift.TBase<getUserByExternalUid_args, getUserByExternalUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserByExternalUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserByExternalUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserByExternalUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserByExternalUid_argsTupleSchemeFactory());
    }

    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserByExternalUid_args.class, metaDataMap);
    }

    public getUserByExternalUid_args() {
    }

    public getUserByExternalUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserByExternalUid_args(getUserByExternalUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public getUserByExternalUid_args deepCopy() {
      return new getUserByExternalUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public getUserByExternalUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserByExternalUid_args)
        return this.equals((getUserByExternalUid_args)that);
      return false;
    }

    public boolean equals(getUserByExternalUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_uid = true && (isSetUid());
      builder.append(present_uid);
      if (present_uid)
        builder.append(uid);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserByExternalUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserByExternalUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserByExternalUid_argsStandardSchemeFactory implements SchemeFactory {
      public getUserByExternalUid_argsStandardScheme getScheme() {
        return new getUserByExternalUid_argsStandardScheme();
      }
    }

    private static class getUserByExternalUid_argsStandardScheme extends StandardScheme<getUserByExternalUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserByExternalUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserByExternalUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserByExternalUid_argsTupleSchemeFactory implements SchemeFactory {
      public getUserByExternalUid_argsTupleScheme getScheme() {
        return new getUserByExternalUid_argsTupleScheme();
      }
    }

    private static class getUserByExternalUid_argsTupleScheme extends TupleScheme<getUserByExternalUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserByExternalUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserByExternalUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getUserByExternalUid_result implements org.apache.thrift.TBase<getUserByExternalUid_result, getUserByExternalUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserByExternalUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserByExternalUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserByExternalUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserByExternalUid_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserByExternalUid_result.class, metaDataMap);
    }

    public getUserByExternalUid_result() {
    }

    public getUserByExternalUid_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserByExternalUid_result(getUserByExternalUid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUserByExternalUid_result deepCopy() {
      return new getUserByExternalUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getUserByExternalUid_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUserByExternalUid_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserByExternalUid_result)
        return this.equals((getUserByExternalUid_result)that);
      return false;
    }

    public boolean equals(getUserByExternalUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserByExternalUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserByExternalUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserByExternalUid_resultStandardSchemeFactory implements SchemeFactory {
      public getUserByExternalUid_resultStandardScheme getScheme() {
        return new getUserByExternalUid_resultStandardScheme();
      }
    }

    private static class getUserByExternalUid_resultStandardScheme extends StandardScheme<getUserByExternalUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserByExternalUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserByExternalUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserByExternalUid_resultTupleSchemeFactory implements SchemeFactory {
      public getUserByExternalUid_resultTupleScheme getScheme() {
        return new getUserByExternalUid_resultTupleScheme();
      }
    }

    private static class getUserByExternalUid_resultTupleScheme extends TupleScheme<getUserByExternalUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserByExternalUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserByExternalUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editUser_args implements org.apache.thrift.TBase<editUser_args, editUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<editUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUser_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUser_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUser_args.class, metaDataMap);
    }

    public editUser_args() {
    }

    public editUser_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUser_args(editUser_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }

    public editUser_args deepCopy() {
      return new editUser_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUser() {
      return this.user;
    }

    public editUser_args setUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUser_args)
        return this.equals((editUser_args)that);
      return false;
    }

    public boolean equals(editUser_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_user = true && (isSetUser());
      builder.append(present_user);
      if (present_user)
        builder.append(user);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUser_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUser_argsStandardSchemeFactory implements SchemeFactory {
      public editUser_argsStandardScheme getScheme() {
        return new editUser_argsStandardScheme();
      }
    }

    private static class editUser_argsStandardScheme extends StandardScheme<editUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUser_argsTupleSchemeFactory implements SchemeFactory {
      public editUser_argsTupleScheme getScheme() {
        return new editUser_argsTupleScheme();
      }
    }

    private static class editUser_argsTupleScheme extends TupleScheme<editUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class editUser_result implements org.apache.thrift.TBase<editUser_result, editUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<editUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUser_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUser_result.class, metaDataMap);
    }

    public editUser_result() {
    }

    public editUser_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUser_result(editUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editUser_result deepCopy() {
      return new editUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editUser_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUser_result)
        return this.equals((editUser_result)that);
      return false;
    }

    public boolean equals(editUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUser_resultStandardSchemeFactory implements SchemeFactory {
      public editUser_resultStandardScheme getScheme() {
        return new editUser_resultStandardScheme();
      }
    }

    private static class editUser_resultStandardScheme extends StandardScheme<editUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUser_resultTupleSchemeFactory implements SchemeFactory {
      public editUser_resultTupleScheme getScheme() {
        return new editUser_resultTupleScheme();
      }
    }

    private static class editUser_resultTupleScheme extends TupleScheme<editUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_args implements org.apache.thrift.TBase<deleteUser_args, deleteUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_args.class, metaDataMap);
    }

    public deleteUser_args() {
    }

    public deleteUser_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_args(deleteUser_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public deleteUser_args deepCopy() {
      return new deleteUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public deleteUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_args)
        return this.equals((deleteUser_args)that);
      return false;
    }

    public boolean equals(deleteUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userId = true && (isSetUserId());
      builder.append(present_userId);
      if (present_userId)
        builder.append(userId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUser_argsStandardScheme getScheme() {
        return new deleteUser_argsStandardScheme();
      }
    }

    private static class deleteUser_argsStandardScheme extends StandardScheme<deleteUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUser_argsTupleScheme getScheme() {
        return new deleteUser_argsTupleScheme();
      }
    }

    private static class deleteUser_argsTupleScheme extends TupleScheme<deleteUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_result implements org.apache.thrift.TBase<deleteUser_result, deleteUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_result.class, metaDataMap);
    }

    public deleteUser_result() {
    }

    public deleteUser_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_result(deleteUser_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteUser_result deepCopy() {
      return new deleteUser_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_result)
        return this.equals((deleteUser_result)that);
      return false;
    }

    public boolean equals(deleteUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUser_resultStandardScheme getScheme() {
        return new deleteUser_resultStandardScheme();
      }
    }

    private static class deleteUser_resultStandardScheme extends StandardScheme<deleteUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUser_resultTupleScheme getScheme() {
        return new deleteUser_resultTupleScheme();
      }
    }

    private static class deleteUser_resultTupleScheme extends TupleScheme<deleteUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTenantAdmins_args implements org.apache.thrift.TBase<getTenantAdmins_args, getTenantAdmins_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantAdmins_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantAdmins_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantAdmins_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantAdmins_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantAdmins_args.class, metaDataMap);
    }

    public getTenantAdmins_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantAdmins_args(getTenantAdmins_args other) {
    }

    public getTenantAdmins_args deepCopy() {
      return new getTenantAdmins_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantAdmins_args)
        return this.equals((getTenantAdmins_args)that);
      return false;
    }

    public boolean equals(getTenantAdmins_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantAdmins_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantAdmins_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantAdmins_argsStandardSchemeFactory implements SchemeFactory {
      public getTenantAdmins_argsStandardScheme getScheme() {
        return new getTenantAdmins_argsStandardScheme();
      }
    }

    private static class getTenantAdmins_argsStandardScheme extends StandardScheme<getTenantAdmins_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantAdmins_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantAdmins_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantAdmins_argsTupleSchemeFactory implements SchemeFactory {
      public getTenantAdmins_argsTupleScheme getScheme() {
        return new getTenantAdmins_argsTupleScheme();
      }
    }

    private static class getTenantAdmins_argsTupleScheme extends TupleScheme<getTenantAdmins_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantAdmins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantAdmins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTenantAdmins_result implements org.apache.thrift.TBase<getTenantAdmins_result, getTenantAdmins_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantAdmins_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantAdmins_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantAdmins_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantAdmins_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantAdmins_result.class, metaDataMap);
    }

    public getTenantAdmins_result() {
    }

    public getTenantAdmins_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantAdmins_result(getTenantAdmins_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTenantAdmins_result deepCopy() {
      return new getTenantAdmins_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getTenantAdmins_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTenantAdmins_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantAdmins_result)
        return this.equals((getTenantAdmins_result)that);
      return false;
    }

    public boolean equals(getTenantAdmins_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantAdmins_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantAdmins_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantAdmins_resultStandardSchemeFactory implements SchemeFactory {
      public getTenantAdmins_resultStandardScheme getScheme() {
        return new getTenantAdmins_resultStandardScheme();
      }
    }

    private static class getTenantAdmins_resultStandardScheme extends StandardScheme<getTenantAdmins_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantAdmins_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem26;
                    _elem26 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantAdmins_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantAdmins_resultTupleSchemeFactory implements SchemeFactory {
      public getTenantAdmins_resultTupleScheme getScheme() {
        return new getTenantAdmins_resultTupleScheme();
      }
    }

    private static class getTenantAdmins_resultTupleScheme extends TupleScheme<getTenantAdmins_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantAdmins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantAdmins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem31;
              _elem31 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTenantAdmin_args implements org.apache.thrift.TBase<getTenantAdmin_args, getTenantAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantAdmin_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantAdmin_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantAdmin_args.class, metaDataMap);
    }

    public getTenantAdmin_args() {
    }

    public getTenantAdmin_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantAdmin_args(getTenantAdmin_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public getTenantAdmin_args deepCopy() {
      return new getTenantAdmin_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public getTenantAdmin_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantAdmin_args)
        return this.equals((getTenantAdmin_args)that);
      return false;
    }

    public boolean equals(getTenantAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantAdmin_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public getTenantAdmin_argsStandardScheme getScheme() {
        return new getTenantAdmin_argsStandardScheme();
      }
    }

    private static class getTenantAdmin_argsStandardScheme extends StandardScheme<getTenantAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public getTenantAdmin_argsTupleScheme getScheme() {
        return new getTenantAdmin_argsTupleScheme();
      }
    }

    private static class getTenantAdmin_argsTupleScheme extends TupleScheme<getTenantAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class getTenantAdmin_result implements org.apache.thrift.TBase<getTenantAdmin_result, getTenantAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTenantAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTenantAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTenantAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTenantAdmin_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTenantAdmin_result.class, metaDataMap);
    }

    public getTenantAdmin_result() {
    }

    public getTenantAdmin_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTenantAdmin_result(getTenantAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTenantAdmin_result deepCopy() {
      return new getTenantAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getTenantAdmin_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTenantAdmin_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTenantAdmin_result)
        return this.equals((getTenantAdmin_result)that);
      return false;
    }

    public boolean equals(getTenantAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTenantAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTenantAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTenantAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public getTenantAdmin_resultStandardScheme getScheme() {
        return new getTenantAdmin_resultStandardScheme();
      }
    }

    private static class getTenantAdmin_resultStandardScheme extends StandardScheme<getTenantAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTenantAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTenantAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTenantAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public getTenantAdmin_resultTupleScheme getScheme() {
        return new getTenantAdmin_resultTupleScheme();
      }
    }

    private static class getTenantAdmin_resultTupleScheme extends TupleScheme<getTenantAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editTenantAdmin_args implements org.apache.thrift.TBase<editTenantAdmin_args, editTenantAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<editTenantAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTenantAdmin_args");

    private static final org.apache.thrift.protocol.TField TENANT_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantAdmin", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTenantAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTenantAdmin_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ADMIN((short)1, "tenantAdmin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ADMIN
            return TENANT_ADMIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("tenantAdmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTenantAdmin_args.class, metaDataMap);
    }

    public editTenantAdmin_args() {
    }

    public editTenantAdmin_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin)
    {
      this();
      this.tenantAdmin = tenantAdmin;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTenantAdmin_args(editTenantAdmin_args other) {
      if (other.isSetTenantAdmin()) {
        this.tenantAdmin = other.tenantAdmin;
      }
    }

    public editTenantAdmin_args deepCopy() {
      return new editTenantAdmin_args(this);
    }

    @Override
    public void clear() {
      this.tenantAdmin = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTenantAdmin() {
      return this.tenantAdmin;
    }

    public editTenantAdmin_args setTenantAdmin(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct tenantAdmin) {
      this.tenantAdmin = tenantAdmin;
      return this;
    }

    public void unsetTenantAdmin() {
      this.tenantAdmin = null;
    }

    /** Returns true if field tenantAdmin is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantAdmin() {
      return this.tenantAdmin != null;
    }

    public void setTenantAdminIsSet(boolean value) {
      if (!value) {
        this.tenantAdmin = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ADMIN:
        if (value == null) {
          unsetTenantAdmin();
        } else {
          setTenantAdmin((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ADMIN:
        return getTenantAdmin();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ADMIN:
        return isSetTenantAdmin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTenantAdmin_args)
        return this.equals((editTenantAdmin_args)that);
      return false;
    }

    public boolean equals(editTenantAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantAdmin = true && this.isSetTenantAdmin();
      boolean that_present_tenantAdmin = true && that.isSetTenantAdmin();
      if (this_present_tenantAdmin || that_present_tenantAdmin) {
        if (!(this_present_tenantAdmin && that_present_tenantAdmin))
          return false;
        if (!this.tenantAdmin.equals(that.tenantAdmin))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantAdmin = true && (isSetTenantAdmin());
      builder.append(present_tenantAdmin);
      if (present_tenantAdmin)
        builder.append(tenantAdmin);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTenantAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantAdmin()).compareTo(other.isSetTenantAdmin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantAdmin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantAdmin, other.tenantAdmin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTenantAdmin_args(");
      boolean first = true;

      sb.append("tenantAdmin:");
      if (this.tenantAdmin == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantAdmin);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTenantAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public editTenantAdmin_argsStandardScheme getScheme() {
        return new editTenantAdmin_argsStandardScheme();
      }
    }

    private static class editTenantAdmin_argsStandardScheme extends StandardScheme<editTenantAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTenantAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ADMIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tenantAdmin = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.tenantAdmin.read(iprot);
                struct.setTenantAdminIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTenantAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantAdmin != null) {
          oprot.writeFieldBegin(TENANT_ADMIN_FIELD_DESC);
          struct.tenantAdmin.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTenantAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public editTenantAdmin_argsTupleScheme getScheme() {
        return new editTenantAdmin_argsTupleScheme();
      }
    }

    private static class editTenantAdmin_argsTupleScheme extends TupleScheme<editTenantAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantAdmin()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantAdmin()) {
          struct.tenantAdmin.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantAdmin = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.tenantAdmin.read(iprot);
          struct.setTenantAdminIsSet(true);
        }
      }
    }

  }

  public static class editTenantAdmin_result implements org.apache.thrift.TBase<editTenantAdmin_result, editTenantAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<editTenantAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTenantAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTenantAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTenantAdmin_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTenantAdmin_result.class, metaDataMap);
    }

    public editTenantAdmin_result() {
    }

    public editTenantAdmin_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTenantAdmin_result(editTenantAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editTenantAdmin_result deepCopy() {
      return new editTenantAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editTenantAdmin_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editTenantAdmin_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTenantAdmin_result)
        return this.equals((editTenantAdmin_result)that);
      return false;
    }

    public boolean equals(editTenantAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTenantAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTenantAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTenantAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public editTenantAdmin_resultStandardScheme getScheme() {
        return new editTenantAdmin_resultStandardScheme();
      }
    }

    private static class editTenantAdmin_resultStandardScheme extends StandardScheme<editTenantAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTenantAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTenantAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTenantAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public editTenantAdmin_resultTupleScheme getScheme() {
        return new editTenantAdmin_resultTupleScheme();
      }
    }

    private static class editTenantAdmin_resultTupleScheme extends TupleScheme<editTenantAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteTenantAdmin_args implements org.apache.thrift.TBase<deleteTenantAdmin_args, deleteTenantAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTenantAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTenantAdmin_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTenantAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTenantAdmin_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTenantAdmin_args.class, metaDataMap);
    }

    public deleteTenantAdmin_args() {
    }

    public deleteTenantAdmin_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTenantAdmin_args(deleteTenantAdmin_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public deleteTenantAdmin_args deepCopy() {
      return new deleteTenantAdmin_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public deleteTenantAdmin_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTenantAdmin_args)
        return this.equals((deleteTenantAdmin_args)that);
      return false;
    }

    public boolean equals(deleteTenantAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTenantAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTenantAdmin_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTenantAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTenantAdmin_argsStandardScheme getScheme() {
        return new deleteTenantAdmin_argsStandardScheme();
      }
    }

    private static class deleteTenantAdmin_argsStandardScheme extends StandardScheme<deleteTenantAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTenantAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTenantAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTenantAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTenantAdmin_argsTupleScheme getScheme() {
        return new deleteTenantAdmin_argsTupleScheme();
      }
    }

    private static class deleteTenantAdmin_argsTupleScheme extends TupleScheme<deleteTenantAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTenantAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class deleteTenantAdmin_result implements org.apache.thrift.TBase<deleteTenantAdmin_result, deleteTenantAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTenantAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTenantAdmin_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTenantAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTenantAdmin_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTenantAdmin_result.class, metaDataMap);
    }

    public deleteTenantAdmin_result() {
    }

    public deleteTenantAdmin_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTenantAdmin_result(deleteTenantAdmin_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteTenantAdmin_result deepCopy() {
      return new deleteTenantAdmin_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteTenantAdmin_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTenantAdmin_result)
        return this.equals((deleteTenantAdmin_result)that);
      return false;
    }

    public boolean equals(deleteTenantAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTenantAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTenantAdmin_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTenantAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTenantAdmin_resultStandardScheme getScheme() {
        return new deleteTenantAdmin_resultStandardScheme();
      }
    }

    private static class deleteTenantAdmin_resultStandardScheme extends StandardScheme<deleteTenantAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTenantAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTenantAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTenantAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTenantAdmin_resultTupleScheme getScheme() {
        return new deleteTenantAdmin_resultTupleScheme();
      }
    }

    private static class deleteTenantAdmin_resultTupleScheme extends TupleScheme<deleteTenantAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTenantAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getApplicationsByTenantId_args implements org.apache.thrift.TBase<getApplicationsByTenantId_args, getApplicationsByTenantId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationsByTenantId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationsByTenantId_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationsByTenantId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationsByTenantId_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationsByTenantId_args.class, metaDataMap);
    }

    public getApplicationsByTenantId_args() {
    }

    public getApplicationsByTenantId_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationsByTenantId_args(getApplicationsByTenantId_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public getApplicationsByTenantId_args deepCopy() {
      return new getApplicationsByTenantId_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public getApplicationsByTenantId_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationsByTenantId_args)
        return this.equals((getApplicationsByTenantId_args)that);
      return false;
    }

    public boolean equals(getApplicationsByTenantId_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationsByTenantId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationsByTenantId_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationsByTenantId_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationsByTenantId_argsStandardScheme getScheme() {
        return new getApplicationsByTenantId_argsStandardScheme();
      }
    }

    private static class getApplicationsByTenantId_argsStandardScheme extends StandardScheme<getApplicationsByTenantId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationsByTenantId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationsByTenantId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationsByTenantId_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationsByTenantId_argsTupleScheme getScheme() {
        return new getApplicationsByTenantId_argsTupleScheme();
      }
    }

    private static class getApplicationsByTenantId_argsTupleScheme extends TupleScheme<getApplicationsByTenantId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationsByTenantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationsByTenantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class getApplicationsByTenantId_result implements org.apache.thrift.TBase<getApplicationsByTenantId_result, getApplicationsByTenantId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationsByTenantId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationsByTenantId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationsByTenantId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationsByTenantId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationsByTenantId_result.class, metaDataMap);
    }

    public getApplicationsByTenantId_result() {
    }

    public getApplicationsByTenantId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationsByTenantId_result(getApplicationsByTenantId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getApplicationsByTenantId_result deepCopy() {
      return new getApplicationsByTenantId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getApplicationsByTenantId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getApplicationsByTenantId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationsByTenantId_result)
        return this.equals((getApplicationsByTenantId_result)that);
      return false;
    }

    public boolean equals(getApplicationsByTenantId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationsByTenantId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationsByTenantId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationsByTenantId_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationsByTenantId_resultStandardScheme getScheme() {
        return new getApplicationsByTenantId_resultStandardScheme();
      }
    }

    private static class getApplicationsByTenantId_resultStandardScheme extends StandardScheme<getApplicationsByTenantId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationsByTenantId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem34;
                    _elem34 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationsByTenantId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationsByTenantId_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationsByTenantId_resultTupleScheme getScheme() {
        return new getApplicationsByTenantId_resultTupleScheme();
      }
    }

    private static class getApplicationsByTenantId_resultTupleScheme extends TupleScheme<getApplicationsByTenantId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationsByTenantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationsByTenantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem39;
              _elem39 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getApplication_args implements org.apache.thrift.TBase<getApplication_args, getApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplication_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplication_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplication_args.class, metaDataMap);
    }

    public getApplication_args() {
    }

    public getApplication_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplication_args(getApplication_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getApplication_args deepCopy() {
      return new getApplication_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getApplication_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplication_args)
        return this.equals((getApplication_args)that);
      return false;
    }

    public boolean equals(getApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplication_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplication_argsStandardSchemeFactory implements SchemeFactory {
      public getApplication_argsStandardScheme getScheme() {
        return new getApplication_argsStandardScheme();
      }
    }

    private static class getApplication_argsStandardScheme extends StandardScheme<getApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplication_argsTupleSchemeFactory implements SchemeFactory {
      public getApplication_argsTupleScheme getScheme() {
        return new getApplication_argsTupleScheme();
      }
    }

    private static class getApplication_argsTupleScheme extends TupleScheme<getApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getApplication_result implements org.apache.thrift.TBase<getApplication_result, getApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplication_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplication_result.class, metaDataMap);
    }

    public getApplication_result() {
    }

    public getApplication_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplication_result(getApplication_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getApplication_result deepCopy() {
      return new getApplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getApplication_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getApplication_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplication_result)
        return this.equals((getApplication_result)that);
      return false;
    }

    public boolean equals(getApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplication_resultStandardSchemeFactory implements SchemeFactory {
      public getApplication_resultStandardScheme getScheme() {
        return new getApplication_resultStandardScheme();
      }
    }

    private static class getApplication_resultStandardScheme extends StandardScheme<getApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplication_resultTupleSchemeFactory implements SchemeFactory {
      public getApplication_resultTupleScheme getScheme() {
        return new getApplication_resultTupleScheme();
      }
    }

    private static class getApplication_resultTupleScheme extends TupleScheme<getApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getApplicationByApplicationToken_args implements org.apache.thrift.TBase<getApplicationByApplicationToken_args, getApplicationByApplicationToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationByApplicationToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationByApplicationToken_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationToken", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationByApplicationToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationByApplicationToken_argsTupleSchemeFactory());
    }

    public String applicationToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_TOKEN((short)1, "applicationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_TOKEN
            return APPLICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("applicationToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationByApplicationToken_args.class, metaDataMap);
    }

    public getApplicationByApplicationToken_args() {
    }

    public getApplicationByApplicationToken_args(
      String applicationToken)
    {
      this();
      this.applicationToken = applicationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationByApplicationToken_args(getApplicationByApplicationToken_args other) {
      if (other.isSetApplicationToken()) {
        this.applicationToken = other.applicationToken;
      }
    }

    public getApplicationByApplicationToken_args deepCopy() {
      return new getApplicationByApplicationToken_args(this);
    }

    @Override
    public void clear() {
      this.applicationToken = null;
    }

    public String getApplicationToken() {
      return this.applicationToken;
    }

    public getApplicationByApplicationToken_args setApplicationToken(String applicationToken) {
      this.applicationToken = applicationToken;
      return this;
    }

    public void unsetApplicationToken() {
      this.applicationToken = null;
    }

    /** Returns true if field applicationToken is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationToken() {
      return this.applicationToken != null;
    }

    public void setApplicationTokenIsSet(boolean value) {
      if (!value) {
        this.applicationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_TOKEN:
        if (value == null) {
          unsetApplicationToken();
        } else {
          setApplicationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_TOKEN:
        return getApplicationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_TOKEN:
        return isSetApplicationToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationByApplicationToken_args)
        return this.equals((getApplicationByApplicationToken_args)that);
      return false;
    }

    public boolean equals(getApplicationByApplicationToken_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationToken = true && this.isSetApplicationToken();
      boolean that_present_applicationToken = true && that.isSetApplicationToken();
      if (this_present_applicationToken || that_present_applicationToken) {
        if (!(this_present_applicationToken && that_present_applicationToken))
          return false;
        if (!this.applicationToken.equals(that.applicationToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationToken = true && (isSetApplicationToken());
      builder.append(present_applicationToken);
      if (present_applicationToken)
        builder.append(applicationToken);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationByApplicationToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationToken()).compareTo(other.isSetApplicationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationToken, other.applicationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationByApplicationToken_args(");
      boolean first = true;

      sb.append("applicationToken:");
      if (this.applicationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationByApplicationToken_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationByApplicationToken_argsStandardScheme getScheme() {
        return new getApplicationByApplicationToken_argsStandardScheme();
      }
    }

    private static class getApplicationByApplicationToken_argsStandardScheme extends StandardScheme<getApplicationByApplicationToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationByApplicationToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationToken = iprot.readString();
                struct.setApplicationTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationByApplicationToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationToken != null) {
          oprot.writeFieldBegin(APPLICATION_TOKEN_FIELD_DESC);
          oprot.writeString(struct.applicationToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationByApplicationToken_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationByApplicationToken_argsTupleScheme getScheme() {
        return new getApplicationByApplicationToken_argsTupleScheme();
      }
    }

    private static class getApplicationByApplicationToken_argsTupleScheme extends TupleScheme<getApplicationByApplicationToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationByApplicationToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationToken()) {
          oprot.writeString(struct.applicationToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationByApplicationToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationToken = iprot.readString();
          struct.setApplicationTokenIsSet(true);
        }
      }
    }

  }

  public static class getApplicationByApplicationToken_result implements org.apache.thrift.TBase<getApplicationByApplicationToken_result, getApplicationByApplicationToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationByApplicationToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationByApplicationToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationByApplicationToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationByApplicationToken_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationByApplicationToken_result.class, metaDataMap);
    }

    public getApplicationByApplicationToken_result() {
    }

    public getApplicationByApplicationToken_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationByApplicationToken_result(getApplicationByApplicationToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getApplicationByApplicationToken_result deepCopy() {
      return new getApplicationByApplicationToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getApplicationByApplicationToken_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getApplicationByApplicationToken_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationByApplicationToken_result)
        return this.equals((getApplicationByApplicationToken_result)that);
      return false;
    }

    public boolean equals(getApplicationByApplicationToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationByApplicationToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationByApplicationToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationByApplicationToken_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationByApplicationToken_resultStandardScheme getScheme() {
        return new getApplicationByApplicationToken_resultStandardScheme();
      }
    }

    private static class getApplicationByApplicationToken_resultStandardScheme extends StandardScheme<getApplicationByApplicationToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationByApplicationToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationByApplicationToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationByApplicationToken_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationByApplicationToken_resultTupleScheme getScheme() {
        return new getApplicationByApplicationToken_resultTupleScheme();
      }
    }

    private static class getApplicationByApplicationToken_resultTupleScheme extends TupleScheme<getApplicationByApplicationToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationByApplicationToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationByApplicationToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editApplication_args implements org.apache.thrift.TBase<editApplication_args, editApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<editApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editApplication_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("application", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editApplication_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION((short)1, "application");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION
            return APPLICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("application", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editApplication_args.class, metaDataMap);
    }

    public editApplication_args() {
    }

    public editApplication_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application)
    {
      this();
      this.application = application;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editApplication_args(editApplication_args other) {
      if (other.isSetApplication()) {
        this.application = other.application;
      }
    }

    public editApplication_args deepCopy() {
      return new editApplication_args(this);
    }

    @Override
    public void clear() {
      this.application = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplication() {
      return this.application;
    }

    public editApplication_args setApplication(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct application) {
      this.application = application;
      return this;
    }

    public void unsetApplication() {
      this.application = null;
    }

    /** Returns true if field application is set (has been assigned a value) and false otherwise */
    public boolean isSetApplication() {
      return this.application != null;
    }

    public void setApplicationIsSet(boolean value) {
      if (!value) {
        this.application = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION:
        if (value == null) {
          unsetApplication();
        } else {
          setApplication((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION:
        return getApplication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION:
        return isSetApplication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editApplication_args)
        return this.equals((editApplication_args)that);
      return false;
    }

    public boolean equals(editApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_application = true && this.isSetApplication();
      boolean that_present_application = true && that.isSetApplication();
      if (this_present_application || that_present_application) {
        if (!(this_present_application && that_present_application))
          return false;
        if (!this.application.equals(that.application))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_application = true && (isSetApplication());
      builder.append(present_application);
      if (present_application)
        builder.append(application);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplication()).compareTo(other.isSetApplication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application, other.application);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editApplication_args(");
      boolean first = true;

      sb.append("application:");
      if (this.application == null) {
        sb.append("null");
      } else {
        sb.append(this.application);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editApplication_argsStandardSchemeFactory implements SchemeFactory {
      public editApplication_argsStandardScheme getScheme() {
        return new editApplication_argsStandardScheme();
      }
    }

    private static class editApplication_argsStandardScheme extends StandardScheme<editApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.application = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.application.read(iprot);
                struct.setApplicationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.application != null) {
          oprot.writeFieldBegin(APPLICATION_FIELD_DESC);
          struct.application.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editApplication_argsTupleSchemeFactory implements SchemeFactory {
      public editApplication_argsTupleScheme getScheme() {
        return new editApplication_argsTupleScheme();
      }
    }

    private static class editApplication_argsTupleScheme extends TupleScheme<editApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplication()) {
          struct.application.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.application = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.application.read(iprot);
          struct.setApplicationIsSet(true);
        }
      }
    }

  }

  public static class editApplication_result implements org.apache.thrift.TBase<editApplication_result, editApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<editApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editApplication_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editApplication_result.class, metaDataMap);
    }

    public editApplication_result() {
    }

    public editApplication_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editApplication_result(editApplication_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editApplication_result deepCopy() {
      return new editApplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editApplication_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editApplication_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editApplication_result)
        return this.equals((editApplication_result)that);
      return false;
    }

    public boolean equals(editApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editApplication_resultStandardSchemeFactory implements SchemeFactory {
      public editApplication_resultStandardScheme getScheme() {
        return new editApplication_resultStandardScheme();
      }
    }

    private static class editApplication_resultStandardScheme extends StandardScheme<editApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editApplication_resultTupleSchemeFactory implements SchemeFactory {
      public editApplication_resultTupleScheme getScheme() {
        return new editApplication_resultTupleScheme();
      }
    }

    private static class editApplication_resultTupleScheme extends TupleScheme<editApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteApplication_args implements org.apache.thrift.TBase<deleteApplication_args, deleteApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplication_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplication_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplication_args.class, metaDataMap);
    }

    public deleteApplication_args() {
    }

    public deleteApplication_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplication_args(deleteApplication_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public deleteApplication_args deepCopy() {
      return new deleteApplication_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public deleteApplication_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplication_args)
        return this.equals((deleteApplication_args)that);
      return false;
    }

    public boolean equals(deleteApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplication_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplication_argsStandardSchemeFactory implements SchemeFactory {
      public deleteApplication_argsStandardScheme getScheme() {
        return new deleteApplication_argsStandardScheme();
      }
    }

    private static class deleteApplication_argsStandardScheme extends StandardScheme<deleteApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplication_argsTupleSchemeFactory implements SchemeFactory {
      public deleteApplication_argsTupleScheme getScheme() {
        return new deleteApplication_argsTupleScheme();
      }
    }

    private static class deleteApplication_argsTupleScheme extends TupleScheme<deleteApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class deleteApplication_result implements org.apache.thrift.TBase<deleteApplication_result, deleteApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplication_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplication_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplication_result.class, metaDataMap);
    }

    public deleteApplication_result() {
    }

    public deleteApplication_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplication_result(deleteApplication_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteApplication_result deepCopy() {
      return new deleteApplication_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteApplication_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplication_result)
        return this.equals((deleteApplication_result)that);
      return false;
    }

    public boolean equals(deleteApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplication_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplication_resultStandardSchemeFactory implements SchemeFactory {
      public deleteApplication_resultStandardScheme getScheme() {
        return new deleteApplication_resultStandardScheme();
      }
    }

    private static class deleteApplication_resultStandardScheme extends StandardScheme<deleteApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplication_resultTupleSchemeFactory implements SchemeFactory {
      public deleteApplication_resultTupleScheme getScheme() {
        return new deleteApplication_resultTupleScheme();
      }
    }

    private static class deleteApplication_resultTupleScheme extends TupleScheme<deleteApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchemaVersionsByApplicationId_args implements org.apache.thrift.TBase<getConfigurationSchemaVersionsByApplicationId_args, getConfigurationSchemaVersionsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchemaVersionsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchemaVersionsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchemaVersionsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchemaVersionsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchemaVersionsByApplicationId_args.class, metaDataMap);
    }

    public getConfigurationSchemaVersionsByApplicationId_args() {
    }

    public getConfigurationSchemaVersionsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchemaVersionsByApplicationId_args(getConfigurationSchemaVersionsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getConfigurationSchemaVersionsByApplicationId_args deepCopy() {
      return new getConfigurationSchemaVersionsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getConfigurationSchemaVersionsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchemaVersionsByApplicationId_args)
        return this.equals((getConfigurationSchemaVersionsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getConfigurationSchemaVersionsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchemaVersionsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchemaVersionsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchemaVersionsByApplicationId_argsStandardScheme getScheme() {
        return new getConfigurationSchemaVersionsByApplicationId_argsStandardScheme();
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_argsStandardScheme extends StandardScheme<getConfigurationSchemaVersionsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchemaVersionsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchemaVersionsByApplicationId_argsTupleScheme getScheme() {
        return new getConfigurationSchemaVersionsByApplicationId_argsTupleScheme();
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_argsTupleScheme extends TupleScheme<getConfigurationSchemaVersionsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchemaVersionsByApplicationId_result implements org.apache.thrift.TBase<getConfigurationSchemaVersionsByApplicationId_result, getConfigurationSchemaVersionsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchemaVersionsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchemaVersionsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchemaVersionsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchemaVersionsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchemaVersionsByApplicationId_result.class, metaDataMap);
    }

    public getConfigurationSchemaVersionsByApplicationId_result() {
    }

    public getConfigurationSchemaVersionsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchemaVersionsByApplicationId_result(getConfigurationSchemaVersionsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfigurationSchemaVersionsByApplicationId_result deepCopy() {
      return new getConfigurationSchemaVersionsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getConfigurationSchemaVersionsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfigurationSchemaVersionsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchemaVersionsByApplicationId_result)
        return this.equals((getConfigurationSchemaVersionsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getConfigurationSchemaVersionsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchemaVersionsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchemaVersionsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchemaVersionsByApplicationId_resultStandardScheme getScheme() {
        return new getConfigurationSchemaVersionsByApplicationId_resultStandardScheme();
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_resultStandardScheme extends StandardScheme<getConfigurationSchemaVersionsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem42;
                    _elem42 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchemaVersionsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchemaVersionsByApplicationId_resultTupleScheme getScheme() {
        return new getConfigurationSchemaVersionsByApplicationId_resultTupleScheme();
      }
    }

    private static class getConfigurationSchemaVersionsByApplicationId_resultTupleScheme extends TupleScheme<getConfigurationSchemaVersionsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem47;
              _elem47 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchemasByApplicationId_args implements org.apache.thrift.TBase<getConfigurationSchemasByApplicationId_args, getConfigurationSchemasByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchemasByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchemasByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchemasByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchemasByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchemasByApplicationId_args.class, metaDataMap);
    }

    public getConfigurationSchemasByApplicationId_args() {
    }

    public getConfigurationSchemasByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchemasByApplicationId_args(getConfigurationSchemasByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getConfigurationSchemasByApplicationId_args deepCopy() {
      return new getConfigurationSchemasByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getConfigurationSchemasByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchemasByApplicationId_args)
        return this.equals((getConfigurationSchemasByApplicationId_args)that);
      return false;
    }

    public boolean equals(getConfigurationSchemasByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchemasByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchemasByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchemasByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchemasByApplicationId_argsStandardScheme getScheme() {
        return new getConfigurationSchemasByApplicationId_argsStandardScheme();
      }
    }

    private static class getConfigurationSchemasByApplicationId_argsStandardScheme extends StandardScheme<getConfigurationSchemasByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchemasByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchemasByApplicationId_argsTupleScheme getScheme() {
        return new getConfigurationSchemasByApplicationId_argsTupleScheme();
      }
    }

    private static class getConfigurationSchemasByApplicationId_argsTupleScheme extends TupleScheme<getConfigurationSchemasByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchemasByApplicationId_result implements org.apache.thrift.TBase<getConfigurationSchemasByApplicationId_result, getConfigurationSchemasByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchemasByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchemasByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchemasByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchemasByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchemasByApplicationId_result.class, metaDataMap);
    }

    public getConfigurationSchemasByApplicationId_result() {
    }

    public getConfigurationSchemasByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchemasByApplicationId_result(getConfigurationSchemasByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfigurationSchemasByApplicationId_result deepCopy() {
      return new getConfigurationSchemasByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getConfigurationSchemasByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfigurationSchemasByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchemasByApplicationId_result)
        return this.equals((getConfigurationSchemasByApplicationId_result)that);
      return false;
    }

    public boolean equals(getConfigurationSchemasByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchemasByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchemasByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchemasByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchemasByApplicationId_resultStandardScheme getScheme() {
        return new getConfigurationSchemasByApplicationId_resultStandardScheme();
      }
    }

    private static class getConfigurationSchemasByApplicationId_resultStandardScheme extends StandardScheme<getConfigurationSchemasByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem50;
                    _elem50 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchemasByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchemasByApplicationId_resultTupleScheme getScheme() {
        return new getConfigurationSchemasByApplicationId_resultTupleScheme();
      }
    }

    private static class getConfigurationSchemasByApplicationId_resultTupleScheme extends TupleScheme<getConfigurationSchemasByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem55;
              _elem55 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchema_args implements org.apache.thrift.TBase<getConfigurationSchema_args, getConfigurationSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchema_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationSchemaId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchema_argsTupleSchemeFactory());
    }

    public String configurationSchemaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION_SCHEMA_ID((short)1, "configurationSchemaId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION_SCHEMA_ID
            return CONFIGURATION_SCHEMA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION_SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("configurationSchemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchema_args.class, metaDataMap);
    }

    public getConfigurationSchema_args() {
    }

    public getConfigurationSchema_args(
      String configurationSchemaId)
    {
      this();
      this.configurationSchemaId = configurationSchemaId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchema_args(getConfigurationSchema_args other) {
      if (other.isSetConfigurationSchemaId()) {
        this.configurationSchemaId = other.configurationSchemaId;
      }
    }

    public getConfigurationSchema_args deepCopy() {
      return new getConfigurationSchema_args(this);
    }

    @Override
    public void clear() {
      this.configurationSchemaId = null;
    }

    public String getConfigurationSchemaId() {
      return this.configurationSchemaId;
    }

    public getConfigurationSchema_args setConfigurationSchemaId(String configurationSchemaId) {
      this.configurationSchemaId = configurationSchemaId;
      return this;
    }

    public void unsetConfigurationSchemaId() {
      this.configurationSchemaId = null;
    }

    /** Returns true if field configurationSchemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationSchemaId() {
      return this.configurationSchemaId != null;
    }

    public void setConfigurationSchemaIdIsSet(boolean value) {
      if (!value) {
        this.configurationSchemaId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION_SCHEMA_ID:
        if (value == null) {
          unsetConfigurationSchemaId();
        } else {
          setConfigurationSchemaId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION_SCHEMA_ID:
        return getConfigurationSchemaId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION_SCHEMA_ID:
        return isSetConfigurationSchemaId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchema_args)
        return this.equals((getConfigurationSchema_args)that);
      return false;
    }

    public boolean equals(getConfigurationSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_configurationSchemaId = true && this.isSetConfigurationSchemaId();
      boolean that_present_configurationSchemaId = true && that.isSetConfigurationSchemaId();
      if (this_present_configurationSchemaId || that_present_configurationSchemaId) {
        if (!(this_present_configurationSchemaId && that_present_configurationSchemaId))
          return false;
        if (!this.configurationSchemaId.equals(that.configurationSchemaId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configurationSchemaId = true && (isSetConfigurationSchemaId());
      builder.append(present_configurationSchemaId);
      if (present_configurationSchemaId)
        builder.append(configurationSchemaId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigurationSchemaId()).compareTo(other.isSetConfigurationSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationSchemaId, other.configurationSchemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchema_args(");
      boolean first = true;

      sb.append("configurationSchemaId:");
      if (this.configurationSchemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationSchemaId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchema_argsStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchema_argsStandardScheme getScheme() {
        return new getConfigurationSchema_argsStandardScheme();
      }
    }

    private static class getConfigurationSchema_argsStandardScheme extends StandardScheme<getConfigurationSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION_SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurationSchemaId = iprot.readString();
                struct.setConfigurationSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurationSchemaId != null) {
          oprot.writeFieldBegin(CONFIGURATION_SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.configurationSchemaId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchema_argsTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchema_argsTupleScheme getScheme() {
        return new getConfigurationSchema_argsTupleScheme();
      }
    }

    private static class getConfigurationSchema_argsTupleScheme extends TupleScheme<getConfigurationSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurationSchemaId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigurationSchemaId()) {
          oprot.writeString(struct.configurationSchemaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configurationSchemaId = iprot.readString();
          struct.setConfigurationSchemaIdIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationSchema_result implements org.apache.thrift.TBase<getConfigurationSchema_result, getConfigurationSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationSchema_result.class, metaDataMap);
    }

    public getConfigurationSchema_result() {
    }

    public getConfigurationSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationSchema_result(getConfigurationSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfigurationSchema_result deepCopy() {
      return new getConfigurationSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getConfigurationSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfigurationSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationSchema_result)
        return this.equals((getConfigurationSchema_result)that);
      return false;
    }

    public boolean equals(getConfigurationSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationSchema_resultStandardSchemeFactory implements SchemeFactory {
      public getConfigurationSchema_resultStandardScheme getScheme() {
        return new getConfigurationSchema_resultStandardScheme();
      }
    }

    private static class getConfigurationSchema_resultStandardScheme extends StandardScheme<getConfigurationSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationSchema_resultTupleSchemeFactory implements SchemeFactory {
      public getConfigurationSchema_resultTupleScheme getScheme() {
        return new getConfigurationSchema_resultTupleScheme();
      }
    }

    private static class getConfigurationSchema_resultTupleScheme extends TupleScheme<getConfigurationSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editConfigurationSchema_args implements org.apache.thrift.TBase<editConfigurationSchema_args, editConfigurationSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<editConfigurationSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editConfigurationSchema_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationSchema", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editConfigurationSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editConfigurationSchema_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION_SCHEMA((short)1, "configurationSchema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION_SCHEMA
            return CONFIGURATION_SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("configurationSchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editConfigurationSchema_args.class, metaDataMap);
    }

    public editConfigurationSchema_args() {
    }

    public editConfigurationSchema_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema)
    {
      this();
      this.configurationSchema = configurationSchema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editConfigurationSchema_args(editConfigurationSchema_args other) {
      if (other.isSetConfigurationSchema()) {
        this.configurationSchema = other.configurationSchema;
      }
    }

    public editConfigurationSchema_args deepCopy() {
      return new editConfigurationSchema_args(this);
    }

    @Override
    public void clear() {
      this.configurationSchema = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfigurationSchema() {
      return this.configurationSchema;
    }

    public editConfigurationSchema_args setConfigurationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configurationSchema) {
      this.configurationSchema = configurationSchema;
      return this;
    }

    public void unsetConfigurationSchema() {
      this.configurationSchema = null;
    }

    /** Returns true if field configurationSchema is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationSchema() {
      return this.configurationSchema != null;
    }

    public void setConfigurationSchemaIsSet(boolean value) {
      if (!value) {
        this.configurationSchema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION_SCHEMA:
        if (value == null) {
          unsetConfigurationSchema();
        } else {
          setConfigurationSchema((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION_SCHEMA:
        return getConfigurationSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION_SCHEMA:
        return isSetConfigurationSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editConfigurationSchema_args)
        return this.equals((editConfigurationSchema_args)that);
      return false;
    }

    public boolean equals(editConfigurationSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_configurationSchema = true && this.isSetConfigurationSchema();
      boolean that_present_configurationSchema = true && that.isSetConfigurationSchema();
      if (this_present_configurationSchema || that_present_configurationSchema) {
        if (!(this_present_configurationSchema && that_present_configurationSchema))
          return false;
        if (!this.configurationSchema.equals(that.configurationSchema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configurationSchema = true && (isSetConfigurationSchema());
      builder.append(present_configurationSchema);
      if (present_configurationSchema)
        builder.append(configurationSchema);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editConfigurationSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigurationSchema()).compareTo(other.isSetConfigurationSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationSchema, other.configurationSchema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editConfigurationSchema_args(");
      boolean first = true;

      sb.append("configurationSchema:");
      if (this.configurationSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationSchema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editConfigurationSchema_argsStandardSchemeFactory implements SchemeFactory {
      public editConfigurationSchema_argsStandardScheme getScheme() {
        return new editConfigurationSchema_argsStandardScheme();
      }
    }

    private static class editConfigurationSchema_argsStandardScheme extends StandardScheme<editConfigurationSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editConfigurationSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION_SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configurationSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.configurationSchema.read(iprot);
                struct.setConfigurationSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editConfigurationSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurationSchema != null) {
          oprot.writeFieldBegin(CONFIGURATION_SCHEMA_FIELD_DESC);
          struct.configurationSchema.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editConfigurationSchema_argsTupleSchemeFactory implements SchemeFactory {
      public editConfigurationSchema_argsTupleScheme getScheme() {
        return new editConfigurationSchema_argsTupleScheme();
      }
    }

    private static class editConfigurationSchema_argsTupleScheme extends TupleScheme<editConfigurationSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editConfigurationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurationSchema()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigurationSchema()) {
          struct.configurationSchema.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editConfigurationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configurationSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.configurationSchema.read(iprot);
          struct.setConfigurationSchemaIsSet(true);
        }
      }
    }

  }

  public static class editConfigurationSchema_result implements org.apache.thrift.TBase<editConfigurationSchema_result, editConfigurationSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<editConfigurationSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editConfigurationSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editConfigurationSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editConfigurationSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editConfigurationSchema_result.class, metaDataMap);
    }

    public editConfigurationSchema_result() {
    }

    public editConfigurationSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editConfigurationSchema_result(editConfigurationSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editConfigurationSchema_result deepCopy() {
      return new editConfigurationSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editConfigurationSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editConfigurationSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editConfigurationSchema_result)
        return this.equals((editConfigurationSchema_result)that);
      return false;
    }

    public boolean equals(editConfigurationSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editConfigurationSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editConfigurationSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editConfigurationSchema_resultStandardSchemeFactory implements SchemeFactory {
      public editConfigurationSchema_resultStandardScheme getScheme() {
        return new editConfigurationSchema_resultStandardScheme();
      }
    }

    private static class editConfigurationSchema_resultStandardScheme extends StandardScheme<editConfigurationSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editConfigurationSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editConfigurationSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editConfigurationSchema_resultTupleSchemeFactory implements SchemeFactory {
      public editConfigurationSchema_resultTupleScheme getScheme() {
        return new editConfigurationSchema_resultTupleScheme();
      }
    }

    private static class editConfigurationSchema_resultTupleScheme extends TupleScheme<editConfigurationSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editConfigurationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editConfigurationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchemaVersionsByApplicationId_args implements org.apache.thrift.TBase<getProfileSchemaVersionsByApplicationId_args, getProfileSchemaVersionsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchemaVersionsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchemaVersionsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchemaVersionsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchemaVersionsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchemaVersionsByApplicationId_args.class, metaDataMap);
    }

    public getProfileSchemaVersionsByApplicationId_args() {
    }

    public getProfileSchemaVersionsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchemaVersionsByApplicationId_args(getProfileSchemaVersionsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getProfileSchemaVersionsByApplicationId_args deepCopy() {
      return new getProfileSchemaVersionsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getProfileSchemaVersionsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchemaVersionsByApplicationId_args)
        return this.equals((getProfileSchemaVersionsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getProfileSchemaVersionsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchemaVersionsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchemaVersionsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileSchemaVersionsByApplicationId_argsStandardScheme getScheme() {
        return new getProfileSchemaVersionsByApplicationId_argsStandardScheme();
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_argsStandardScheme extends StandardScheme<getProfileSchemaVersionsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchemaVersionsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileSchemaVersionsByApplicationId_argsTupleScheme getScheme() {
        return new getProfileSchemaVersionsByApplicationId_argsTupleScheme();
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_argsTupleScheme extends TupleScheme<getProfileSchemaVersionsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchemaVersionsByApplicationId_result implements org.apache.thrift.TBase<getProfileSchemaVersionsByApplicationId_result, getProfileSchemaVersionsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchemaVersionsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchemaVersionsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchemaVersionsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchemaVersionsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchemaVersionsByApplicationId_result.class, metaDataMap);
    }

    public getProfileSchemaVersionsByApplicationId_result() {
    }

    public getProfileSchemaVersionsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchemaVersionsByApplicationId_result(getProfileSchemaVersionsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileSchemaVersionsByApplicationId_result deepCopy() {
      return new getProfileSchemaVersionsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getProfileSchemaVersionsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileSchemaVersionsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchemaVersionsByApplicationId_result)
        return this.equals((getProfileSchemaVersionsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getProfileSchemaVersionsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchemaVersionsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchemaVersionsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileSchemaVersionsByApplicationId_resultStandardScheme getScheme() {
        return new getProfileSchemaVersionsByApplicationId_resultStandardScheme();
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_resultStandardScheme extends StandardScheme<getProfileSchemaVersionsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem58;
                    _elem58 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchemaVersionsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileSchemaVersionsByApplicationId_resultTupleScheme getScheme() {
        return new getProfileSchemaVersionsByApplicationId_resultTupleScheme();
      }
    }

    private static class getProfileSchemaVersionsByApplicationId_resultTupleScheme extends TupleScheme<getProfileSchemaVersionsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem63;
              _elem63 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchemasByApplicationId_args implements org.apache.thrift.TBase<getProfileSchemasByApplicationId_args, getProfileSchemasByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchemasByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchemasByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchemasByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchemasByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchemasByApplicationId_args.class, metaDataMap);
    }

    public getProfileSchemasByApplicationId_args() {
    }

    public getProfileSchemasByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchemasByApplicationId_args(getProfileSchemasByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getProfileSchemasByApplicationId_args deepCopy() {
      return new getProfileSchemasByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getProfileSchemasByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchemasByApplicationId_args)
        return this.equals((getProfileSchemasByApplicationId_args)that);
      return false;
    }

    public boolean equals(getProfileSchemasByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchemasByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchemasByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchemasByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileSchemasByApplicationId_argsStandardScheme getScheme() {
        return new getProfileSchemasByApplicationId_argsStandardScheme();
      }
    }

    private static class getProfileSchemasByApplicationId_argsStandardScheme extends StandardScheme<getProfileSchemasByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchemasByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileSchemasByApplicationId_argsTupleScheme getScheme() {
        return new getProfileSchemasByApplicationId_argsTupleScheme();
      }
    }

    private static class getProfileSchemasByApplicationId_argsTupleScheme extends TupleScheme<getProfileSchemasByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchemasByApplicationId_result implements org.apache.thrift.TBase<getProfileSchemasByApplicationId_result, getProfileSchemasByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchemasByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchemasByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchemasByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchemasByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchemasByApplicationId_result.class, metaDataMap);
    }

    public getProfileSchemasByApplicationId_result() {
    }

    public getProfileSchemasByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchemasByApplicationId_result(getProfileSchemasByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileSchemasByApplicationId_result deepCopy() {
      return new getProfileSchemasByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getProfileSchemasByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileSchemasByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchemasByApplicationId_result)
        return this.equals((getProfileSchemasByApplicationId_result)that);
      return false;
    }

    public boolean equals(getProfileSchemasByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchemasByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchemasByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchemasByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileSchemasByApplicationId_resultStandardScheme getScheme() {
        return new getProfileSchemasByApplicationId_resultStandardScheme();
      }
    }

    private static class getProfileSchemasByApplicationId_resultStandardScheme extends StandardScheme<getProfileSchemasByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem66;
                    _elem66 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchemasByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileSchemasByApplicationId_resultTupleScheme getScheme() {
        return new getProfileSchemasByApplicationId_resultTupleScheme();
      }
    }

    private static class getProfileSchemasByApplicationId_resultTupleScheme extends TupleScheme<getProfileSchemasByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem71;
              _elem71 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchema_args implements org.apache.thrift.TBase<getProfileSchema_args, getProfileSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchema_args");

    private static final org.apache.thrift.protocol.TField PROFILE_SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileSchemaId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchema_argsTupleSchemeFactory());
    }

    public String profileSchemaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_SCHEMA_ID((short)1, "profileSchemaId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_SCHEMA_ID
            return PROFILE_SCHEMA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("profileSchemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchema_args.class, metaDataMap);
    }

    public getProfileSchema_args() {
    }

    public getProfileSchema_args(
      String profileSchemaId)
    {
      this();
      this.profileSchemaId = profileSchemaId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchema_args(getProfileSchema_args other) {
      if (other.isSetProfileSchemaId()) {
        this.profileSchemaId = other.profileSchemaId;
      }
    }

    public getProfileSchema_args deepCopy() {
      return new getProfileSchema_args(this);
    }

    @Override
    public void clear() {
      this.profileSchemaId = null;
    }

    public String getProfileSchemaId() {
      return this.profileSchemaId;
    }

    public getProfileSchema_args setProfileSchemaId(String profileSchemaId) {
      this.profileSchemaId = profileSchemaId;
      return this;
    }

    public void unsetProfileSchemaId() {
      this.profileSchemaId = null;
    }

    /** Returns true if field profileSchemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileSchemaId() {
      return this.profileSchemaId != null;
    }

    public void setProfileSchemaIdIsSet(boolean value) {
      if (!value) {
        this.profileSchemaId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_SCHEMA_ID:
        if (value == null) {
          unsetProfileSchemaId();
        } else {
          setProfileSchemaId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_SCHEMA_ID:
        return getProfileSchemaId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_SCHEMA_ID:
        return isSetProfileSchemaId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchema_args)
        return this.equals((getProfileSchema_args)that);
      return false;
    }

    public boolean equals(getProfileSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_profileSchemaId = true && this.isSetProfileSchemaId();
      boolean that_present_profileSchemaId = true && that.isSetProfileSchemaId();
      if (this_present_profileSchemaId || that_present_profileSchemaId) {
        if (!(this_present_profileSchemaId && that_present_profileSchemaId))
          return false;
        if (!this.profileSchemaId.equals(that.profileSchemaId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileSchemaId = true && (isSetProfileSchemaId());
      builder.append(present_profileSchemaId);
      if (present_profileSchemaId)
        builder.append(profileSchemaId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileSchemaId()).compareTo(other.isSetProfileSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileSchemaId, other.profileSchemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchema_args(");
      boolean first = true;

      sb.append("profileSchemaId:");
      if (this.profileSchemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileSchemaId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchema_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileSchema_argsStandardScheme getScheme() {
        return new getProfileSchema_argsStandardScheme();
      }
    }

    private static class getProfileSchema_argsStandardScheme extends StandardScheme<getProfileSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileSchemaId = iprot.readString();
                struct.setProfileSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileSchemaId != null) {
          oprot.writeFieldBegin(PROFILE_SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.profileSchemaId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchema_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileSchema_argsTupleScheme getScheme() {
        return new getProfileSchema_argsTupleScheme();
      }
    }

    private static class getProfileSchema_argsTupleScheme extends TupleScheme<getProfileSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileSchemaId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileSchemaId()) {
          oprot.writeString(struct.profileSchemaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileSchemaId = iprot.readString();
          struct.setProfileSchemaIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileSchema_result implements org.apache.thrift.TBase<getProfileSchema_result, getProfileSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileSchema_result.class, metaDataMap);
    }

    public getProfileSchema_result() {
    }

    public getProfileSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileSchema_result(getProfileSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileSchema_result deepCopy() {
      return new getProfileSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getProfileSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileSchema_result)
        return this.equals((getProfileSchema_result)that);
      return false;
    }

    public boolean equals(getProfileSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileSchema_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileSchema_resultStandardScheme getScheme() {
        return new getProfileSchema_resultStandardScheme();
      }
    }

    private static class getProfileSchema_resultStandardScheme extends StandardScheme<getProfileSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileSchema_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileSchema_resultTupleScheme getScheme() {
        return new getProfileSchema_resultTupleScheme();
      }
    }

    private static class getProfileSchema_resultTupleScheme extends TupleScheme<getProfileSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editProfileSchema_args implements org.apache.thrift.TBase<editProfileSchema_args, editProfileSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<editProfileSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editProfileSchema_args");

    private static final org.apache.thrift.protocol.TField PROFILE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("profileSchema", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editProfileSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editProfileSchema_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_SCHEMA((short)1, "profileSchema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_SCHEMA
            return PROFILE_SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("profileSchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editProfileSchema_args.class, metaDataMap);
    }

    public editProfileSchema_args() {
    }

    public editProfileSchema_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema)
    {
      this();
      this.profileSchema = profileSchema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editProfileSchema_args(editProfileSchema_args other) {
      if (other.isSetProfileSchema()) {
        this.profileSchema = other.profileSchema;
      }
    }

    public editProfileSchema_args deepCopy() {
      return new editProfileSchema_args(this);
    }

    @Override
    public void clear() {
      this.profileSchema = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileSchema() {
      return this.profileSchema;
    }

    public editProfileSchema_args setProfileSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileSchema) {
      this.profileSchema = profileSchema;
      return this;
    }

    public void unsetProfileSchema() {
      this.profileSchema = null;
    }

    /** Returns true if field profileSchema is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileSchema() {
      return this.profileSchema != null;
    }

    public void setProfileSchemaIsSet(boolean value) {
      if (!value) {
        this.profileSchema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_SCHEMA:
        if (value == null) {
          unsetProfileSchema();
        } else {
          setProfileSchema((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_SCHEMA:
        return getProfileSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_SCHEMA:
        return isSetProfileSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editProfileSchema_args)
        return this.equals((editProfileSchema_args)that);
      return false;
    }

    public boolean equals(editProfileSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_profileSchema = true && this.isSetProfileSchema();
      boolean that_present_profileSchema = true && that.isSetProfileSchema();
      if (this_present_profileSchema || that_present_profileSchema) {
        if (!(this_present_profileSchema && that_present_profileSchema))
          return false;
        if (!this.profileSchema.equals(that.profileSchema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileSchema = true && (isSetProfileSchema());
      builder.append(present_profileSchema);
      if (present_profileSchema)
        builder.append(profileSchema);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editProfileSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileSchema()).compareTo(other.isSetProfileSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileSchema, other.profileSchema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editProfileSchema_args(");
      boolean first = true;

      sb.append("profileSchema:");
      if (this.profileSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.profileSchema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editProfileSchema_argsStandardSchemeFactory implements SchemeFactory {
      public editProfileSchema_argsStandardScheme getScheme() {
        return new editProfileSchema_argsStandardScheme();
      }
    }

    private static class editProfileSchema_argsStandardScheme extends StandardScheme<editProfileSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editProfileSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.profileSchema.read(iprot);
                struct.setProfileSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editProfileSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileSchema != null) {
          oprot.writeFieldBegin(PROFILE_SCHEMA_FIELD_DESC);
          struct.profileSchema.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editProfileSchema_argsTupleSchemeFactory implements SchemeFactory {
      public editProfileSchema_argsTupleScheme getScheme() {
        return new editProfileSchema_argsTupleScheme();
      }
    }

    private static class editProfileSchema_argsTupleScheme extends TupleScheme<editProfileSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editProfileSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileSchema()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileSchema()) {
          struct.profileSchema.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editProfileSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.profileSchema.read(iprot);
          struct.setProfileSchemaIsSet(true);
        }
      }
    }

  }

  public static class editProfileSchema_result implements org.apache.thrift.TBase<editProfileSchema_result, editProfileSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<editProfileSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editProfileSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editProfileSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editProfileSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editProfileSchema_result.class, metaDataMap);
    }

    public editProfileSchema_result() {
    }

    public editProfileSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editProfileSchema_result(editProfileSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editProfileSchema_result deepCopy() {
      return new editProfileSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editProfileSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editProfileSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editProfileSchema_result)
        return this.equals((editProfileSchema_result)that);
      return false;
    }

    public boolean equals(editProfileSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editProfileSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editProfileSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editProfileSchema_resultStandardSchemeFactory implements SchemeFactory {
      public editProfileSchema_resultStandardScheme getScheme() {
        return new editProfileSchema_resultStandardScheme();
      }
    }

    private static class editProfileSchema_resultStandardScheme extends StandardScheme<editProfileSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editProfileSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editProfileSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editProfileSchema_resultTupleSchemeFactory implements SchemeFactory {
      public editProfileSchema_resultTupleScheme getScheme() {
        return new editProfileSchema_resultTupleScheme();
      }
    }

    private static class editProfileSchema_resultTupleScheme extends TupleScheme<editProfileSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editProfileSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editProfileSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemaVersionsByApplicationId_args implements org.apache.thrift.TBase<getLogSchemaVersionsByApplicationId_args, getLogSchemaVersionsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemaVersionsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemaVersionsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemaVersionsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemaVersionsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemaVersionsByApplicationId_args.class, metaDataMap);
    }

    public getLogSchemaVersionsByApplicationId_args() {
    }

    public getLogSchemaVersionsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemaVersionsByApplicationId_args(getLogSchemaVersionsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getLogSchemaVersionsByApplicationId_args deepCopy() {
      return new getLogSchemaVersionsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getLogSchemaVersionsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemaVersionsByApplicationId_args)
        return this.equals((getLogSchemaVersionsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getLogSchemaVersionsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemaVersionsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemaVersionsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemaVersionsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getLogSchemaVersionsByApplicationId_argsStandardScheme getScheme() {
        return new getLogSchemaVersionsByApplicationId_argsStandardScheme();
      }
    }

    private static class getLogSchemaVersionsByApplicationId_argsStandardScheme extends StandardScheme<getLogSchemaVersionsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemaVersionsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getLogSchemaVersionsByApplicationId_argsTupleScheme getScheme() {
        return new getLogSchemaVersionsByApplicationId_argsTupleScheme();
      }
    }

    private static class getLogSchemaVersionsByApplicationId_argsTupleScheme extends TupleScheme<getLogSchemaVersionsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemaVersionsByApplicationId_result implements org.apache.thrift.TBase<getLogSchemaVersionsByApplicationId_result, getLogSchemaVersionsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemaVersionsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemaVersionsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemaVersionsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemaVersionsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemaVersionsByApplicationId_result.class, metaDataMap);
    }

    public getLogSchemaVersionsByApplicationId_result() {
    }

    public getLogSchemaVersionsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemaVersionsByApplicationId_result(getLogSchemaVersionsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogSchemaVersionsByApplicationId_result deepCopy() {
      return new getLogSchemaVersionsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getLogSchemaVersionsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogSchemaVersionsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemaVersionsByApplicationId_result)
        return this.equals((getLogSchemaVersionsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getLogSchemaVersionsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemaVersionsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemaVersionsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemaVersionsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getLogSchemaVersionsByApplicationId_resultStandardScheme getScheme() {
        return new getLogSchemaVersionsByApplicationId_resultStandardScheme();
      }
    }

    private static class getLogSchemaVersionsByApplicationId_resultStandardScheme extends StandardScheme<getLogSchemaVersionsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem74;
                    _elem74 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemaVersionsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getLogSchemaVersionsByApplicationId_resultTupleScheme getScheme() {
        return new getLogSchemaVersionsByApplicationId_resultTupleScheme();
      }
    }

    private static class getLogSchemaVersionsByApplicationId_resultTupleScheme extends TupleScheme<getLogSchemaVersionsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem79;
              _elem79 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemasByApplicationId_args implements org.apache.thrift.TBase<getLogSchemasByApplicationId_args, getLogSchemasByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemasByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemasByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemasByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemasByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemasByApplicationId_args.class, metaDataMap);
    }

    public getLogSchemasByApplicationId_args() {
    }

    public getLogSchemasByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemasByApplicationId_args(getLogSchemasByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getLogSchemasByApplicationId_args deepCopy() {
      return new getLogSchemasByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getLogSchemasByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemasByApplicationId_args)
        return this.equals((getLogSchemasByApplicationId_args)that);
      return false;
    }

    public boolean equals(getLogSchemasByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemasByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemasByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemasByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getLogSchemasByApplicationId_argsStandardScheme getScheme() {
        return new getLogSchemasByApplicationId_argsStandardScheme();
      }
    }

    private static class getLogSchemasByApplicationId_argsStandardScheme extends StandardScheme<getLogSchemasByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemasByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getLogSchemasByApplicationId_argsTupleScheme getScheme() {
        return new getLogSchemasByApplicationId_argsTupleScheme();
      }
    }

    private static class getLogSchemasByApplicationId_argsTupleScheme extends TupleScheme<getLogSchemasByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemasByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemasByApplicationId_result implements org.apache.thrift.TBase<getLogSchemasByApplicationId_result, getLogSchemasByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemasByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemasByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemasByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemasByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemasByApplicationId_result.class, metaDataMap);
    }

    public getLogSchemasByApplicationId_result() {
    }

    public getLogSchemasByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemasByApplicationId_result(getLogSchemasByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogSchemasByApplicationId_result deepCopy() {
      return new getLogSchemasByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getLogSchemasByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogSchemasByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemasByApplicationId_result)
        return this.equals((getLogSchemasByApplicationId_result)that);
      return false;
    }

    public boolean equals(getLogSchemasByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemasByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemasByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemasByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getLogSchemasByApplicationId_resultStandardScheme getScheme() {
        return new getLogSchemasByApplicationId_resultStandardScheme();
      }
    }

    private static class getLogSchemasByApplicationId_resultStandardScheme extends StandardScheme<getLogSchemasByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem82;
                    _elem82 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemasByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getLogSchemasByApplicationId_resultTupleScheme getScheme() {
        return new getLogSchemasByApplicationId_resultTupleScheme();
      }
    }

    private static class getLogSchemasByApplicationId_resultTupleScheme extends TupleScheme<getLogSchemasByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemasByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem87;
              _elem87 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogSchema_args implements org.apache.thrift.TBase<getLogSchema_args, getLogSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchema_args");

    private static final org.apache.thrift.protocol.TField LOG_SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logSchemaId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchema_argsTupleSchemeFactory());
    }

    public String logSchemaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_SCHEMA_ID((short)1, "logSchemaId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_SCHEMA_ID
            return LOG_SCHEMA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("logSchemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchema_args.class, metaDataMap);
    }

    public getLogSchema_args() {
    }

    public getLogSchema_args(
      String logSchemaId)
    {
      this();
      this.logSchemaId = logSchemaId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchema_args(getLogSchema_args other) {
      if (other.isSetLogSchemaId()) {
        this.logSchemaId = other.logSchemaId;
      }
    }

    public getLogSchema_args deepCopy() {
      return new getLogSchema_args(this);
    }

    @Override
    public void clear() {
      this.logSchemaId = null;
    }

    public String getLogSchemaId() {
      return this.logSchemaId;
    }

    public getLogSchema_args setLogSchemaId(String logSchemaId) {
      this.logSchemaId = logSchemaId;
      return this;
    }

    public void unsetLogSchemaId() {
      this.logSchemaId = null;
    }

    /** Returns true if field logSchemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetLogSchemaId() {
      return this.logSchemaId != null;
    }

    public void setLogSchemaIdIsSet(boolean value) {
      if (!value) {
        this.logSchemaId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_SCHEMA_ID:
        if (value == null) {
          unsetLogSchemaId();
        } else {
          setLogSchemaId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_SCHEMA_ID:
        return getLogSchemaId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_SCHEMA_ID:
        return isSetLogSchemaId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchema_args)
        return this.equals((getLogSchema_args)that);
      return false;
    }

    public boolean equals(getLogSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_logSchemaId = true && this.isSetLogSchemaId();
      boolean that_present_logSchemaId = true && that.isSetLogSchemaId();
      if (this_present_logSchemaId || that_present_logSchemaId) {
        if (!(this_present_logSchemaId && that_present_logSchemaId))
          return false;
        if (!this.logSchemaId.equals(that.logSchemaId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_logSchemaId = true && (isSetLogSchemaId());
      builder.append(present_logSchemaId);
      if (present_logSchemaId)
        builder.append(logSchemaId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogSchemaId()).compareTo(other.isSetLogSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logSchemaId, other.logSchemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchema_args(");
      boolean first = true;

      sb.append("logSchemaId:");
      if (this.logSchemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.logSchemaId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchema_argsStandardSchemeFactory implements SchemeFactory {
      public getLogSchema_argsStandardScheme getScheme() {
        return new getLogSchema_argsStandardScheme();
      }
    }

    private static class getLogSchema_argsStandardScheme extends StandardScheme<getLogSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logSchemaId = iprot.readString();
                struct.setLogSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logSchemaId != null) {
          oprot.writeFieldBegin(LOG_SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.logSchemaId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchema_argsTupleSchemeFactory implements SchemeFactory {
      public getLogSchema_argsTupleScheme getScheme() {
        return new getLogSchema_argsTupleScheme();
      }
    }

    private static class getLogSchema_argsTupleScheme extends TupleScheme<getLogSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogSchemaId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogSchemaId()) {
          oprot.writeString(struct.logSchemaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logSchemaId = iprot.readString();
          struct.setLogSchemaIdIsSet(true);
        }
      }
    }

  }

  public static class getLogSchema_result implements org.apache.thrift.TBase<getLogSchema_result, getLogSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchema_result.class, metaDataMap);
    }

    public getLogSchema_result() {
    }

    public getLogSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchema_result(getLogSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogSchema_result deepCopy() {
      return new getLogSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getLogSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchema_result)
        return this.equals((getLogSchema_result)that);
      return false;
    }

    public boolean equals(getLogSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchema_resultStandardSchemeFactory implements SchemeFactory {
      public getLogSchema_resultStandardScheme getScheme() {
        return new getLogSchema_resultStandardScheme();
      }
    }

    private static class getLogSchema_resultStandardScheme extends StandardScheme<getLogSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchema_resultTupleSchemeFactory implements SchemeFactory {
      public getLogSchema_resultTupleScheme getScheme() {
        return new getLogSchema_resultTupleScheme();
      }
    }

    private static class getLogSchema_resultTupleScheme extends TupleScheme<getLogSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemaByApplicationIdAndVersion_args implements org.apache.thrift.TBase<getLogSchemaByApplicationIdAndVersion_args, getLogSchemaByApplicationIdAndVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemaByApplicationIdAndVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemaByApplicationIdAndVersion_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemaByApplicationIdAndVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemaByApplicationIdAndVersion_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public int version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      VERSION((short)2, "version");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // VERSION
            return VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "Integer")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemaByApplicationIdAndVersion_args.class, metaDataMap);
    }

    public getLogSchemaByApplicationIdAndVersion_args() {
    }

    public getLogSchemaByApplicationIdAndVersion_args(
      String applicationId,
      int version)
    {
      this();
      this.applicationId = applicationId;
      this.version = version;
      setVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemaByApplicationIdAndVersion_args(getLogSchemaByApplicationIdAndVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      this.version = other.version;
    }

    public getLogSchemaByApplicationIdAndVersion_args deepCopy() {
      return new getLogSchemaByApplicationIdAndVersion_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      setVersionIsSet(false);
      this.version = 0;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getLogSchemaByApplicationIdAndVersion_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public int getVersion() {
      return this.version;
    }

    public getLogSchemaByApplicationIdAndVersion_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case VERSION:
        return Integer.valueOf(getVersion());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case VERSION:
        return isSetVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemaByApplicationIdAndVersion_args)
        return this.equals((getLogSchemaByApplicationIdAndVersion_args)that);
      return false;
    }

    public boolean equals(getLogSchemaByApplicationIdAndVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      boolean present_version = true;
      builder.append(present_version);
      if (present_version)
        builder.append(version);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemaByApplicationIdAndVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemaByApplicationIdAndVersion_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getLogSchemaByApplicationIdAndVersion_argsStandardScheme getScheme() {
        return new getLogSchemaByApplicationIdAndVersion_argsStandardScheme();
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_argsStandardScheme extends StandardScheme<getLogSchemaByApplicationIdAndVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemaByApplicationIdAndVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemaByApplicationIdAndVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemaByApplicationIdAndVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getLogSchemaByApplicationIdAndVersion_argsTupleScheme getScheme() {
        return new getLogSchemaByApplicationIdAndVersion_argsTupleScheme();
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_argsTupleScheme extends TupleScheme<getLogSchemaByApplicationIdAndVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemaByApplicationIdAndVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetVersion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemaByApplicationIdAndVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
      }
    }

  }

  public static class getLogSchemaByApplicationIdAndVersion_result implements org.apache.thrift.TBase<getLogSchemaByApplicationIdAndVersion_result, getLogSchemaByApplicationIdAndVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogSchemaByApplicationIdAndVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogSchemaByApplicationIdAndVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogSchemaByApplicationIdAndVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogSchemaByApplicationIdAndVersion_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogSchemaByApplicationIdAndVersion_result.class, metaDataMap);
    }

    public getLogSchemaByApplicationIdAndVersion_result() {
    }

    public getLogSchemaByApplicationIdAndVersion_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSchemaByApplicationIdAndVersion_result(getLogSchemaByApplicationIdAndVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogSchemaByApplicationIdAndVersion_result deepCopy() {
      return new getLogSchemaByApplicationIdAndVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getLogSchemaByApplicationIdAndVersion_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogSchemaByApplicationIdAndVersion_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSchemaByApplicationIdAndVersion_result)
        return this.equals((getLogSchemaByApplicationIdAndVersion_result)that);
      return false;
    }

    public boolean equals(getLogSchemaByApplicationIdAndVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogSchemaByApplicationIdAndVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSchemaByApplicationIdAndVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getLogSchemaByApplicationIdAndVersion_resultStandardScheme getScheme() {
        return new getLogSchemaByApplicationIdAndVersion_resultStandardScheme();
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_resultStandardScheme extends StandardScheme<getLogSchemaByApplicationIdAndVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogSchemaByApplicationIdAndVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogSchemaByApplicationIdAndVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogSchemaByApplicationIdAndVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getLogSchemaByApplicationIdAndVersion_resultTupleScheme getScheme() {
        return new getLogSchemaByApplicationIdAndVersion_resultTupleScheme();
      }
    }

    private static class getLogSchemaByApplicationIdAndVersion_resultTupleScheme extends TupleScheme<getLogSchemaByApplicationIdAndVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogSchemaByApplicationIdAndVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogSchemaByApplicationIdAndVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editLogSchema_args implements org.apache.thrift.TBase<editLogSchema_args, editLogSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<editLogSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editLogSchema_args");

    private static final org.apache.thrift.protocol.TField LOG_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("logSchema", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editLogSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editLogSchema_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_SCHEMA((short)1, "logSchema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_SCHEMA
            return LOG_SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("logSchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editLogSchema_args.class, metaDataMap);
    }

    public editLogSchema_args() {
    }

    public editLogSchema_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema)
    {
      this();
      this.logSchema = logSchema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editLogSchema_args(editLogSchema_args other) {
      if (other.isSetLogSchema()) {
        this.logSchema = other.logSchema;
      }
    }

    public editLogSchema_args deepCopy() {
      return new editLogSchema_args(this);
    }

    @Override
    public void clear() {
      this.logSchema = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogSchema() {
      return this.logSchema;
    }

    public editLogSchema_args setLogSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logSchema) {
      this.logSchema = logSchema;
      return this;
    }

    public void unsetLogSchema() {
      this.logSchema = null;
    }

    /** Returns true if field logSchema is set (has been assigned a value) and false otherwise */
    public boolean isSetLogSchema() {
      return this.logSchema != null;
    }

    public void setLogSchemaIsSet(boolean value) {
      if (!value) {
        this.logSchema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_SCHEMA:
        if (value == null) {
          unsetLogSchema();
        } else {
          setLogSchema((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_SCHEMA:
        return getLogSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_SCHEMA:
        return isSetLogSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editLogSchema_args)
        return this.equals((editLogSchema_args)that);
      return false;
    }

    public boolean equals(editLogSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_logSchema = true && this.isSetLogSchema();
      boolean that_present_logSchema = true && that.isSetLogSchema();
      if (this_present_logSchema || that_present_logSchema) {
        if (!(this_present_logSchema && that_present_logSchema))
          return false;
        if (!this.logSchema.equals(that.logSchema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_logSchema = true && (isSetLogSchema());
      builder.append(present_logSchema);
      if (present_logSchema)
        builder.append(logSchema);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editLogSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogSchema()).compareTo(other.isSetLogSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logSchema, other.logSchema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editLogSchema_args(");
      boolean first = true;

      sb.append("logSchema:");
      if (this.logSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.logSchema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editLogSchema_argsStandardSchemeFactory implements SchemeFactory {
      public editLogSchema_argsStandardScheme getScheme() {
        return new editLogSchema_argsStandardScheme();
      }
    }

    private static class editLogSchema_argsStandardScheme extends StandardScheme<editLogSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editLogSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.logSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.logSchema.read(iprot);
                struct.setLogSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editLogSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logSchema != null) {
          oprot.writeFieldBegin(LOG_SCHEMA_FIELD_DESC);
          struct.logSchema.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editLogSchema_argsTupleSchemeFactory implements SchemeFactory {
      public editLogSchema_argsTupleScheme getScheme() {
        return new editLogSchema_argsTupleScheme();
      }
    }

    private static class editLogSchema_argsTupleScheme extends TupleScheme<editLogSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editLogSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogSchema()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogSchema()) {
          struct.logSchema.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editLogSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.logSchema.read(iprot);
          struct.setLogSchemaIsSet(true);
        }
      }
    }

  }

  public static class editLogSchema_result implements org.apache.thrift.TBase<editLogSchema_result, editLogSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<editLogSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editLogSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editLogSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editLogSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editLogSchema_result.class, metaDataMap);
    }

    public editLogSchema_result() {
    }

    public editLogSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editLogSchema_result(editLogSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editLogSchema_result deepCopy() {
      return new editLogSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editLogSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editLogSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editLogSchema_result)
        return this.equals((editLogSchema_result)that);
      return false;
    }

    public boolean equals(editLogSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editLogSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editLogSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editLogSchema_resultStandardSchemeFactory implements SchemeFactory {
      public editLogSchema_resultStandardScheme getScheme() {
        return new editLogSchema_resultStandardScheme();
      }
    }

    private static class editLogSchema_resultStandardScheme extends StandardScheme<editLogSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editLogSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editLogSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editLogSchema_resultTupleSchemeFactory implements SchemeFactory {
      public editLogSchema_resultTupleScheme getScheme() {
        return new editLogSchema_resultTupleScheme();
      }
    }

    private static class editLogSchema_resultTupleScheme extends TupleScheme<editLogSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editLogSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editLogSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEndpointGroupsByApplicationId_args implements org.apache.thrift.TBase<getEndpointGroupsByApplicationId_args, getEndpointGroupsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointGroupsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointGroupsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointGroupsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointGroupsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointGroupsByApplicationId_args.class, metaDataMap);
    }

    public getEndpointGroupsByApplicationId_args() {
    }

    public getEndpointGroupsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointGroupsByApplicationId_args(getEndpointGroupsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getEndpointGroupsByApplicationId_args deepCopy() {
      return new getEndpointGroupsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getEndpointGroupsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointGroupsByApplicationId_args)
        return this.equals((getEndpointGroupsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getEndpointGroupsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointGroupsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointGroupsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointGroupsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getEndpointGroupsByApplicationId_argsStandardScheme getScheme() {
        return new getEndpointGroupsByApplicationId_argsStandardScheme();
      }
    }

    private static class getEndpointGroupsByApplicationId_argsStandardScheme extends StandardScheme<getEndpointGroupsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointGroupsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointGroupsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointGroupsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getEndpointGroupsByApplicationId_argsTupleScheme getScheme() {
        return new getEndpointGroupsByApplicationId_argsTupleScheme();
      }
    }

    private static class getEndpointGroupsByApplicationId_argsTupleScheme extends TupleScheme<getEndpointGroupsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointGroupsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointGroupsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getEndpointGroupsByApplicationId_result implements org.apache.thrift.TBase<getEndpointGroupsByApplicationId_result, getEndpointGroupsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointGroupsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointGroupsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointGroupsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointGroupsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointGroupsByApplicationId_result.class, metaDataMap);
    }

    public getEndpointGroupsByApplicationId_result() {
    }

    public getEndpointGroupsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointGroupsByApplicationId_result(getEndpointGroupsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEndpointGroupsByApplicationId_result deepCopy() {
      return new getEndpointGroupsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getEndpointGroupsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEndpointGroupsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointGroupsByApplicationId_result)
        return this.equals((getEndpointGroupsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getEndpointGroupsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointGroupsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointGroupsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointGroupsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getEndpointGroupsByApplicationId_resultStandardScheme getScheme() {
        return new getEndpointGroupsByApplicationId_resultStandardScheme();
      }
    }

    private static class getEndpointGroupsByApplicationId_resultStandardScheme extends StandardScheme<getEndpointGroupsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointGroupsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem90;
                    _elem90 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointGroupsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointGroupsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getEndpointGroupsByApplicationId_resultTupleScheme getScheme() {
        return new getEndpointGroupsByApplicationId_resultTupleScheme();
      }
    }

    private static class getEndpointGroupsByApplicationId_resultTupleScheme extends TupleScheme<getEndpointGroupsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointGroupsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointGroupsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem95;
              _elem95 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEndpointGroup_args implements org.apache.thrift.TBase<getEndpointGroup_args, getEndpointGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointGroup_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointGroup_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointGroup_args.class, metaDataMap);
    }

    public getEndpointGroup_args() {
    }

    public getEndpointGroup_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointGroup_args(getEndpointGroup_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getEndpointGroup_args deepCopy() {
      return new getEndpointGroup_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getEndpointGroup_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointGroup_args)
        return this.equals((getEndpointGroup_args)that);
      return false;
    }

    public boolean equals(getEndpointGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointGroup_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getEndpointGroup_argsStandardScheme getScheme() {
        return new getEndpointGroup_argsStandardScheme();
      }
    }

    private static class getEndpointGroup_argsStandardScheme extends StandardScheme<getEndpointGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getEndpointGroup_argsTupleScheme getScheme() {
        return new getEndpointGroup_argsTupleScheme();
      }
    }

    private static class getEndpointGroup_argsTupleScheme extends TupleScheme<getEndpointGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getEndpointGroup_result implements org.apache.thrift.TBase<getEndpointGroup_result, getEndpointGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointGroup_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointGroup_result.class, metaDataMap);
    }

    public getEndpointGroup_result() {
    }

    public getEndpointGroup_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointGroup_result(getEndpointGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEndpointGroup_result deepCopy() {
      return new getEndpointGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getEndpointGroup_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEndpointGroup_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointGroup_result)
        return this.equals((getEndpointGroup_result)that);
      return false;
    }

    public boolean equals(getEndpointGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getEndpointGroup_resultStandardScheme getScheme() {
        return new getEndpointGroup_resultStandardScheme();
      }
    }

    private static class getEndpointGroup_resultStandardScheme extends StandardScheme<getEndpointGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getEndpointGroup_resultTupleScheme getScheme() {
        return new getEndpointGroup_resultTupleScheme();
      }
    }

    private static class getEndpointGroup_resultTupleScheme extends TupleScheme<getEndpointGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editEndpointGroup_args implements org.apache.thrift.TBase<editEndpointGroup_args, editEndpointGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<editEndpointGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEndpointGroup_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEndpointGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEndpointGroup_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP((short)1, "endpointGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP
            return ENDPOINT_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP, new org.apache.thrift.meta_data.FieldMetaData("endpointGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEndpointGroup_args.class, metaDataMap);
    }

    public editEndpointGroup_args() {
    }

    public editEndpointGroup_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup)
    {
      this();
      this.endpointGroup = endpointGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEndpointGroup_args(editEndpointGroup_args other) {
      if (other.isSetEndpointGroup()) {
        this.endpointGroup = other.endpointGroup;
      }
    }

    public editEndpointGroup_args deepCopy() {
      return new editEndpointGroup_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroup = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointGroup() {
      return this.endpointGroup;
    }

    public editEndpointGroup_args setEndpointGroup(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointGroup) {
      this.endpointGroup = endpointGroup;
      return this;
    }

    public void unsetEndpointGroup() {
      this.endpointGroup = null;
    }

    /** Returns true if field endpointGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroup() {
      return this.endpointGroup != null;
    }

    public void setEndpointGroupIsSet(boolean value) {
      if (!value) {
        this.endpointGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP:
        if (value == null) {
          unsetEndpointGroup();
        } else {
          setEndpointGroup((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP:
        return getEndpointGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP:
        return isSetEndpointGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEndpointGroup_args)
        return this.equals((editEndpointGroup_args)that);
      return false;
    }

    public boolean equals(editEndpointGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroup = true && this.isSetEndpointGroup();
      boolean that_present_endpointGroup = true && that.isSetEndpointGroup();
      if (this_present_endpointGroup || that_present_endpointGroup) {
        if (!(this_present_endpointGroup && that_present_endpointGroup))
          return false;
        if (!this.endpointGroup.equals(that.endpointGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroup = true && (isSetEndpointGroup());
      builder.append(present_endpointGroup);
      if (present_endpointGroup)
        builder.append(endpointGroup);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEndpointGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroup()).compareTo(other.isSetEndpointGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroup, other.endpointGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEndpointGroup_args(");
      boolean first = true;

      sb.append("endpointGroup:");
      if (this.endpointGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEndpointGroup_argsStandardSchemeFactory implements SchemeFactory {
      public editEndpointGroup_argsStandardScheme getScheme() {
        return new editEndpointGroup_argsStandardScheme();
      }
    }

    private static class editEndpointGroup_argsStandardScheme extends StandardScheme<editEndpointGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEndpointGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.endpointGroup = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.endpointGroup.read(iprot);
                struct.setEndpointGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEndpointGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroup != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_FIELD_DESC);
          struct.endpointGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEndpointGroup_argsTupleSchemeFactory implements SchemeFactory {
      public editEndpointGroup_argsTupleScheme getScheme() {
        return new editEndpointGroup_argsTupleScheme();
      }
    }

    private static class editEndpointGroup_argsTupleScheme extends TupleScheme<editEndpointGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroup()) {
          struct.endpointGroup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroup = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.endpointGroup.read(iprot);
          struct.setEndpointGroupIsSet(true);
        }
      }
    }

  }

  public static class editEndpointGroup_result implements org.apache.thrift.TBase<editEndpointGroup_result, editEndpointGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<editEndpointGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEndpointGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEndpointGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEndpointGroup_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEndpointGroup_result.class, metaDataMap);
    }

    public editEndpointGroup_result() {
    }

    public editEndpointGroup_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEndpointGroup_result(editEndpointGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editEndpointGroup_result deepCopy() {
      return new editEndpointGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editEndpointGroup_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editEndpointGroup_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEndpointGroup_result)
        return this.equals((editEndpointGroup_result)that);
      return false;
    }

    public boolean equals(editEndpointGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEndpointGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEndpointGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEndpointGroup_resultStandardSchemeFactory implements SchemeFactory {
      public editEndpointGroup_resultStandardScheme getScheme() {
        return new editEndpointGroup_resultStandardScheme();
      }
    }

    private static class editEndpointGroup_resultStandardScheme extends StandardScheme<editEndpointGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEndpointGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEndpointGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEndpointGroup_resultTupleSchemeFactory implements SchemeFactory {
      public editEndpointGroup_resultTupleScheme getScheme() {
        return new editEndpointGroup_resultTupleScheme();
      }
    }

    private static class editEndpointGroup_resultTupleScheme extends TupleScheme<editEndpointGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteEndpointGroup_args implements org.apache.thrift.TBase<deleteEndpointGroup_args, deleteEndpointGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEndpointGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEndpointGroup_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEndpointGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEndpointGroup_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEndpointGroup_args.class, metaDataMap);
    }

    public deleteEndpointGroup_args() {
    }

    public deleteEndpointGroup_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEndpointGroup_args(deleteEndpointGroup_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public deleteEndpointGroup_args deepCopy() {
      return new deleteEndpointGroup_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public deleteEndpointGroup_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEndpointGroup_args)
        return this.equals((deleteEndpointGroup_args)that);
      return false;
    }

    public boolean equals(deleteEndpointGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteEndpointGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEndpointGroup_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEndpointGroup_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEndpointGroup_argsStandardScheme getScheme() {
        return new deleteEndpointGroup_argsStandardScheme();
      }
    }

    private static class deleteEndpointGroup_argsStandardScheme extends StandardScheme<deleteEndpointGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEndpointGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEndpointGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEndpointGroup_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEndpointGroup_argsTupleScheme getScheme() {
        return new deleteEndpointGroup_argsTupleScheme();
      }
    }

    private static class deleteEndpointGroup_argsTupleScheme extends TupleScheme<deleteEndpointGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class deleteEndpointGroup_result implements org.apache.thrift.TBase<deleteEndpointGroup_result, deleteEndpointGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEndpointGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEndpointGroup_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEndpointGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEndpointGroup_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEndpointGroup_result.class, metaDataMap);
    }

    public deleteEndpointGroup_result() {
    }

    public deleteEndpointGroup_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEndpointGroup_result(deleteEndpointGroup_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteEndpointGroup_result deepCopy() {
      return new deleteEndpointGroup_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteEndpointGroup_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEndpointGroup_result)
        return this.equals((deleteEndpointGroup_result)that);
      return false;
    }

    public boolean equals(deleteEndpointGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteEndpointGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEndpointGroup_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEndpointGroup_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEndpointGroup_resultStandardScheme getScheme() {
        return new deleteEndpointGroup_resultStandardScheme();
      }
    }

    private static class deleteEndpointGroup_resultStandardScheme extends StandardScheme<deleteEndpointGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEndpointGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEndpointGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEndpointGroup_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEndpointGroup_resultTupleScheme getScheme() {
        return new deleteEndpointGroup_resultTupleScheme();
      }
    }

    private static class deleteEndpointGroup_resultTupleScheme extends TupleScheme<deleteEndpointGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class removeTopicsFromEndpointGroup_args implements org.apache.thrift.TBase<removeTopicsFromEndpointGroup_args, removeTopicsFromEndpointGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeTopicsFromEndpointGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTopicsFromEndpointGroup_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTopicsFromEndpointGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTopicsFromEndpointGroup_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required
    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId"),
      TOPIC_ID((short)2, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 2: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTopicsFromEndpointGroup_args.class, metaDataMap);
    }

    public removeTopicsFromEndpointGroup_args() {
    }

    public removeTopicsFromEndpointGroup_args(
      String endpointGroupId,
      String topicId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTopicsFromEndpointGroup_args(removeTopicsFromEndpointGroup_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public removeTopicsFromEndpointGroup_args deepCopy() {
      return new removeTopicsFromEndpointGroup_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
      this.topicId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public removeTopicsFromEndpointGroup_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public String getTopicId() {
      return this.topicId;
    }

    public removeTopicsFromEndpointGroup_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTopicsFromEndpointGroup_args)
        return this.equals((removeTopicsFromEndpointGroup_args)that);
      return false;
    }

    public boolean equals(removeTopicsFromEndpointGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_topicId = true && (isSetTopicId());
      builder.append(present_topicId);
      if (present_topicId)
        builder.append(topicId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeTopicsFromEndpointGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTopicsFromEndpointGroup_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTopicsFromEndpointGroup_argsStandardSchemeFactory implements SchemeFactory {
      public removeTopicsFromEndpointGroup_argsStandardScheme getScheme() {
        return new removeTopicsFromEndpointGroup_argsStandardScheme();
      }
    }

    private static class removeTopicsFromEndpointGroup_argsStandardScheme extends StandardScheme<removeTopicsFromEndpointGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTopicsFromEndpointGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTopicsFromEndpointGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTopicsFromEndpointGroup_argsTupleSchemeFactory implements SchemeFactory {
      public removeTopicsFromEndpointGroup_argsTupleScheme getScheme() {
        return new removeTopicsFromEndpointGroup_argsTupleScheme();
      }
    }

    private static class removeTopicsFromEndpointGroup_argsTupleScheme extends TupleScheme<removeTopicsFromEndpointGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTopicsFromEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetTopicId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTopicsFromEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class removeTopicsFromEndpointGroup_result implements org.apache.thrift.TBase<removeTopicsFromEndpointGroup_result, removeTopicsFromEndpointGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeTopicsFromEndpointGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTopicsFromEndpointGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTopicsFromEndpointGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTopicsFromEndpointGroup_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTopicsFromEndpointGroup_result.class, metaDataMap);
    }

    public removeTopicsFromEndpointGroup_result() {
    }

    public removeTopicsFromEndpointGroup_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTopicsFromEndpointGroup_result(removeTopicsFromEndpointGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public removeTopicsFromEndpointGroup_result deepCopy() {
      return new removeTopicsFromEndpointGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public removeTopicsFromEndpointGroup_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public removeTopicsFromEndpointGroup_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTopicsFromEndpointGroup_result)
        return this.equals((removeTopicsFromEndpointGroup_result)that);
      return false;
    }

    public boolean equals(removeTopicsFromEndpointGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeTopicsFromEndpointGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTopicsFromEndpointGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTopicsFromEndpointGroup_resultStandardSchemeFactory implements SchemeFactory {
      public removeTopicsFromEndpointGroup_resultStandardScheme getScheme() {
        return new removeTopicsFromEndpointGroup_resultStandardScheme();
      }
    }

    private static class removeTopicsFromEndpointGroup_resultStandardScheme extends StandardScheme<removeTopicsFromEndpointGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTopicsFromEndpointGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTopicsFromEndpointGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTopicsFromEndpointGroup_resultTupleSchemeFactory implements SchemeFactory {
      public removeTopicsFromEndpointGroup_resultTupleScheme getScheme() {
        return new removeTopicsFromEndpointGroup_resultTupleScheme();
      }
    }

    private static class removeTopicsFromEndpointGroup_resultTupleScheme extends TupleScheme<removeTopicsFromEndpointGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTopicsFromEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTopicsFromEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class addTopicsToEndpointGroup_args implements org.apache.thrift.TBase<addTopicsToEndpointGroup_args, addTopicsToEndpointGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTopicsToEndpointGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTopicsToEndpointGroup_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTopicsToEndpointGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTopicsToEndpointGroup_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required
    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId"),
      TOPIC_ID((short)2, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 2: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTopicsToEndpointGroup_args.class, metaDataMap);
    }

    public addTopicsToEndpointGroup_args() {
    }

    public addTopicsToEndpointGroup_args(
      String endpointGroupId,
      String topicId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTopicsToEndpointGroup_args(addTopicsToEndpointGroup_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public addTopicsToEndpointGroup_args deepCopy() {
      return new addTopicsToEndpointGroup_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
      this.topicId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public addTopicsToEndpointGroup_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public String getTopicId() {
      return this.topicId;
    }

    public addTopicsToEndpointGroup_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTopicsToEndpointGroup_args)
        return this.equals((addTopicsToEndpointGroup_args)that);
      return false;
    }

    public boolean equals(addTopicsToEndpointGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_topicId = true && (isSetTopicId());
      builder.append(present_topicId);
      if (present_topicId)
        builder.append(topicId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addTopicsToEndpointGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTopicsToEndpointGroup_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTopicsToEndpointGroup_argsStandardSchemeFactory implements SchemeFactory {
      public addTopicsToEndpointGroup_argsStandardScheme getScheme() {
        return new addTopicsToEndpointGroup_argsStandardScheme();
      }
    }

    private static class addTopicsToEndpointGroup_argsStandardScheme extends StandardScheme<addTopicsToEndpointGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTopicsToEndpointGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTopicsToEndpointGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTopicsToEndpointGroup_argsTupleSchemeFactory implements SchemeFactory {
      public addTopicsToEndpointGroup_argsTupleScheme getScheme() {
        return new addTopicsToEndpointGroup_argsTupleScheme();
      }
    }

    private static class addTopicsToEndpointGroup_argsTupleScheme extends TupleScheme<addTopicsToEndpointGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTopicsToEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetTopicId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTopicsToEndpointGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class addTopicsToEndpointGroup_result implements org.apache.thrift.TBase<addTopicsToEndpointGroup_result, addTopicsToEndpointGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTopicsToEndpointGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTopicsToEndpointGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTopicsToEndpointGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTopicsToEndpointGroup_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTopicsToEndpointGroup_result.class, metaDataMap);
    }

    public addTopicsToEndpointGroup_result() {
    }

    public addTopicsToEndpointGroup_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTopicsToEndpointGroup_result(addTopicsToEndpointGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public addTopicsToEndpointGroup_result deepCopy() {
      return new addTopicsToEndpointGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public addTopicsToEndpointGroup_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public addTopicsToEndpointGroup_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTopicsToEndpointGroup_result)
        return this.equals((addTopicsToEndpointGroup_result)that);
      return false;
    }

    public boolean equals(addTopicsToEndpointGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addTopicsToEndpointGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTopicsToEndpointGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTopicsToEndpointGroup_resultStandardSchemeFactory implements SchemeFactory {
      public addTopicsToEndpointGroup_resultStandardScheme getScheme() {
        return new addTopicsToEndpointGroup_resultStandardScheme();
      }
    }

    private static class addTopicsToEndpointGroup_resultStandardScheme extends StandardScheme<addTopicsToEndpointGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTopicsToEndpointGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTopicsToEndpointGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTopicsToEndpointGroup_resultTupleSchemeFactory implements SchemeFactory {
      public addTopicsToEndpointGroup_resultTupleScheme getScheme() {
        return new addTopicsToEndpointGroup_resultTupleScheme();
      }
    }

    private static class addTopicsToEndpointGroup_resultTupleScheme extends TupleScheme<addTopicsToEndpointGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTopicsToEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTopicsToEndpointGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilterRecordsByEndpointGroupId_args implements org.apache.thrift.TBase<getProfileFilterRecordsByEndpointGroupId_args, getProfileFilterRecordsByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterRecordsByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterRecordsByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INCLUDE_DEPRECATED_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDeprecated", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilterRecordsByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilterRecordsByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required
    public boolean includeDeprecated; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId"),
      INCLUDE_DEPRECATED((short)2, "includeDeprecated");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 2: // INCLUDE_DEPRECATED
            return INCLUDE_DEPRECATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INCLUDEDEPRECATED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.INCLUDE_DEPRECATED, new org.apache.thrift.meta_data.FieldMetaData("includeDeprecated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterRecordsByEndpointGroupId_args.class, metaDataMap);
    }

    public getProfileFilterRecordsByEndpointGroupId_args() {
    }

    public getProfileFilterRecordsByEndpointGroupId_args(
      String endpointGroupId,
      boolean includeDeprecated)
    {
      this();
      this.endpointGroupId = endpointGroupId;
      this.includeDeprecated = includeDeprecated;
      setIncludeDeprecatedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilterRecordsByEndpointGroupId_args(getProfileFilterRecordsByEndpointGroupId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      this.includeDeprecated = other.includeDeprecated;
    }

    public getProfileFilterRecordsByEndpointGroupId_args deepCopy() {
      return new getProfileFilterRecordsByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
      setIncludeDeprecatedIsSet(false);
      this.includeDeprecated = false;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getProfileFilterRecordsByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public boolean isIncludeDeprecated() {
      return this.includeDeprecated;
    }

    public getProfileFilterRecordsByEndpointGroupId_args setIncludeDeprecated(boolean includeDeprecated) {
      this.includeDeprecated = includeDeprecated;
      setIncludeDeprecatedIsSet(true);
      return this;
    }

    public void unsetIncludeDeprecated() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID);
    }

    /** Returns true if field includeDeprecated is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludeDeprecated() {
      return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID);
    }

    public void setIncludeDeprecatedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case INCLUDE_DEPRECATED:
        if (value == null) {
          unsetIncludeDeprecated();
        } else {
          setIncludeDeprecated((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case INCLUDE_DEPRECATED:
        return Boolean.valueOf(isIncludeDeprecated());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case INCLUDE_DEPRECATED:
        return isSetIncludeDeprecated();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilterRecordsByEndpointGroupId_args)
        return this.equals((getProfileFilterRecordsByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getProfileFilterRecordsByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_includeDeprecated = true;
      boolean that_present_includeDeprecated = true;
      if (this_present_includeDeprecated || that_present_includeDeprecated) {
        if (!(this_present_includeDeprecated && that_present_includeDeprecated))
          return false;
        if (this.includeDeprecated != that.includeDeprecated)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_includeDeprecated = true;
      builder.append(present_includeDeprecated);
      if (present_includeDeprecated)
        builder.append(includeDeprecated);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilterRecordsByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIncludeDeprecated()).compareTo(other.isSetIncludeDeprecated());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludeDeprecated()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDeprecated, other.includeDeprecated);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilterRecordsByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("includeDeprecated:");
      sb.append(this.includeDeprecated);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileFilterRecordsByEndpointGroupId_argsStandardScheme getScheme() {
        return new getProfileFilterRecordsByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_argsStandardScheme extends StandardScheme<getProfileFilterRecordsByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INCLUDE_DEPRECATED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.includeDeprecated = iprot.readBool();
                struct.setIncludeDeprecatedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INCLUDE_DEPRECATED_FIELD_DESC);
        oprot.writeBool(struct.includeDeprecated);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilterRecordsByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileFilterRecordsByEndpointGroupId_argsTupleScheme getScheme() {
        return new getProfileFilterRecordsByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_argsTupleScheme extends TupleScheme<getProfileFilterRecordsByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetIncludeDeprecated()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetIncludeDeprecated()) {
          oprot.writeBool(struct.includeDeprecated);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.includeDeprecated = iprot.readBool();
          struct.setIncludeDeprecatedIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilterRecordsByEndpointGroupId_result implements org.apache.thrift.TBase<getProfileFilterRecordsByEndpointGroupId_result, getProfileFilterRecordsByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterRecordsByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterRecordsByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilterRecordsByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilterRecordsByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterRecordsByEndpointGroupId_result.class, metaDataMap);
    }

    public getProfileFilterRecordsByEndpointGroupId_result() {
    }

    public getProfileFilterRecordsByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilterRecordsByEndpointGroupId_result(getProfileFilterRecordsByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileFilterRecordsByEndpointGroupId_result deepCopy() {
      return new getProfileFilterRecordsByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getProfileFilterRecordsByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileFilterRecordsByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilterRecordsByEndpointGroupId_result)
        return this.equals((getProfileFilterRecordsByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getProfileFilterRecordsByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilterRecordsByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilterRecordsByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileFilterRecordsByEndpointGroupId_resultStandardScheme getScheme() {
        return new getProfileFilterRecordsByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_resultStandardScheme extends StandardScheme<getProfileFilterRecordsByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem98;
                    _elem98 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilterRecordsByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileFilterRecordsByEndpointGroupId_resultTupleScheme getScheme() {
        return new getProfileFilterRecordsByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getProfileFilterRecordsByEndpointGroupId_resultTupleScheme extends TupleScheme<getProfileFilterRecordsByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem103;
              _elem103 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilterRecord_args implements org.apache.thrift.TBase<getProfileFilterRecord_args, getProfileFilterRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterRecord_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilterRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilterRecord_argsTupleSchemeFactory());
    }

    public String schemaId; // required
    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_ID((short)1, "schemaId"),
      ENDPOINT_GROUP_ID((short)2, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_ID
            return SCHEMA_ID;
          case 2: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterRecord_args.class, metaDataMap);
    }

    public getProfileFilterRecord_args() {
    }

    public getProfileFilterRecord_args(
      String schemaId,
      String endpointGroupId)
    {
      this();
      this.schemaId = schemaId;
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilterRecord_args(getProfileFilterRecord_args other) {
      if (other.isSetSchemaId()) {
        this.schemaId = other.schemaId;
      }
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getProfileFilterRecord_args deepCopy() {
      return new getProfileFilterRecord_args(this);
    }

    @Override
    public void clear() {
      this.schemaId = null;
      this.endpointGroupId = null;
    }

    public String getSchemaId() {
      return this.schemaId;
    }

    public getProfileFilterRecord_args setSchemaId(String schemaId) {
      this.schemaId = schemaId;
      return this;
    }

    public void unsetSchemaId() {
      this.schemaId = null;
    }

    /** Returns true if field schemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaId() {
      return this.schemaId != null;
    }

    public void setSchemaIdIsSet(boolean value) {
      if (!value) {
        this.schemaId = null;
      }
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getProfileFilterRecord_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEMA_ID:
        if (value == null) {
          unsetSchemaId();
        } else {
          setSchemaId((String)value);
        }
        break;

      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_ID:
        return getSchemaId();

      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_ID:
        return isSetSchemaId();
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilterRecord_args)
        return this.equals((getProfileFilterRecord_args)that);
      return false;
    }

    public boolean equals(getProfileFilterRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_schemaId = true && this.isSetSchemaId();
      boolean that_present_schemaId = true && that.isSetSchemaId();
      if (this_present_schemaId || that_present_schemaId) {
        if (!(this_present_schemaId && that_present_schemaId))
          return false;
        if (!this.schemaId.equals(that.schemaId))
          return false;
      }

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_schemaId = true && (isSetSchemaId());
      builder.append(present_schemaId);
      if (present_schemaId)
        builder.append(schemaId);

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilterRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemaId()).compareTo(other.isSetSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaId, other.schemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilterRecord_args(");
      boolean first = true;

      sb.append("schemaId:");
      if (this.schemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilterRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileFilterRecord_argsStandardScheme getScheme() {
        return new getProfileFilterRecord_argsStandardScheme();
      }
    }

    private static class getProfileFilterRecord_argsStandardScheme extends StandardScheme<getProfileFilterRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaId = iprot.readString();
                struct.setSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaId != null) {
          oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.schemaId);
          oprot.writeFieldEnd();
        }
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilterRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileFilterRecord_argsTupleScheme getScheme() {
        return new getProfileFilterRecord_argsTupleScheme();
      }
    }

    private static class getProfileFilterRecord_argsTupleScheme extends TupleScheme<getProfileFilterRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemaId()) {
          optionals.set(0);
        }
        if (struct.isSetEndpointGroupId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchemaId()) {
          oprot.writeString(struct.schemaId);
        }
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schemaId = iprot.readString();
          struct.setSchemaIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilterRecord_result implements org.apache.thrift.TBase<getProfileFilterRecord_result, getProfileFilterRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilterRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilterRecord_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterRecord_result.class, metaDataMap);
    }

    public getProfileFilterRecord_result() {
    }

    public getProfileFilterRecord_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilterRecord_result(getProfileFilterRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileFilterRecord_result deepCopy() {
      return new getProfileFilterRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getProfileFilterRecord_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileFilterRecord_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilterRecord_result)
        return this.equals((getProfileFilterRecord_result)that);
      return false;
    }

    public boolean equals(getProfileFilterRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilterRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilterRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilterRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileFilterRecord_resultStandardScheme getScheme() {
        return new getProfileFilterRecord_resultStandardScheme();
      }
    }

    private static class getProfileFilterRecord_resultStandardScheme extends StandardScheme<getProfileFilterRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilterRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileFilterRecord_resultTupleScheme getScheme() {
        return new getProfileFilterRecord_resultTupleScheme();
      }
    }

    private static class getProfileFilterRecord_resultTupleScheme extends TupleScheme<getProfileFilterRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVacantProfileSchemasByEndpointGroupId_args implements org.apache.thrift.TBase<getVacantProfileSchemasByEndpointGroupId_args, getVacantProfileSchemasByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantProfileSchemasByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantProfileSchemasByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantProfileSchemasByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantProfileSchemasByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantProfileSchemasByEndpointGroupId_args.class, metaDataMap);
    }

    public getVacantProfileSchemasByEndpointGroupId_args() {
    }

    public getVacantProfileSchemasByEndpointGroupId_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantProfileSchemasByEndpointGroupId_args(getVacantProfileSchemasByEndpointGroupId_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getVacantProfileSchemasByEndpointGroupId_args deepCopy() {
      return new getVacantProfileSchemasByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getVacantProfileSchemasByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantProfileSchemasByEndpointGroupId_args)
        return this.equals((getVacantProfileSchemasByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getVacantProfileSchemasByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantProfileSchemasByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantProfileSchemasByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getVacantProfileSchemasByEndpointGroupId_argsStandardScheme getScheme() {
        return new getVacantProfileSchemasByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_argsStandardScheme extends StandardScheme<getVacantProfileSchemasByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantProfileSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantProfileSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantProfileSchemasByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getVacantProfileSchemasByEndpointGroupId_argsTupleScheme getScheme() {
        return new getVacantProfileSchemasByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_argsTupleScheme extends TupleScheme<getVacantProfileSchemasByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantProfileSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantProfileSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getVacantProfileSchemasByEndpointGroupId_result implements org.apache.thrift.TBase<getVacantProfileSchemasByEndpointGroupId_result, getVacantProfileSchemasByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantProfileSchemasByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantProfileSchemasByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantProfileSchemasByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantProfileSchemasByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantProfileSchemasByEndpointGroupId_result.class, metaDataMap);
    }

    public getVacantProfileSchemasByEndpointGroupId_result() {
    }

    public getVacantProfileSchemasByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantProfileSchemasByEndpointGroupId_result(getVacantProfileSchemasByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getVacantProfileSchemasByEndpointGroupId_result deepCopy() {
      return new getVacantProfileSchemasByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getVacantProfileSchemasByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getVacantProfileSchemasByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantProfileSchemasByEndpointGroupId_result)
        return this.equals((getVacantProfileSchemasByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getVacantProfileSchemasByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantProfileSchemasByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantProfileSchemasByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getVacantProfileSchemasByEndpointGroupId_resultStandardScheme getScheme() {
        return new getVacantProfileSchemasByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_resultStandardScheme extends StandardScheme<getVacantProfileSchemasByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantProfileSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem106;
                    _elem106 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem106.read(iprot);
                    struct.success.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantProfileSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantProfileSchemasByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getVacantProfileSchemasByEndpointGroupId_resultTupleScheme getScheme() {
        return new getVacantProfileSchemasByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getVacantProfileSchemasByEndpointGroupId_resultTupleScheme extends TupleScheme<getVacantProfileSchemasByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantProfileSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantProfileSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem111;
              _elem111 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem111.read(iprot);
              struct.success.add(_elem111);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilter_args implements org.apache.thrift.TBase<getProfileFilter_args, getProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilter_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileFilterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilter_argsTupleSchemeFactory());
    }

    public String profileFilterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_FILTER_ID((short)1, "profileFilterId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_FILTER_ID
            return PROFILE_FILTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("profileFilterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilter_args.class, metaDataMap);
    }

    public getProfileFilter_args() {
    }

    public getProfileFilter_args(
      String profileFilterId)
    {
      this();
      this.profileFilterId = profileFilterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilter_args(getProfileFilter_args other) {
      if (other.isSetProfileFilterId()) {
        this.profileFilterId = other.profileFilterId;
      }
    }

    public getProfileFilter_args deepCopy() {
      return new getProfileFilter_args(this);
    }

    @Override
    public void clear() {
      this.profileFilterId = null;
    }

    public String getProfileFilterId() {
      return this.profileFilterId;
    }

    public getProfileFilter_args setProfileFilterId(String profileFilterId) {
      this.profileFilterId = profileFilterId;
      return this;
    }

    public void unsetProfileFilterId() {
      this.profileFilterId = null;
    }

    /** Returns true if field profileFilterId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileFilterId() {
      return this.profileFilterId != null;
    }

    public void setProfileFilterIdIsSet(boolean value) {
      if (!value) {
        this.profileFilterId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_FILTER_ID:
        if (value == null) {
          unsetProfileFilterId();
        } else {
          setProfileFilterId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_FILTER_ID:
        return getProfileFilterId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_FILTER_ID:
        return isSetProfileFilterId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilter_args)
        return this.equals((getProfileFilter_args)that);
      return false;
    }

    public boolean equals(getProfileFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_profileFilterId = true && this.isSetProfileFilterId();
      boolean that_present_profileFilterId = true && that.isSetProfileFilterId();
      if (this_present_profileFilterId || that_present_profileFilterId) {
        if (!(this_present_profileFilterId && that_present_profileFilterId))
          return false;
        if (!this.profileFilterId.equals(that.profileFilterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileFilterId = true && (isSetProfileFilterId());
      builder.append(present_profileFilterId);
      if (present_profileFilterId)
        builder.append(profileFilterId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileFilterId()).compareTo(other.isSetProfileFilterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileFilterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileFilterId, other.profileFilterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilter_args(");
      boolean first = true;

      sb.append("profileFilterId:");
      if (this.profileFilterId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileFilterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilter_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileFilter_argsStandardScheme getScheme() {
        return new getProfileFilter_argsStandardScheme();
      }
    }

    private static class getProfileFilter_argsStandardScheme extends StandardScheme<getProfileFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_FILTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileFilterId = iprot.readString();
                struct.setProfileFilterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileFilterId != null) {
          oprot.writeFieldBegin(PROFILE_FILTER_ID_FIELD_DESC);
          oprot.writeString(struct.profileFilterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilter_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileFilter_argsTupleScheme getScheme() {
        return new getProfileFilter_argsTupleScheme();
      }
    }

    private static class getProfileFilter_argsTupleScheme extends TupleScheme<getProfileFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileFilterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileFilterId()) {
          oprot.writeString(struct.profileFilterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileFilterId = iprot.readString();
          struct.setProfileFilterIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileFilter_result implements org.apache.thrift.TBase<getProfileFilter_result, getProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileFilter_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilter_result.class, metaDataMap);
    }

    public getProfileFilter_result() {
    }

    public getProfileFilter_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileFilter_result(getProfileFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getProfileFilter_result deepCopy() {
      return new getProfileFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getProfileFilter_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getProfileFilter_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileFilter_result)
        return this.equals((getProfileFilter_result)that);
      return false;
    }

    public boolean equals(getProfileFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getProfileFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileFilter_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileFilter_resultStandardScheme getScheme() {
        return new getProfileFilter_resultStandardScheme();
      }
    }

    private static class getProfileFilter_resultStandardScheme extends StandardScheme<getProfileFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileFilter_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileFilter_resultTupleScheme getScheme() {
        return new getProfileFilter_resultTupleScheme();
      }
    }

    private static class getProfileFilter_resultTupleScheme extends TupleScheme<getProfileFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editProfileFilter_args implements org.apache.thrift.TBase<editProfileFilter_args, editProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<editProfileFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editProfileFilter_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("profileFilter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editProfileFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editProfileFilter_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_FILTER((short)1, "profileFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_FILTER
            return PROFILE_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("profileFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editProfileFilter_args.class, metaDataMap);
    }

    public editProfileFilter_args() {
    }

    public editProfileFilter_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter)
    {
      this();
      this.profileFilter = profileFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editProfileFilter_args(editProfileFilter_args other) {
      if (other.isSetProfileFilter()) {
        this.profileFilter = other.profileFilter;
      }
    }

    public editProfileFilter_args deepCopy() {
      return new editProfileFilter_args(this);
    }

    @Override
    public void clear() {
      this.profileFilter = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getProfileFilter() {
      return this.profileFilter;
    }

    public editProfileFilter_args setProfileFilter(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct profileFilter) {
      this.profileFilter = profileFilter;
      return this;
    }

    public void unsetProfileFilter() {
      this.profileFilter = null;
    }

    /** Returns true if field profileFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileFilter() {
      return this.profileFilter != null;
    }

    public void setProfileFilterIsSet(boolean value) {
      if (!value) {
        this.profileFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_FILTER:
        if (value == null) {
          unsetProfileFilter();
        } else {
          setProfileFilter((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_FILTER:
        return getProfileFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_FILTER:
        return isSetProfileFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editProfileFilter_args)
        return this.equals((editProfileFilter_args)that);
      return false;
    }

    public boolean equals(editProfileFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_profileFilter = true && this.isSetProfileFilter();
      boolean that_present_profileFilter = true && that.isSetProfileFilter();
      if (this_present_profileFilter || that_present_profileFilter) {
        if (!(this_present_profileFilter && that_present_profileFilter))
          return false;
        if (!this.profileFilter.equals(that.profileFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileFilter = true && (isSetProfileFilter());
      builder.append(present_profileFilter);
      if (present_profileFilter)
        builder.append(profileFilter);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editProfileFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileFilter()).compareTo(other.isSetProfileFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileFilter, other.profileFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editProfileFilter_args(");
      boolean first = true;

      sb.append("profileFilter:");
      if (this.profileFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.profileFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editProfileFilter_argsStandardSchemeFactory implements SchemeFactory {
      public editProfileFilter_argsStandardScheme getScheme() {
        return new editProfileFilter_argsStandardScheme();
      }
    }

    private static class editProfileFilter_argsStandardScheme extends StandardScheme<editProfileFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editProfileFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileFilter = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.profileFilter.read(iprot);
                struct.setProfileFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editProfileFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileFilter != null) {
          oprot.writeFieldBegin(PROFILE_FILTER_FIELD_DESC);
          struct.profileFilter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editProfileFilter_argsTupleSchemeFactory implements SchemeFactory {
      public editProfileFilter_argsTupleScheme getScheme() {
        return new editProfileFilter_argsTupleScheme();
      }
    }

    private static class editProfileFilter_argsTupleScheme extends TupleScheme<editProfileFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileFilter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileFilter()) {
          struct.profileFilter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileFilter = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.profileFilter.read(iprot);
          struct.setProfileFilterIsSet(true);
        }
      }
    }

  }

  public static class editProfileFilter_result implements org.apache.thrift.TBase<editProfileFilter_result, editProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<editProfileFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editProfileFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editProfileFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editProfileFilter_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editProfileFilter_result.class, metaDataMap);
    }

    public editProfileFilter_result() {
    }

    public editProfileFilter_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editProfileFilter_result(editProfileFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editProfileFilter_result deepCopy() {
      return new editProfileFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editProfileFilter_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editProfileFilter_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editProfileFilter_result)
        return this.equals((editProfileFilter_result)that);
      return false;
    }

    public boolean equals(editProfileFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editProfileFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editProfileFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editProfileFilter_resultStandardSchemeFactory implements SchemeFactory {
      public editProfileFilter_resultStandardScheme getScheme() {
        return new editProfileFilter_resultStandardScheme();
      }
    }

    private static class editProfileFilter_resultStandardScheme extends StandardScheme<editProfileFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editProfileFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editProfileFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editProfileFilter_resultTupleSchemeFactory implements SchemeFactory {
      public editProfileFilter_resultTupleScheme getScheme() {
        return new editProfileFilter_resultTupleScheme();
      }
    }

    private static class editProfileFilter_resultTupleScheme extends TupleScheme<editProfileFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class activateProfileFilter_args implements org.apache.thrift.TBase<activateProfileFilter_args, activateProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateProfileFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateProfileFilter_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileFilterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activatedUsername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateProfileFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateProfileFilter_argsTupleSchemeFactory());
    }

    public String profileFilterId; // required
    public String activatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_FILTER_ID((short)1, "profileFilterId"),
      ACTIVATED_USERNAME((short)2, "activatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_FILTER_ID
            return PROFILE_FILTER_ID;
          case 2: // ACTIVATED_USERNAME
            return ACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("profileFilterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("activatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateProfileFilter_args.class, metaDataMap);
    }

    public activateProfileFilter_args() {
    }

    public activateProfileFilter_args(
      String profileFilterId,
      String activatedUsername)
    {
      this();
      this.profileFilterId = profileFilterId;
      this.activatedUsername = activatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateProfileFilter_args(activateProfileFilter_args other) {
      if (other.isSetProfileFilterId()) {
        this.profileFilterId = other.profileFilterId;
      }
      if (other.isSetActivatedUsername()) {
        this.activatedUsername = other.activatedUsername;
      }
    }

    public activateProfileFilter_args deepCopy() {
      return new activateProfileFilter_args(this);
    }

    @Override
    public void clear() {
      this.profileFilterId = null;
      this.activatedUsername = null;
    }

    public String getProfileFilterId() {
      return this.profileFilterId;
    }

    public activateProfileFilter_args setProfileFilterId(String profileFilterId) {
      this.profileFilterId = profileFilterId;
      return this;
    }

    public void unsetProfileFilterId() {
      this.profileFilterId = null;
    }

    /** Returns true if field profileFilterId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileFilterId() {
      return this.profileFilterId != null;
    }

    public void setProfileFilterIdIsSet(boolean value) {
      if (!value) {
        this.profileFilterId = null;
      }
    }

    public String getActivatedUsername() {
      return this.activatedUsername;
    }

    public activateProfileFilter_args setActivatedUsername(String activatedUsername) {
      this.activatedUsername = activatedUsername;
      return this;
    }

    public void unsetActivatedUsername() {
      this.activatedUsername = null;
    }

    /** Returns true if field activatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetActivatedUsername() {
      return this.activatedUsername != null;
    }

    public void setActivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.activatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_FILTER_ID:
        if (value == null) {
          unsetProfileFilterId();
        } else {
          setProfileFilterId((String)value);
        }
        break;

      case ACTIVATED_USERNAME:
        if (value == null) {
          unsetActivatedUsername();
        } else {
          setActivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_FILTER_ID:
        return getProfileFilterId();

      case ACTIVATED_USERNAME:
        return getActivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_FILTER_ID:
        return isSetProfileFilterId();
      case ACTIVATED_USERNAME:
        return isSetActivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateProfileFilter_args)
        return this.equals((activateProfileFilter_args)that);
      return false;
    }

    public boolean equals(activateProfileFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_profileFilterId = true && this.isSetProfileFilterId();
      boolean that_present_profileFilterId = true && that.isSetProfileFilterId();
      if (this_present_profileFilterId || that_present_profileFilterId) {
        if (!(this_present_profileFilterId && that_present_profileFilterId))
          return false;
        if (!this.profileFilterId.equals(that.profileFilterId))
          return false;
      }

      boolean this_present_activatedUsername = true && this.isSetActivatedUsername();
      boolean that_present_activatedUsername = true && that.isSetActivatedUsername();
      if (this_present_activatedUsername || that_present_activatedUsername) {
        if (!(this_present_activatedUsername && that_present_activatedUsername))
          return false;
        if (!this.activatedUsername.equals(that.activatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileFilterId = true && (isSetProfileFilterId());
      builder.append(present_profileFilterId);
      if (present_profileFilterId)
        builder.append(profileFilterId);

      boolean present_activatedUsername = true && (isSetActivatedUsername());
      builder.append(present_activatedUsername);
      if (present_activatedUsername)
        builder.append(activatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(activateProfileFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileFilterId()).compareTo(other.isSetProfileFilterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileFilterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileFilterId, other.profileFilterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivatedUsername()).compareTo(other.isSetActivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activatedUsername, other.activatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateProfileFilter_args(");
      boolean first = true;

      sb.append("profileFilterId:");
      if (this.profileFilterId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileFilterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activatedUsername:");
      if (this.activatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.activatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateProfileFilter_argsStandardSchemeFactory implements SchemeFactory {
      public activateProfileFilter_argsStandardScheme getScheme() {
        return new activateProfileFilter_argsStandardScheme();
      }
    }

    private static class activateProfileFilter_argsStandardScheme extends StandardScheme<activateProfileFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateProfileFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_FILTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileFilterId = iprot.readString();
                struct.setProfileFilterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activatedUsername = iprot.readString();
                struct.setActivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateProfileFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileFilterId != null) {
          oprot.writeFieldBegin(PROFILE_FILTER_ID_FIELD_DESC);
          oprot.writeString(struct.profileFilterId);
          oprot.writeFieldEnd();
        }
        if (struct.activatedUsername != null) {
          oprot.writeFieldBegin(ACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.activatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateProfileFilter_argsTupleSchemeFactory implements SchemeFactory {
      public activateProfileFilter_argsTupleScheme getScheme() {
        return new activateProfileFilter_argsTupleScheme();
      }
    }

    private static class activateProfileFilter_argsTupleScheme extends TupleScheme<activateProfileFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileFilterId()) {
          optionals.set(0);
        }
        if (struct.isSetActivatedUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProfileFilterId()) {
          oprot.writeString(struct.profileFilterId);
        }
        if (struct.isSetActivatedUsername()) {
          oprot.writeString(struct.activatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.profileFilterId = iprot.readString();
          struct.setProfileFilterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activatedUsername = iprot.readString();
          struct.setActivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class activateProfileFilter_result implements org.apache.thrift.TBase<activateProfileFilter_result, activateProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateProfileFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateProfileFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateProfileFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateProfileFilter_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateProfileFilter_result.class, metaDataMap);
    }

    public activateProfileFilter_result() {
    }

    public activateProfileFilter_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateProfileFilter_result(activateProfileFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public activateProfileFilter_result deepCopy() {
      return new activateProfileFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public activateProfileFilter_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public activateProfileFilter_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateProfileFilter_result)
        return this.equals((activateProfileFilter_result)that);
      return false;
    }

    public boolean equals(activateProfileFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(activateProfileFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateProfileFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateProfileFilter_resultStandardSchemeFactory implements SchemeFactory {
      public activateProfileFilter_resultStandardScheme getScheme() {
        return new activateProfileFilter_resultStandardScheme();
      }
    }

    private static class activateProfileFilter_resultStandardScheme extends StandardScheme<activateProfileFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateProfileFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateProfileFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateProfileFilter_resultTupleSchemeFactory implements SchemeFactory {
      public activateProfileFilter_resultTupleScheme getScheme() {
        return new activateProfileFilter_resultTupleScheme();
      }
    }

    private static class activateProfileFilter_resultTupleScheme extends TupleScheme<activateProfileFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deactivateProfileFilter_args implements org.apache.thrift.TBase<deactivateProfileFilter_args, deactivateProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateProfileFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateProfileFilter_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileFilterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deactivatedUsername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateProfileFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateProfileFilter_argsTupleSchemeFactory());
    }

    public String profileFilterId; // required
    public String deactivatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_FILTER_ID((short)1, "profileFilterId"),
      DEACTIVATED_USERNAME((short)2, "deactivatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_FILTER_ID
            return PROFILE_FILTER_ID;
          case 2: // DEACTIVATED_USERNAME
            return DEACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("profileFilterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.DEACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("deactivatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateProfileFilter_args.class, metaDataMap);
    }

    public deactivateProfileFilter_args() {
    }

    public deactivateProfileFilter_args(
      String profileFilterId,
      String deactivatedUsername)
    {
      this();
      this.profileFilterId = profileFilterId;
      this.deactivatedUsername = deactivatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateProfileFilter_args(deactivateProfileFilter_args other) {
      if (other.isSetProfileFilterId()) {
        this.profileFilterId = other.profileFilterId;
      }
      if (other.isSetDeactivatedUsername()) {
        this.deactivatedUsername = other.deactivatedUsername;
      }
    }

    public deactivateProfileFilter_args deepCopy() {
      return new deactivateProfileFilter_args(this);
    }

    @Override
    public void clear() {
      this.profileFilterId = null;
      this.deactivatedUsername = null;
    }

    public String getProfileFilterId() {
      return this.profileFilterId;
    }

    public deactivateProfileFilter_args setProfileFilterId(String profileFilterId) {
      this.profileFilterId = profileFilterId;
      return this;
    }

    public void unsetProfileFilterId() {
      this.profileFilterId = null;
    }

    /** Returns true if field profileFilterId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileFilterId() {
      return this.profileFilterId != null;
    }

    public void setProfileFilterIdIsSet(boolean value) {
      if (!value) {
        this.profileFilterId = null;
      }
    }

    public String getDeactivatedUsername() {
      return this.deactivatedUsername;
    }

    public deactivateProfileFilter_args setDeactivatedUsername(String deactivatedUsername) {
      this.deactivatedUsername = deactivatedUsername;
      return this;
    }

    public void unsetDeactivatedUsername() {
      this.deactivatedUsername = null;
    }

    /** Returns true if field deactivatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetDeactivatedUsername() {
      return this.deactivatedUsername != null;
    }

    public void setDeactivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.deactivatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_FILTER_ID:
        if (value == null) {
          unsetProfileFilterId();
        } else {
          setProfileFilterId((String)value);
        }
        break;

      case DEACTIVATED_USERNAME:
        if (value == null) {
          unsetDeactivatedUsername();
        } else {
          setDeactivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_FILTER_ID:
        return getProfileFilterId();

      case DEACTIVATED_USERNAME:
        return getDeactivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_FILTER_ID:
        return isSetProfileFilterId();
      case DEACTIVATED_USERNAME:
        return isSetDeactivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateProfileFilter_args)
        return this.equals((deactivateProfileFilter_args)that);
      return false;
    }

    public boolean equals(deactivateProfileFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_profileFilterId = true && this.isSetProfileFilterId();
      boolean that_present_profileFilterId = true && that.isSetProfileFilterId();
      if (this_present_profileFilterId || that_present_profileFilterId) {
        if (!(this_present_profileFilterId && that_present_profileFilterId))
          return false;
        if (!this.profileFilterId.equals(that.profileFilterId))
          return false;
      }

      boolean this_present_deactivatedUsername = true && this.isSetDeactivatedUsername();
      boolean that_present_deactivatedUsername = true && that.isSetDeactivatedUsername();
      if (this_present_deactivatedUsername || that_present_deactivatedUsername) {
        if (!(this_present_deactivatedUsername && that_present_deactivatedUsername))
          return false;
        if (!this.deactivatedUsername.equals(that.deactivatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_profileFilterId = true && (isSetProfileFilterId());
      builder.append(present_profileFilterId);
      if (present_profileFilterId)
        builder.append(profileFilterId);

      boolean present_deactivatedUsername = true && (isSetDeactivatedUsername());
      builder.append(present_deactivatedUsername);
      if (present_deactivatedUsername)
        builder.append(deactivatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deactivateProfileFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileFilterId()).compareTo(other.isSetProfileFilterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileFilterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileFilterId, other.profileFilterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeactivatedUsername()).compareTo(other.isSetDeactivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeactivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deactivatedUsername, other.deactivatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateProfileFilter_args(");
      boolean first = true;

      sb.append("profileFilterId:");
      if (this.profileFilterId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileFilterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deactivatedUsername:");
      if (this.deactivatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.deactivatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateProfileFilter_argsStandardSchemeFactory implements SchemeFactory {
      public deactivateProfileFilter_argsStandardScheme getScheme() {
        return new deactivateProfileFilter_argsStandardScheme();
      }
    }

    private static class deactivateProfileFilter_argsStandardScheme extends StandardScheme<deactivateProfileFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateProfileFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_FILTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileFilterId = iprot.readString();
                struct.setProfileFilterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deactivatedUsername = iprot.readString();
                struct.setDeactivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateProfileFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileFilterId != null) {
          oprot.writeFieldBegin(PROFILE_FILTER_ID_FIELD_DESC);
          oprot.writeString(struct.profileFilterId);
          oprot.writeFieldEnd();
        }
        if (struct.deactivatedUsername != null) {
          oprot.writeFieldBegin(DEACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.deactivatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateProfileFilter_argsTupleSchemeFactory implements SchemeFactory {
      public deactivateProfileFilter_argsTupleScheme getScheme() {
        return new deactivateProfileFilter_argsTupleScheme();
      }
    }

    private static class deactivateProfileFilter_argsTupleScheme extends TupleScheme<deactivateProfileFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileFilterId()) {
          optionals.set(0);
        }
        if (struct.isSetDeactivatedUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProfileFilterId()) {
          oprot.writeString(struct.profileFilterId);
        }
        if (struct.isSetDeactivatedUsername()) {
          oprot.writeString(struct.deactivatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateProfileFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.profileFilterId = iprot.readString();
          struct.setProfileFilterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deactivatedUsername = iprot.readString();
          struct.setDeactivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class deactivateProfileFilter_result implements org.apache.thrift.TBase<deactivateProfileFilter_result, deactivateProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateProfileFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateProfileFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateProfileFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateProfileFilter_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateProfileFilter_result.class, metaDataMap);
    }

    public deactivateProfileFilter_result() {
    }

    public deactivateProfileFilter_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateProfileFilter_result(deactivateProfileFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deactivateProfileFilter_result deepCopy() {
      return new deactivateProfileFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public deactivateProfileFilter_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deactivateProfileFilter_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateProfileFilter_result)
        return this.equals((deactivateProfileFilter_result)that);
      return false;
    }

    public boolean equals(deactivateProfileFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deactivateProfileFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateProfileFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateProfileFilter_resultStandardSchemeFactory implements SchemeFactory {
      public deactivateProfileFilter_resultStandardScheme getScheme() {
        return new deactivateProfileFilter_resultStandardScheme();
      }
    }

    private static class deactivateProfileFilter_resultStandardScheme extends StandardScheme<deactivateProfileFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateProfileFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateProfileFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateProfileFilter_resultTupleSchemeFactory implements SchemeFactory {
      public deactivateProfileFilter_resultTupleScheme getScheme() {
        return new deactivateProfileFilter_resultTupleScheme();
      }
    }

    private static class deactivateProfileFilter_resultTupleScheme extends TupleScheme<deactivateProfileFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateProfileFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteProfileFilterRecord_args implements org.apache.thrift.TBase<deleteProfileFilterRecord_args, deleteProfileFilterRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProfileFilterRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProfileFilterRecord_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deactivatedUsername", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProfileFilterRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProfileFilterRecord_argsTupleSchemeFactory());
    }

    public String schemaId; // required
    public String endpointGroupId; // required
    public String deactivatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_ID((short)1, "schemaId"),
      ENDPOINT_GROUP_ID((short)2, "endpointGroupId"),
      DEACTIVATED_USERNAME((short)3, "deactivatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_ID
            return SCHEMA_ID;
          case 2: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 3: // DEACTIVATED_USERNAME
            return DEACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.DEACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("deactivatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProfileFilterRecord_args.class, metaDataMap);
    }

    public deleteProfileFilterRecord_args() {
    }

    public deleteProfileFilterRecord_args(
      String schemaId,
      String endpointGroupId,
      String deactivatedUsername)
    {
      this();
      this.schemaId = schemaId;
      this.endpointGroupId = endpointGroupId;
      this.deactivatedUsername = deactivatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProfileFilterRecord_args(deleteProfileFilterRecord_args other) {
      if (other.isSetSchemaId()) {
        this.schemaId = other.schemaId;
      }
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      if (other.isSetDeactivatedUsername()) {
        this.deactivatedUsername = other.deactivatedUsername;
      }
    }

    public deleteProfileFilterRecord_args deepCopy() {
      return new deleteProfileFilterRecord_args(this);
    }

    @Override
    public void clear() {
      this.schemaId = null;
      this.endpointGroupId = null;
      this.deactivatedUsername = null;
    }

    public String getSchemaId() {
      return this.schemaId;
    }

    public deleteProfileFilterRecord_args setSchemaId(String schemaId) {
      this.schemaId = schemaId;
      return this;
    }

    public void unsetSchemaId() {
      this.schemaId = null;
    }

    /** Returns true if field schemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaId() {
      return this.schemaId != null;
    }

    public void setSchemaIdIsSet(boolean value) {
      if (!value) {
        this.schemaId = null;
      }
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public deleteProfileFilterRecord_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public String getDeactivatedUsername() {
      return this.deactivatedUsername;
    }

    public deleteProfileFilterRecord_args setDeactivatedUsername(String deactivatedUsername) {
      this.deactivatedUsername = deactivatedUsername;
      return this;
    }

    public void unsetDeactivatedUsername() {
      this.deactivatedUsername = null;
    }

    /** Returns true if field deactivatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetDeactivatedUsername() {
      return this.deactivatedUsername != null;
    }

    public void setDeactivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.deactivatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEMA_ID:
        if (value == null) {
          unsetSchemaId();
        } else {
          setSchemaId((String)value);
        }
        break;

      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case DEACTIVATED_USERNAME:
        if (value == null) {
          unsetDeactivatedUsername();
        } else {
          setDeactivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_ID:
        return getSchemaId();

      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case DEACTIVATED_USERNAME:
        return getDeactivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_ID:
        return isSetSchemaId();
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case DEACTIVATED_USERNAME:
        return isSetDeactivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProfileFilterRecord_args)
        return this.equals((deleteProfileFilterRecord_args)that);
      return false;
    }

    public boolean equals(deleteProfileFilterRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_schemaId = true && this.isSetSchemaId();
      boolean that_present_schemaId = true && that.isSetSchemaId();
      if (this_present_schemaId || that_present_schemaId) {
        if (!(this_present_schemaId && that_present_schemaId))
          return false;
        if (!this.schemaId.equals(that.schemaId))
          return false;
      }

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_deactivatedUsername = true && this.isSetDeactivatedUsername();
      boolean that_present_deactivatedUsername = true && that.isSetDeactivatedUsername();
      if (this_present_deactivatedUsername || that_present_deactivatedUsername) {
        if (!(this_present_deactivatedUsername && that_present_deactivatedUsername))
          return false;
        if (!this.deactivatedUsername.equals(that.deactivatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_schemaId = true && (isSetSchemaId());
      builder.append(present_schemaId);
      if (present_schemaId)
        builder.append(schemaId);

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_deactivatedUsername = true && (isSetDeactivatedUsername());
      builder.append(present_deactivatedUsername);
      if (present_deactivatedUsername)
        builder.append(deactivatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteProfileFilterRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemaId()).compareTo(other.isSetSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaId, other.schemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeactivatedUsername()).compareTo(other.isSetDeactivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeactivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deactivatedUsername, other.deactivatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProfileFilterRecord_args(");
      boolean first = true;

      sb.append("schemaId:");
      if (this.schemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deactivatedUsername:");
      if (this.deactivatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.deactivatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProfileFilterRecord_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProfileFilterRecord_argsStandardScheme getScheme() {
        return new deleteProfileFilterRecord_argsStandardScheme();
      }
    }

    private static class deleteProfileFilterRecord_argsStandardScheme extends StandardScheme<deleteProfileFilterRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaId = iprot.readString();
                struct.setSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deactivatedUsername = iprot.readString();
                struct.setDeactivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaId != null) {
          oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.schemaId);
          oprot.writeFieldEnd();
        }
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.deactivatedUsername != null) {
          oprot.writeFieldBegin(DEACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.deactivatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProfileFilterRecord_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProfileFilterRecord_argsTupleScheme getScheme() {
        return new deleteProfileFilterRecord_argsTupleScheme();
      }
    }

    private static class deleteProfileFilterRecord_argsTupleScheme extends TupleScheme<deleteProfileFilterRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemaId()) {
          optionals.set(0);
        }
        if (struct.isSetEndpointGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetDeactivatedUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchemaId()) {
          oprot.writeString(struct.schemaId);
        }
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetDeactivatedUsername()) {
          oprot.writeString(struct.deactivatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProfileFilterRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schemaId = iprot.readString();
          struct.setSchemaIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.deactivatedUsername = iprot.readString();
          struct.setDeactivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class deleteProfileFilterRecord_result implements org.apache.thrift.TBase<deleteProfileFilterRecord_result, deleteProfileFilterRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProfileFilterRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProfileFilterRecord_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProfileFilterRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProfileFilterRecord_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProfileFilterRecord_result.class, metaDataMap);
    }

    public deleteProfileFilterRecord_result() {
    }

    public deleteProfileFilterRecord_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProfileFilterRecord_result(deleteProfileFilterRecord_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteProfileFilterRecord_result deepCopy() {
      return new deleteProfileFilterRecord_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteProfileFilterRecord_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProfileFilterRecord_result)
        return this.equals((deleteProfileFilterRecord_result)that);
      return false;
    }

    public boolean equals(deleteProfileFilterRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteProfileFilterRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProfileFilterRecord_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProfileFilterRecord_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProfileFilterRecord_resultStandardScheme getScheme() {
        return new deleteProfileFilterRecord_resultStandardScheme();
      }
    }

    private static class deleteProfileFilterRecord_resultStandardScheme extends StandardScheme<deleteProfileFilterRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProfileFilterRecord_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProfileFilterRecord_resultTupleScheme getScheme() {
        return new deleteProfileFilterRecord_resultTupleScheme();
      }
    }

    private static class deleteProfileFilterRecord_resultTupleScheme extends TupleScheme<deleteProfileFilterRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProfileFilterRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationRecordsByEndpointGroupId_args implements org.apache.thrift.TBase<getConfigurationRecordsByEndpointGroupId_args, getConfigurationRecordsByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationRecordsByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationRecordsByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INCLUDE_DEPRECATED_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDeprecated", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationRecordsByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationRecordsByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required
    public boolean includeDeprecated; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId"),
      INCLUDE_DEPRECATED((short)2, "includeDeprecated");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 2: // INCLUDE_DEPRECATED
            return INCLUDE_DEPRECATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INCLUDEDEPRECATED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.INCLUDE_DEPRECATED, new org.apache.thrift.meta_data.FieldMetaData("includeDeprecated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationRecordsByEndpointGroupId_args.class, metaDataMap);
    }

    public getConfigurationRecordsByEndpointGroupId_args() {
    }

    public getConfigurationRecordsByEndpointGroupId_args(
      String endpointGroupId,
      boolean includeDeprecated)
    {
      this();
      this.endpointGroupId = endpointGroupId;
      this.includeDeprecated = includeDeprecated;
      setIncludeDeprecatedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationRecordsByEndpointGroupId_args(getConfigurationRecordsByEndpointGroupId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      this.includeDeprecated = other.includeDeprecated;
    }

    public getConfigurationRecordsByEndpointGroupId_args deepCopy() {
      return new getConfigurationRecordsByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
      setIncludeDeprecatedIsSet(false);
      this.includeDeprecated = false;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getConfigurationRecordsByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public boolean isIncludeDeprecated() {
      return this.includeDeprecated;
    }

    public getConfigurationRecordsByEndpointGroupId_args setIncludeDeprecated(boolean includeDeprecated) {
      this.includeDeprecated = includeDeprecated;
      setIncludeDeprecatedIsSet(true);
      return this;
    }

    public void unsetIncludeDeprecated() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID);
    }

    /** Returns true if field includeDeprecated is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludeDeprecated() {
      return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID);
    }

    public void setIncludeDeprecatedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDEPRECATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case INCLUDE_DEPRECATED:
        if (value == null) {
          unsetIncludeDeprecated();
        } else {
          setIncludeDeprecated((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case INCLUDE_DEPRECATED:
        return Boolean.valueOf(isIncludeDeprecated());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case INCLUDE_DEPRECATED:
        return isSetIncludeDeprecated();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationRecordsByEndpointGroupId_args)
        return this.equals((getConfigurationRecordsByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getConfigurationRecordsByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_includeDeprecated = true;
      boolean that_present_includeDeprecated = true;
      if (this_present_includeDeprecated || that_present_includeDeprecated) {
        if (!(this_present_includeDeprecated && that_present_includeDeprecated))
          return false;
        if (this.includeDeprecated != that.includeDeprecated)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_includeDeprecated = true;
      builder.append(present_includeDeprecated);
      if (present_includeDeprecated)
        builder.append(includeDeprecated);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationRecordsByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIncludeDeprecated()).compareTo(other.isSetIncludeDeprecated());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludeDeprecated()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDeprecated, other.includeDeprecated);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationRecordsByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("includeDeprecated:");
      sb.append(this.includeDeprecated);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getConfigurationRecordsByEndpointGroupId_argsStandardScheme getScheme() {
        return new getConfigurationRecordsByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_argsStandardScheme extends StandardScheme<getConfigurationRecordsByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INCLUDE_DEPRECATED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.includeDeprecated = iprot.readBool();
                struct.setIncludeDeprecatedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INCLUDE_DEPRECATED_FIELD_DESC);
        oprot.writeBool(struct.includeDeprecated);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationRecordsByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getConfigurationRecordsByEndpointGroupId_argsTupleScheme getScheme() {
        return new getConfigurationRecordsByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_argsTupleScheme extends TupleScheme<getConfigurationRecordsByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetIncludeDeprecated()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetIncludeDeprecated()) {
          oprot.writeBool(struct.includeDeprecated);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecordsByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.includeDeprecated = iprot.readBool();
          struct.setIncludeDeprecatedIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationRecordsByEndpointGroupId_result implements org.apache.thrift.TBase<getConfigurationRecordsByEndpointGroupId_result, getConfigurationRecordsByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationRecordsByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationRecordsByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationRecordsByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationRecordsByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationRecordsByEndpointGroupId_result.class, metaDataMap);
    }

    public getConfigurationRecordsByEndpointGroupId_result() {
    }

    public getConfigurationRecordsByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationRecordsByEndpointGroupId_result(getConfigurationRecordsByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfigurationRecordsByEndpointGroupId_result deepCopy() {
      return new getConfigurationRecordsByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getConfigurationRecordsByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfigurationRecordsByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationRecordsByEndpointGroupId_result)
        return this.equals((getConfigurationRecordsByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getConfigurationRecordsByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationRecordsByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationRecordsByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getConfigurationRecordsByEndpointGroupId_resultStandardScheme getScheme() {
        return new getConfigurationRecordsByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_resultStandardScheme extends StandardScheme<getConfigurationRecordsByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem114;
                    _elem114 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem114.read(iprot);
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationRecordsByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getConfigurationRecordsByEndpointGroupId_resultTupleScheme getScheme() {
        return new getConfigurationRecordsByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getConfigurationRecordsByEndpointGroupId_resultTupleScheme extends TupleScheme<getConfigurationRecordsByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecordsByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem119;
              _elem119 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem119.read(iprot);
              struct.success.add(_elem119);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationRecord_args implements org.apache.thrift.TBase<getConfigurationRecord_args, getConfigurationRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationRecord_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationRecord_argsTupleSchemeFactory());
    }

    public String schemaId; // required
    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_ID((short)1, "schemaId"),
      ENDPOINT_GROUP_ID((short)2, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_ID
            return SCHEMA_ID;
          case 2: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationRecord_args.class, metaDataMap);
    }

    public getConfigurationRecord_args() {
    }

    public getConfigurationRecord_args(
      String schemaId,
      String endpointGroupId)
    {
      this();
      this.schemaId = schemaId;
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationRecord_args(getConfigurationRecord_args other) {
      if (other.isSetSchemaId()) {
        this.schemaId = other.schemaId;
      }
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getConfigurationRecord_args deepCopy() {
      return new getConfigurationRecord_args(this);
    }

    @Override
    public void clear() {
      this.schemaId = null;
      this.endpointGroupId = null;
    }

    public String getSchemaId() {
      return this.schemaId;
    }

    public getConfigurationRecord_args setSchemaId(String schemaId) {
      this.schemaId = schemaId;
      return this;
    }

    public void unsetSchemaId() {
      this.schemaId = null;
    }

    /** Returns true if field schemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaId() {
      return this.schemaId != null;
    }

    public void setSchemaIdIsSet(boolean value) {
      if (!value) {
        this.schemaId = null;
      }
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getConfigurationRecord_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEMA_ID:
        if (value == null) {
          unsetSchemaId();
        } else {
          setSchemaId((String)value);
        }
        break;

      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_ID:
        return getSchemaId();

      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_ID:
        return isSetSchemaId();
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationRecord_args)
        return this.equals((getConfigurationRecord_args)that);
      return false;
    }

    public boolean equals(getConfigurationRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_schemaId = true && this.isSetSchemaId();
      boolean that_present_schemaId = true && that.isSetSchemaId();
      if (this_present_schemaId || that_present_schemaId) {
        if (!(this_present_schemaId && that_present_schemaId))
          return false;
        if (!this.schemaId.equals(that.schemaId))
          return false;
      }

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_schemaId = true && (isSetSchemaId());
      builder.append(present_schemaId);
      if (present_schemaId)
        builder.append(schemaId);

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemaId()).compareTo(other.isSetSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaId, other.schemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationRecord_args(");
      boolean first = true;

      sb.append("schemaId:");
      if (this.schemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getConfigurationRecord_argsStandardScheme getScheme() {
        return new getConfigurationRecord_argsStandardScheme();
      }
    }

    private static class getConfigurationRecord_argsStandardScheme extends StandardScheme<getConfigurationRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaId = iprot.readString();
                struct.setSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaId != null) {
          oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.schemaId);
          oprot.writeFieldEnd();
        }
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getConfigurationRecord_argsTupleScheme getScheme() {
        return new getConfigurationRecord_argsTupleScheme();
      }
    }

    private static class getConfigurationRecord_argsTupleScheme extends TupleScheme<getConfigurationRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemaId()) {
          optionals.set(0);
        }
        if (struct.isSetEndpointGroupId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchemaId()) {
          oprot.writeString(struct.schemaId);
        }
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schemaId = iprot.readString();
          struct.setSchemaIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getConfigurationRecord_result implements org.apache.thrift.TBase<getConfigurationRecord_result, getConfigurationRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigurationRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigurationRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfigurationRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfigurationRecord_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigurationRecord_result.class, metaDataMap);
    }

    public getConfigurationRecord_result() {
    }

    public getConfigurationRecord_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfigurationRecord_result(getConfigurationRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfigurationRecord_result deepCopy() {
      return new getConfigurationRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getConfigurationRecord_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfigurationRecord_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfigurationRecord_result)
        return this.equals((getConfigurationRecord_result)that);
      return false;
    }

    public boolean equals(getConfigurationRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfigurationRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfigurationRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfigurationRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getConfigurationRecord_resultStandardScheme getScheme() {
        return new getConfigurationRecord_resultStandardScheme();
      }
    }

    private static class getConfigurationRecord_resultStandardScheme extends StandardScheme<getConfigurationRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigurationRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigurationRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfigurationRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getConfigurationRecord_resultTupleScheme getScheme() {
        return new getConfigurationRecord_resultTupleScheme();
      }
    }

    private static class getConfigurationRecord_resultTupleScheme extends TupleScheme<getConfigurationRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfigurationRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVacantConfigurationSchemasByEndpointGroupId_args implements org.apache.thrift.TBase<getVacantConfigurationSchemasByEndpointGroupId_args, getVacantConfigurationSchemasByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantConfigurationSchemasByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantConfigurationSchemasByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantConfigurationSchemasByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantConfigurationSchemasByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantConfigurationSchemasByEndpointGroupId_args.class, metaDataMap);
    }

    public getVacantConfigurationSchemasByEndpointGroupId_args() {
    }

    public getVacantConfigurationSchemasByEndpointGroupId_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantConfigurationSchemasByEndpointGroupId_args(getVacantConfigurationSchemasByEndpointGroupId_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getVacantConfigurationSchemasByEndpointGroupId_args deepCopy() {
      return new getVacantConfigurationSchemasByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getVacantConfigurationSchemasByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantConfigurationSchemasByEndpointGroupId_args)
        return this.equals((getVacantConfigurationSchemasByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getVacantConfigurationSchemasByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantConfigurationSchemasByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantConfigurationSchemasByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getVacantConfigurationSchemasByEndpointGroupId_argsStandardScheme getScheme() {
        return new getVacantConfigurationSchemasByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_argsStandardScheme extends StandardScheme<getVacantConfigurationSchemasByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantConfigurationSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantConfigurationSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getVacantConfigurationSchemasByEndpointGroupId_argsTupleScheme getScheme() {
        return new getVacantConfigurationSchemasByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_argsTupleScheme extends TupleScheme<getVacantConfigurationSchemasByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantConfigurationSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantConfigurationSchemasByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getVacantConfigurationSchemasByEndpointGroupId_result implements org.apache.thrift.TBase<getVacantConfigurationSchemasByEndpointGroupId_result, getVacantConfigurationSchemasByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantConfigurationSchemasByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantConfigurationSchemasByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantConfigurationSchemasByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantConfigurationSchemasByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantConfigurationSchemasByEndpointGroupId_result.class, metaDataMap);
    }

    public getVacantConfigurationSchemasByEndpointGroupId_result() {
    }

    public getVacantConfigurationSchemasByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantConfigurationSchemasByEndpointGroupId_result(getVacantConfigurationSchemasByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getVacantConfigurationSchemasByEndpointGroupId_result deepCopy() {
      return new getVacantConfigurationSchemasByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getVacantConfigurationSchemasByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getVacantConfigurationSchemasByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantConfigurationSchemasByEndpointGroupId_result)
        return this.equals((getVacantConfigurationSchemasByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getVacantConfigurationSchemasByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantConfigurationSchemasByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantConfigurationSchemasByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getVacantConfigurationSchemasByEndpointGroupId_resultStandardScheme getScheme() {
        return new getVacantConfigurationSchemasByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_resultStandardScheme extends StandardScheme<getVacantConfigurationSchemasByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantConfigurationSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list120.size);
                  for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem122;
                    _elem122 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem122.read(iprot);
                    struct.success.add(_elem122);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantConfigurationSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getVacantConfigurationSchemasByEndpointGroupId_resultTupleScheme getScheme() {
        return new getVacantConfigurationSchemasByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getVacantConfigurationSchemasByEndpointGroupId_resultTupleScheme extends TupleScheme<getVacantConfigurationSchemasByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantConfigurationSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantConfigurationSchemasByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list125.size);
            for (int _i126 = 0; _i126 < _list125.size; ++_i126)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem127;
              _elem127 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem127.read(iprot);
              struct.success.add(_elem127);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getConfiguration_args implements org.apache.thrift.TBase<getConfiguration_args, getConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfiguration_argsTupleSchemeFactory());
    }

    public String configurationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION_ID((short)1, "configurationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION_ID
            return CONFIGURATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION_ID, new org.apache.thrift.meta_data.FieldMetaData("configurationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfiguration_args.class, metaDataMap);
    }

    public getConfiguration_args() {
    }

    public getConfiguration_args(
      String configurationId)
    {
      this();
      this.configurationId = configurationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfiguration_args(getConfiguration_args other) {
      if (other.isSetConfigurationId()) {
        this.configurationId = other.configurationId;
      }
    }

    public getConfiguration_args deepCopy() {
      return new getConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configurationId = null;
    }

    public String getConfigurationId() {
      return this.configurationId;
    }

    public getConfiguration_args setConfigurationId(String configurationId) {
      this.configurationId = configurationId;
      return this;
    }

    public void unsetConfigurationId() {
      this.configurationId = null;
    }

    /** Returns true if field configurationId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationId() {
      return this.configurationId != null;
    }

    public void setConfigurationIdIsSet(boolean value) {
      if (!value) {
        this.configurationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION_ID:
        if (value == null) {
          unsetConfigurationId();
        } else {
          setConfigurationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION_ID:
        return getConfigurationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION_ID:
        return isSetConfigurationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfiguration_args)
        return this.equals((getConfiguration_args)that);
      return false;
    }

    public boolean equals(getConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configurationId = true && this.isSetConfigurationId();
      boolean that_present_configurationId = true && that.isSetConfigurationId();
      if (this_present_configurationId || that_present_configurationId) {
        if (!(this_present_configurationId && that_present_configurationId))
          return false;
        if (!this.configurationId.equals(that.configurationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configurationId = true && (isSetConfigurationId());
      builder.append(present_configurationId);
      if (present_configurationId)
        builder.append(configurationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigurationId()).compareTo(other.isSetConfigurationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationId, other.configurationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfiguration_args(");
      boolean first = true;

      sb.append("configurationId:");
      if (this.configurationId == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public getConfiguration_argsStandardScheme getScheme() {
        return new getConfiguration_argsStandardScheme();
      }
    }

    private static class getConfiguration_argsStandardScheme extends StandardScheme<getConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurationId = iprot.readString();
                struct.setConfigurationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurationId != null) {
          oprot.writeFieldBegin(CONFIGURATION_ID_FIELD_DESC);
          oprot.writeString(struct.configurationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public getConfiguration_argsTupleScheme getScheme() {
        return new getConfiguration_argsTupleScheme();
      }
    }

    private static class getConfiguration_argsTupleScheme extends TupleScheme<getConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigurationId()) {
          oprot.writeString(struct.configurationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configurationId = iprot.readString();
          struct.setConfigurationIdIsSet(true);
        }
      }
    }

  }

  public static class getConfiguration_result implements org.apache.thrift.TBase<getConfiguration_result, getConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConfiguration_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfiguration_result.class, metaDataMap);
    }

    public getConfiguration_result() {
    }

    public getConfiguration_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConfiguration_result(getConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getConfiguration_result deepCopy() {
      return new getConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getConfiguration_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getConfiguration_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConfiguration_result)
        return this.equals((getConfiguration_result)that);
      return false;
    }

    public boolean equals(getConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public getConfiguration_resultStandardScheme getScheme() {
        return new getConfiguration_resultStandardScheme();
      }
    }

    private static class getConfiguration_resultStandardScheme extends StandardScheme<getConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public getConfiguration_resultTupleScheme getScheme() {
        return new getConfiguration_resultTupleScheme();
      }
    }

    private static class getConfiguration_resultTupleScheme extends TupleScheme<getConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editConfiguration_args implements org.apache.thrift.TBase<editConfiguration_args, editConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<editConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editConfiguration_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION((short)1, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editConfiguration_args.class, metaDataMap);
    }

    public editConfiguration_args() {
    }

    public editConfiguration_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration)
    {
      this();
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editConfiguration_args(editConfiguration_args other) {
      if (other.isSetConfiguration()) {
        this.configuration = other.configuration;
      }
    }

    public editConfiguration_args deepCopy() {
      return new editConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configuration = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfiguration() {
      return this.configuration;
    }

    public editConfiguration_args setConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editConfiguration_args)
        return this.equals((editConfiguration_args)that);
      return false;
    }

    public boolean equals(editConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configuration = true && (isSetConfiguration());
      builder.append(present_configuration);
      if (present_configuration)
        builder.append(configuration);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editConfiguration_args(");
      boolean first = true;

      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public editConfiguration_argsStandardScheme getScheme() {
        return new editConfiguration_argsStandardScheme();
      }
    }

    private static class editConfiguration_argsStandardScheme extends StandardScheme<editConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public editConfiguration_argsTupleScheme getScheme() {
        return new editConfiguration_argsTupleScheme();
      }
    }

    private static class editConfiguration_argsTupleScheme extends TupleScheme<editConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfiguration()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configuration = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class editConfiguration_result implements org.apache.thrift.TBase<editConfiguration_result, editConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<editConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editConfiguration_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editConfiguration_result.class, metaDataMap);
    }

    public editConfiguration_result() {
    }

    public editConfiguration_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editConfiguration_result(editConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editConfiguration_result deepCopy() {
      return new editConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editConfiguration_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editConfiguration_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editConfiguration_result)
        return this.equals((editConfiguration_result)that);
      return false;
    }

    public boolean equals(editConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public editConfiguration_resultStandardScheme getScheme() {
        return new editConfiguration_resultStandardScheme();
      }
    }

    private static class editConfiguration_resultStandardScheme extends StandardScheme<editConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public editConfiguration_resultTupleScheme getScheme() {
        return new editConfiguration_resultTupleScheme();
      }
    }

    private static class editConfiguration_resultTupleScheme extends TupleScheme<editConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class activateConfiguration_args implements org.apache.thrift.TBase<activateConfiguration_args, activateConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activatedUsername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateConfiguration_argsTupleSchemeFactory());
    }

    public String configurationId; // required
    public String activatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION_ID((short)1, "configurationId"),
      ACTIVATED_USERNAME((short)2, "activatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION_ID
            return CONFIGURATION_ID;
          case 2: // ACTIVATED_USERNAME
            return ACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION_ID, new org.apache.thrift.meta_data.FieldMetaData("configurationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("activatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateConfiguration_args.class, metaDataMap);
    }

    public activateConfiguration_args() {
    }

    public activateConfiguration_args(
      String configurationId,
      String activatedUsername)
    {
      this();
      this.configurationId = configurationId;
      this.activatedUsername = activatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateConfiguration_args(activateConfiguration_args other) {
      if (other.isSetConfigurationId()) {
        this.configurationId = other.configurationId;
      }
      if (other.isSetActivatedUsername()) {
        this.activatedUsername = other.activatedUsername;
      }
    }

    public activateConfiguration_args deepCopy() {
      return new activateConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configurationId = null;
      this.activatedUsername = null;
    }

    public String getConfigurationId() {
      return this.configurationId;
    }

    public activateConfiguration_args setConfigurationId(String configurationId) {
      this.configurationId = configurationId;
      return this;
    }

    public void unsetConfigurationId() {
      this.configurationId = null;
    }

    /** Returns true if field configurationId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationId() {
      return this.configurationId != null;
    }

    public void setConfigurationIdIsSet(boolean value) {
      if (!value) {
        this.configurationId = null;
      }
    }

    public String getActivatedUsername() {
      return this.activatedUsername;
    }

    public activateConfiguration_args setActivatedUsername(String activatedUsername) {
      this.activatedUsername = activatedUsername;
      return this;
    }

    public void unsetActivatedUsername() {
      this.activatedUsername = null;
    }

    /** Returns true if field activatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetActivatedUsername() {
      return this.activatedUsername != null;
    }

    public void setActivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.activatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION_ID:
        if (value == null) {
          unsetConfigurationId();
        } else {
          setConfigurationId((String)value);
        }
        break;

      case ACTIVATED_USERNAME:
        if (value == null) {
          unsetActivatedUsername();
        } else {
          setActivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION_ID:
        return getConfigurationId();

      case ACTIVATED_USERNAME:
        return getActivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION_ID:
        return isSetConfigurationId();
      case ACTIVATED_USERNAME:
        return isSetActivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateConfiguration_args)
        return this.equals((activateConfiguration_args)that);
      return false;
    }

    public boolean equals(activateConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configurationId = true && this.isSetConfigurationId();
      boolean that_present_configurationId = true && that.isSetConfigurationId();
      if (this_present_configurationId || that_present_configurationId) {
        if (!(this_present_configurationId && that_present_configurationId))
          return false;
        if (!this.configurationId.equals(that.configurationId))
          return false;
      }

      boolean this_present_activatedUsername = true && this.isSetActivatedUsername();
      boolean that_present_activatedUsername = true && that.isSetActivatedUsername();
      if (this_present_activatedUsername || that_present_activatedUsername) {
        if (!(this_present_activatedUsername && that_present_activatedUsername))
          return false;
        if (!this.activatedUsername.equals(that.activatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configurationId = true && (isSetConfigurationId());
      builder.append(present_configurationId);
      if (present_configurationId)
        builder.append(configurationId);

      boolean present_activatedUsername = true && (isSetActivatedUsername());
      builder.append(present_activatedUsername);
      if (present_activatedUsername)
        builder.append(activatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(activateConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigurationId()).compareTo(other.isSetConfigurationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationId, other.configurationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivatedUsername()).compareTo(other.isSetActivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activatedUsername, other.activatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateConfiguration_args(");
      boolean first = true;

      sb.append("configurationId:");
      if (this.configurationId == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activatedUsername:");
      if (this.activatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.activatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public activateConfiguration_argsStandardScheme getScheme() {
        return new activateConfiguration_argsStandardScheme();
      }
    }

    private static class activateConfiguration_argsStandardScheme extends StandardScheme<activateConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurationId = iprot.readString();
                struct.setConfigurationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activatedUsername = iprot.readString();
                struct.setActivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurationId != null) {
          oprot.writeFieldBegin(CONFIGURATION_ID_FIELD_DESC);
          oprot.writeString(struct.configurationId);
          oprot.writeFieldEnd();
        }
        if (struct.activatedUsername != null) {
          oprot.writeFieldBegin(ACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.activatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public activateConfiguration_argsTupleScheme getScheme() {
        return new activateConfiguration_argsTupleScheme();
      }
    }

    private static class activateConfiguration_argsTupleScheme extends TupleScheme<activateConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurationId()) {
          optionals.set(0);
        }
        if (struct.isSetActivatedUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConfigurationId()) {
          oprot.writeString(struct.configurationId);
        }
        if (struct.isSetActivatedUsername()) {
          oprot.writeString(struct.activatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.configurationId = iprot.readString();
          struct.setConfigurationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activatedUsername = iprot.readString();
          struct.setActivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class activateConfiguration_result implements org.apache.thrift.TBase<activateConfiguration_result, activateConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateConfiguration_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateConfiguration_result.class, metaDataMap);
    }

    public activateConfiguration_result() {
    }

    public activateConfiguration_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateConfiguration_result(activateConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public activateConfiguration_result deepCopy() {
      return new activateConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public activateConfiguration_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public activateConfiguration_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateConfiguration_result)
        return this.equals((activateConfiguration_result)that);
      return false;
    }

    public boolean equals(activateConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(activateConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public activateConfiguration_resultStandardScheme getScheme() {
        return new activateConfiguration_resultStandardScheme();
      }
    }

    private static class activateConfiguration_resultStandardScheme extends StandardScheme<activateConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public activateConfiguration_resultTupleScheme getScheme() {
        return new activateConfiguration_resultTupleScheme();
      }
    }

    private static class activateConfiguration_resultTupleScheme extends TupleScheme<activateConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deactivateConfiguration_args implements org.apache.thrift.TBase<deactivateConfiguration_args, deactivateConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deactivatedUsername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateConfiguration_argsTupleSchemeFactory());
    }

    public String configurationId; // required
    public String deactivatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION_ID((short)1, "configurationId"),
      DEACTIVATED_USERNAME((short)2, "deactivatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION_ID
            return CONFIGURATION_ID;
          case 2: // DEACTIVATED_USERNAME
            return DEACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION_ID, new org.apache.thrift.meta_data.FieldMetaData("configurationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.DEACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("deactivatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateConfiguration_args.class, metaDataMap);
    }

    public deactivateConfiguration_args() {
    }

    public deactivateConfiguration_args(
      String configurationId,
      String deactivatedUsername)
    {
      this();
      this.configurationId = configurationId;
      this.deactivatedUsername = deactivatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateConfiguration_args(deactivateConfiguration_args other) {
      if (other.isSetConfigurationId()) {
        this.configurationId = other.configurationId;
      }
      if (other.isSetDeactivatedUsername()) {
        this.deactivatedUsername = other.deactivatedUsername;
      }
    }

    public deactivateConfiguration_args deepCopy() {
      return new deactivateConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configurationId = null;
      this.deactivatedUsername = null;
    }

    public String getConfigurationId() {
      return this.configurationId;
    }

    public deactivateConfiguration_args setConfigurationId(String configurationId) {
      this.configurationId = configurationId;
      return this;
    }

    public void unsetConfigurationId() {
      this.configurationId = null;
    }

    /** Returns true if field configurationId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationId() {
      return this.configurationId != null;
    }

    public void setConfigurationIdIsSet(boolean value) {
      if (!value) {
        this.configurationId = null;
      }
    }

    public String getDeactivatedUsername() {
      return this.deactivatedUsername;
    }

    public deactivateConfiguration_args setDeactivatedUsername(String deactivatedUsername) {
      this.deactivatedUsername = deactivatedUsername;
      return this;
    }

    public void unsetDeactivatedUsername() {
      this.deactivatedUsername = null;
    }

    /** Returns true if field deactivatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetDeactivatedUsername() {
      return this.deactivatedUsername != null;
    }

    public void setDeactivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.deactivatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION_ID:
        if (value == null) {
          unsetConfigurationId();
        } else {
          setConfigurationId((String)value);
        }
        break;

      case DEACTIVATED_USERNAME:
        if (value == null) {
          unsetDeactivatedUsername();
        } else {
          setDeactivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION_ID:
        return getConfigurationId();

      case DEACTIVATED_USERNAME:
        return getDeactivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION_ID:
        return isSetConfigurationId();
      case DEACTIVATED_USERNAME:
        return isSetDeactivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateConfiguration_args)
        return this.equals((deactivateConfiguration_args)that);
      return false;
    }

    public boolean equals(deactivateConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configurationId = true && this.isSetConfigurationId();
      boolean that_present_configurationId = true && that.isSetConfigurationId();
      if (this_present_configurationId || that_present_configurationId) {
        if (!(this_present_configurationId && that_present_configurationId))
          return false;
        if (!this.configurationId.equals(that.configurationId))
          return false;
      }

      boolean this_present_deactivatedUsername = true && this.isSetDeactivatedUsername();
      boolean that_present_deactivatedUsername = true && that.isSetDeactivatedUsername();
      if (this_present_deactivatedUsername || that_present_deactivatedUsername) {
        if (!(this_present_deactivatedUsername && that_present_deactivatedUsername))
          return false;
        if (!this.deactivatedUsername.equals(that.deactivatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configurationId = true && (isSetConfigurationId());
      builder.append(present_configurationId);
      if (present_configurationId)
        builder.append(configurationId);

      boolean present_deactivatedUsername = true && (isSetDeactivatedUsername());
      builder.append(present_deactivatedUsername);
      if (present_deactivatedUsername)
        builder.append(deactivatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deactivateConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigurationId()).compareTo(other.isSetConfigurationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationId, other.configurationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeactivatedUsername()).compareTo(other.isSetDeactivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeactivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deactivatedUsername, other.deactivatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateConfiguration_args(");
      boolean first = true;

      sb.append("configurationId:");
      if (this.configurationId == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deactivatedUsername:");
      if (this.deactivatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.deactivatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public deactivateConfiguration_argsStandardScheme getScheme() {
        return new deactivateConfiguration_argsStandardScheme();
      }
    }

    private static class deactivateConfiguration_argsStandardScheme extends StandardScheme<deactivateConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurationId = iprot.readString();
                struct.setConfigurationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deactivatedUsername = iprot.readString();
                struct.setDeactivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurationId != null) {
          oprot.writeFieldBegin(CONFIGURATION_ID_FIELD_DESC);
          oprot.writeString(struct.configurationId);
          oprot.writeFieldEnd();
        }
        if (struct.deactivatedUsername != null) {
          oprot.writeFieldBegin(DEACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.deactivatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public deactivateConfiguration_argsTupleScheme getScheme() {
        return new deactivateConfiguration_argsTupleScheme();
      }
    }

    private static class deactivateConfiguration_argsTupleScheme extends TupleScheme<deactivateConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurationId()) {
          optionals.set(0);
        }
        if (struct.isSetDeactivatedUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConfigurationId()) {
          oprot.writeString(struct.configurationId);
        }
        if (struct.isSetDeactivatedUsername()) {
          oprot.writeString(struct.deactivatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.configurationId = iprot.readString();
          struct.setConfigurationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deactivatedUsername = iprot.readString();
          struct.setDeactivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class deactivateConfiguration_result implements org.apache.thrift.TBase<deactivateConfiguration_result, deactivateConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateConfiguration_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateConfiguration_result.class, metaDataMap);
    }

    public deactivateConfiguration_result() {
    }

    public deactivateConfiguration_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateConfiguration_result(deactivateConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deactivateConfiguration_result deepCopy() {
      return new deactivateConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public deactivateConfiguration_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deactivateConfiguration_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateConfiguration_result)
        return this.equals((deactivateConfiguration_result)that);
      return false;
    }

    public boolean equals(deactivateConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deactivateConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public deactivateConfiguration_resultStandardScheme getScheme() {
        return new deactivateConfiguration_resultStandardScheme();
      }
    }

    private static class deactivateConfiguration_resultStandardScheme extends StandardScheme<deactivateConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public deactivateConfiguration_resultTupleScheme getScheme() {
        return new deactivateConfiguration_resultTupleScheme();
      }
    }

    private static class deactivateConfiguration_resultTupleScheme extends TupleScheme<deactivateConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteConfigurationRecord_args implements org.apache.thrift.TBase<deleteConfigurationRecord_args, deleteConfigurationRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteConfigurationRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteConfigurationRecord_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEACTIVATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deactivatedUsername", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteConfigurationRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteConfigurationRecord_argsTupleSchemeFactory());
    }

    public String schemaId; // required
    public String endpointGroupId; // required
    public String deactivatedUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_ID((short)1, "schemaId"),
      ENDPOINT_GROUP_ID((short)2, "endpointGroupId"),
      DEACTIVATED_USERNAME((short)3, "deactivatedUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_ID
            return SCHEMA_ID;
          case 2: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          case 3: // DEACTIVATED_USERNAME
            return DEACTIVATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.DEACTIVATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("deactivatedUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteConfigurationRecord_args.class, metaDataMap);
    }

    public deleteConfigurationRecord_args() {
    }

    public deleteConfigurationRecord_args(
      String schemaId,
      String endpointGroupId,
      String deactivatedUsername)
    {
      this();
      this.schemaId = schemaId;
      this.endpointGroupId = endpointGroupId;
      this.deactivatedUsername = deactivatedUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteConfigurationRecord_args(deleteConfigurationRecord_args other) {
      if (other.isSetSchemaId()) {
        this.schemaId = other.schemaId;
      }
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
      if (other.isSetDeactivatedUsername()) {
        this.deactivatedUsername = other.deactivatedUsername;
      }
    }

    public deleteConfigurationRecord_args deepCopy() {
      return new deleteConfigurationRecord_args(this);
    }

    @Override
    public void clear() {
      this.schemaId = null;
      this.endpointGroupId = null;
      this.deactivatedUsername = null;
    }

    public String getSchemaId() {
      return this.schemaId;
    }

    public deleteConfigurationRecord_args setSchemaId(String schemaId) {
      this.schemaId = schemaId;
      return this;
    }

    public void unsetSchemaId() {
      this.schemaId = null;
    }

    /** Returns true if field schemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaId() {
      return this.schemaId != null;
    }

    public void setSchemaIdIsSet(boolean value) {
      if (!value) {
        this.schemaId = null;
      }
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public deleteConfigurationRecord_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public String getDeactivatedUsername() {
      return this.deactivatedUsername;
    }

    public deleteConfigurationRecord_args setDeactivatedUsername(String deactivatedUsername) {
      this.deactivatedUsername = deactivatedUsername;
      return this;
    }

    public void unsetDeactivatedUsername() {
      this.deactivatedUsername = null;
    }

    /** Returns true if field deactivatedUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetDeactivatedUsername() {
      return this.deactivatedUsername != null;
    }

    public void setDeactivatedUsernameIsSet(boolean value) {
      if (!value) {
        this.deactivatedUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEMA_ID:
        if (value == null) {
          unsetSchemaId();
        } else {
          setSchemaId((String)value);
        }
        break;

      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      case DEACTIVATED_USERNAME:
        if (value == null) {
          unsetDeactivatedUsername();
        } else {
          setDeactivatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_ID:
        return getSchemaId();

      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      case DEACTIVATED_USERNAME:
        return getDeactivatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_ID:
        return isSetSchemaId();
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      case DEACTIVATED_USERNAME:
        return isSetDeactivatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteConfigurationRecord_args)
        return this.equals((deleteConfigurationRecord_args)that);
      return false;
    }

    public boolean equals(deleteConfigurationRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_schemaId = true && this.isSetSchemaId();
      boolean that_present_schemaId = true && that.isSetSchemaId();
      if (this_present_schemaId || that_present_schemaId) {
        if (!(this_present_schemaId && that_present_schemaId))
          return false;
        if (!this.schemaId.equals(that.schemaId))
          return false;
      }

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      boolean this_present_deactivatedUsername = true && this.isSetDeactivatedUsername();
      boolean that_present_deactivatedUsername = true && that.isSetDeactivatedUsername();
      if (this_present_deactivatedUsername || that_present_deactivatedUsername) {
        if (!(this_present_deactivatedUsername && that_present_deactivatedUsername))
          return false;
        if (!this.deactivatedUsername.equals(that.deactivatedUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_schemaId = true && (isSetSchemaId());
      builder.append(present_schemaId);
      if (present_schemaId)
        builder.append(schemaId);

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      boolean present_deactivatedUsername = true && (isSetDeactivatedUsername());
      builder.append(present_deactivatedUsername);
      if (present_deactivatedUsername)
        builder.append(deactivatedUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteConfigurationRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemaId()).compareTo(other.isSetSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaId, other.schemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeactivatedUsername()).compareTo(other.isSetDeactivatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeactivatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deactivatedUsername, other.deactivatedUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteConfigurationRecord_args(");
      boolean first = true;

      sb.append("schemaId:");
      if (this.schemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deactivatedUsername:");
      if (this.deactivatedUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.deactivatedUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteConfigurationRecord_argsStandardSchemeFactory implements SchemeFactory {
      public deleteConfigurationRecord_argsStandardScheme getScheme() {
        return new deleteConfigurationRecord_argsStandardScheme();
      }
    }

    private static class deleteConfigurationRecord_argsStandardScheme extends StandardScheme<deleteConfigurationRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteConfigurationRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaId = iprot.readString();
                struct.setSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEACTIVATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deactivatedUsername = iprot.readString();
                struct.setDeactivatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteConfigurationRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaId != null) {
          oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.schemaId);
          oprot.writeFieldEnd();
        }
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.deactivatedUsername != null) {
          oprot.writeFieldBegin(DEACTIVATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.deactivatedUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteConfigurationRecord_argsTupleSchemeFactory implements SchemeFactory {
      public deleteConfigurationRecord_argsTupleScheme getScheme() {
        return new deleteConfigurationRecord_argsTupleScheme();
      }
    }

    private static class deleteConfigurationRecord_argsTupleScheme extends TupleScheme<deleteConfigurationRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteConfigurationRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemaId()) {
          optionals.set(0);
        }
        if (struct.isSetEndpointGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetDeactivatedUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchemaId()) {
          oprot.writeString(struct.schemaId);
        }
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
        if (struct.isSetDeactivatedUsername()) {
          oprot.writeString(struct.deactivatedUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteConfigurationRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schemaId = iprot.readString();
          struct.setSchemaIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.deactivatedUsername = iprot.readString();
          struct.setDeactivatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class deleteConfigurationRecord_result implements org.apache.thrift.TBase<deleteConfigurationRecord_result, deleteConfigurationRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteConfigurationRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteConfigurationRecord_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteConfigurationRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteConfigurationRecord_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteConfigurationRecord_result.class, metaDataMap);
    }

    public deleteConfigurationRecord_result() {
    }

    public deleteConfigurationRecord_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteConfigurationRecord_result(deleteConfigurationRecord_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteConfigurationRecord_result deepCopy() {
      return new deleteConfigurationRecord_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteConfigurationRecord_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteConfigurationRecord_result)
        return this.equals((deleteConfigurationRecord_result)that);
      return false;
    }

    public boolean equals(deleteConfigurationRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteConfigurationRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteConfigurationRecord_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteConfigurationRecord_resultStandardSchemeFactory implements SchemeFactory {
      public deleteConfigurationRecord_resultStandardScheme getScheme() {
        return new deleteConfigurationRecord_resultStandardScheme();
      }
    }

    private static class deleteConfigurationRecord_resultStandardScheme extends StandardScheme<deleteConfigurationRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteConfigurationRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteConfigurationRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteConfigurationRecord_resultTupleSchemeFactory implements SchemeFactory {
      public deleteConfigurationRecord_resultTupleScheme getScheme() {
        return new deleteConfigurationRecord_resultTupleScheme();
      }
    }

    private static class deleteConfigurationRecord_resultTupleScheme extends TupleScheme<deleteConfigurationRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteConfigurationRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteConfigurationRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editUserConfiguration_args implements org.apache.thrift.TBase<editUserConfiguration_args, editUserConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<editUserConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUserConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUserConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUserConfiguration_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATION((short)1, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUserConfiguration_args.class, metaDataMap);
    }

    public editUserConfiguration_args() {
    }

    public editUserConfiguration_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration)
    {
      this();
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUserConfiguration_args(editUserConfiguration_args other) {
      if (other.isSetConfiguration()) {
        this.configuration = other.configuration;
      }
    }

    public editUserConfiguration_args deepCopy() {
      return new editUserConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configuration = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getConfiguration() {
      return this.configuration;
    }

    public editUserConfiguration_args setConfiguration(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUserConfiguration_args)
        return this.equals((editUserConfiguration_args)that);
      return false;
    }

    public boolean equals(editUserConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_configuration = true && (isSetConfiguration());
      builder.append(present_configuration);
      if (present_configuration)
        builder.append(configuration);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUserConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUserConfiguration_args(");
      boolean first = true;

      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUserConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public editUserConfiguration_argsStandardScheme getScheme() {
        return new editUserConfiguration_argsStandardScheme();
      }
    }

    private static class editUserConfiguration_argsStandardScheme extends StandardScheme<editUserConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUserConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUserConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUserConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public editUserConfiguration_argsTupleScheme getScheme() {
        return new editUserConfiguration_argsTupleScheme();
      }
    }

    private static class editUserConfiguration_argsTupleScheme extends TupleScheme<editUserConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUserConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfiguration()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUserConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configuration = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class editUserConfiguration_result implements org.apache.thrift.TBase<editUserConfiguration_result, editUserConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<editUserConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUserConfiguration_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUserConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUserConfiguration_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUserConfiguration_result.class, metaDataMap);
    }

    public editUserConfiguration_result() {
    }

    public editUserConfiguration_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUserConfiguration_result(editUserConfiguration_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editUserConfiguration_result deepCopy() {
      return new editUserConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editUserConfiguration_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUserConfiguration_result)
        return this.equals((editUserConfiguration_result)that);
      return false;
    }

    public boolean equals(editUserConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUserConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUserConfiguration_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUserConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public editUserConfiguration_resultStandardScheme getScheme() {
        return new editUserConfiguration_resultStandardScheme();
      }
    }

    private static class editUserConfiguration_resultStandardScheme extends StandardScheme<editUserConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUserConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUserConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUserConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public editUserConfiguration_resultTupleScheme getScheme() {
        return new editUserConfiguration_resultTupleScheme();
      }
    }

    private static class editUserConfiguration_resultTupleScheme extends TupleScheme<editUserConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUserConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUserConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchemaVersionsByApplicationId_args implements org.apache.thrift.TBase<getNotificationSchemaVersionsByApplicationId_args, getNotificationSchemaVersionsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchemaVersionsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchemaVersionsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchemaVersionsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchemaVersionsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchemaVersionsByApplicationId_args.class, metaDataMap);
    }

    public getNotificationSchemaVersionsByApplicationId_args() {
    }

    public getNotificationSchemaVersionsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchemaVersionsByApplicationId_args(getNotificationSchemaVersionsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getNotificationSchemaVersionsByApplicationId_args deepCopy() {
      return new getNotificationSchemaVersionsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getNotificationSchemaVersionsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchemaVersionsByApplicationId_args)
        return this.equals((getNotificationSchemaVersionsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getNotificationSchemaVersionsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchemaVersionsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchemaVersionsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchemaVersionsByApplicationId_argsStandardScheme getScheme() {
        return new getNotificationSchemaVersionsByApplicationId_argsStandardScheme();
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_argsStandardScheme extends StandardScheme<getNotificationSchemaVersionsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchemaVersionsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchemaVersionsByApplicationId_argsTupleScheme getScheme() {
        return new getNotificationSchemaVersionsByApplicationId_argsTupleScheme();
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_argsTupleScheme extends TupleScheme<getNotificationSchemaVersionsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemaVersionsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchemaVersionsByApplicationId_result implements org.apache.thrift.TBase<getNotificationSchemaVersionsByApplicationId_result, getNotificationSchemaVersionsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchemaVersionsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchemaVersionsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchemaVersionsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchemaVersionsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchemaVersionsByApplicationId_result.class, metaDataMap);
    }

    public getNotificationSchemaVersionsByApplicationId_result() {
    }

    public getNotificationSchemaVersionsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchemaVersionsByApplicationId_result(getNotificationSchemaVersionsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getNotificationSchemaVersionsByApplicationId_result deepCopy() {
      return new getNotificationSchemaVersionsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getNotificationSchemaVersionsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getNotificationSchemaVersionsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchemaVersionsByApplicationId_result)
        return this.equals((getNotificationSchemaVersionsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getNotificationSchemaVersionsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchemaVersionsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchemaVersionsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchemaVersionsByApplicationId_resultStandardScheme getScheme() {
        return new getNotificationSchemaVersionsByApplicationId_resultStandardScheme();
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_resultStandardScheme extends StandardScheme<getNotificationSchemaVersionsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem130;
                    _elem130 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem130.read(iprot);
                    struct.success.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchemaVersionsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchemaVersionsByApplicationId_resultTupleScheme getScheme() {
        return new getNotificationSchemaVersionsByApplicationId_resultTupleScheme();
      }
    }

    private static class getNotificationSchemaVersionsByApplicationId_resultTupleScheme extends TupleScheme<getNotificationSchemaVersionsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemaVersionsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list133.size);
            for (int _i134 = 0; _i134 < _list133.size; ++_i134)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem135;
              _elem135 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem135.read(iprot);
              struct.success.add(_elem135);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editNotificationSchema_args implements org.apache.thrift.TBase<editNotificationSchema_args, editNotificationSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<editNotificationSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editNotificationSchema_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSchema", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editNotificationSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editNotificationSchema_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION_SCHEMA((short)1, "notificationSchema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION_SCHEMA
            return NOTIFICATION_SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("notificationSchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editNotificationSchema_args.class, metaDataMap);
    }

    public editNotificationSchema_args() {
    }

    public editNotificationSchema_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema)
    {
      this();
      this.notificationSchema = notificationSchema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editNotificationSchema_args(editNotificationSchema_args other) {
      if (other.isSetNotificationSchema()) {
        this.notificationSchema = other.notificationSchema;
      }
    }

    public editNotificationSchema_args deepCopy() {
      return new editNotificationSchema_args(this);
    }

    @Override
    public void clear() {
      this.notificationSchema = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotificationSchema() {
      return this.notificationSchema;
    }

    public editNotificationSchema_args setNotificationSchema(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notificationSchema) {
      this.notificationSchema = notificationSchema;
      return this;
    }

    public void unsetNotificationSchema() {
      this.notificationSchema = null;
    }

    /** Returns true if field notificationSchema is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationSchema() {
      return this.notificationSchema != null;
    }

    public void setNotificationSchemaIsSet(boolean value) {
      if (!value) {
        this.notificationSchema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION_SCHEMA:
        if (value == null) {
          unsetNotificationSchema();
        } else {
          setNotificationSchema((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION_SCHEMA:
        return getNotificationSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION_SCHEMA:
        return isSetNotificationSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editNotificationSchema_args)
        return this.equals((editNotificationSchema_args)that);
      return false;
    }

    public boolean equals(editNotificationSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_notificationSchema = true && this.isSetNotificationSchema();
      boolean that_present_notificationSchema = true && that.isSetNotificationSchema();
      if (this_present_notificationSchema || that_present_notificationSchema) {
        if (!(this_present_notificationSchema && that_present_notificationSchema))
          return false;
        if (!this.notificationSchema.equals(that.notificationSchema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notificationSchema = true && (isSetNotificationSchema());
      builder.append(present_notificationSchema);
      if (present_notificationSchema)
        builder.append(notificationSchema);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editNotificationSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotificationSchema()).compareTo(other.isSetNotificationSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSchema, other.notificationSchema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editNotificationSchema_args(");
      boolean first = true;

      sb.append("notificationSchema:");
      if (this.notificationSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationSchema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editNotificationSchema_argsStandardSchemeFactory implements SchemeFactory {
      public editNotificationSchema_argsStandardScheme getScheme() {
        return new editNotificationSchema_argsStandardScheme();
      }
    }

    private static class editNotificationSchema_argsStandardScheme extends StandardScheme<editNotificationSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editNotificationSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION_SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notificationSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.notificationSchema.read(iprot);
                struct.setNotificationSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editNotificationSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notificationSchema != null) {
          oprot.writeFieldBegin(NOTIFICATION_SCHEMA_FIELD_DESC);
          struct.notificationSchema.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editNotificationSchema_argsTupleSchemeFactory implements SchemeFactory {
      public editNotificationSchema_argsTupleScheme getScheme() {
        return new editNotificationSchema_argsTupleScheme();
      }
    }

    private static class editNotificationSchema_argsTupleScheme extends TupleScheme<editNotificationSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editNotificationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotificationSchema()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotificationSchema()) {
          struct.notificationSchema.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editNotificationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notificationSchema = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.notificationSchema.read(iprot);
          struct.setNotificationSchemaIsSet(true);
        }
      }
    }

  }

  public static class editNotificationSchema_result implements org.apache.thrift.TBase<editNotificationSchema_result, editNotificationSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<editNotificationSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editNotificationSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editNotificationSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editNotificationSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editNotificationSchema_result.class, metaDataMap);
    }

    public editNotificationSchema_result() {
    }

    public editNotificationSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editNotificationSchema_result(editNotificationSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editNotificationSchema_result deepCopy() {
      return new editNotificationSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editNotificationSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editNotificationSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editNotificationSchema_result)
        return this.equals((editNotificationSchema_result)that);
      return false;
    }

    public boolean equals(editNotificationSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editNotificationSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editNotificationSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editNotificationSchema_resultStandardSchemeFactory implements SchemeFactory {
      public editNotificationSchema_resultStandardScheme getScheme() {
        return new editNotificationSchema_resultStandardScheme();
      }
    }

    private static class editNotificationSchema_resultStandardScheme extends StandardScheme<editNotificationSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editNotificationSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editNotificationSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editNotificationSchema_resultTupleSchemeFactory implements SchemeFactory {
      public editNotificationSchema_resultTupleScheme getScheme() {
        return new editNotificationSchema_resultTupleScheme();
      }
    }

    private static class editNotificationSchema_resultTupleScheme extends TupleScheme<editNotificationSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editNotificationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editNotificationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchema_args implements org.apache.thrift.TBase<getNotificationSchema_args, getNotificationSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchema_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSchemaId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchema_argsTupleSchemeFactory());
    }

    public String notificationSchemaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION_SCHEMA_ID((short)1, "notificationSchemaId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION_SCHEMA_ID
            return NOTIFICATION_SCHEMA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION_SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("notificationSchemaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchema_args.class, metaDataMap);
    }

    public getNotificationSchema_args() {
    }

    public getNotificationSchema_args(
      String notificationSchemaId)
    {
      this();
      this.notificationSchemaId = notificationSchemaId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchema_args(getNotificationSchema_args other) {
      if (other.isSetNotificationSchemaId()) {
        this.notificationSchemaId = other.notificationSchemaId;
      }
    }

    public getNotificationSchema_args deepCopy() {
      return new getNotificationSchema_args(this);
    }

    @Override
    public void clear() {
      this.notificationSchemaId = null;
    }

    public String getNotificationSchemaId() {
      return this.notificationSchemaId;
    }

    public getNotificationSchema_args setNotificationSchemaId(String notificationSchemaId) {
      this.notificationSchemaId = notificationSchemaId;
      return this;
    }

    public void unsetNotificationSchemaId() {
      this.notificationSchemaId = null;
    }

    /** Returns true if field notificationSchemaId is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationSchemaId() {
      return this.notificationSchemaId != null;
    }

    public void setNotificationSchemaIdIsSet(boolean value) {
      if (!value) {
        this.notificationSchemaId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION_SCHEMA_ID:
        if (value == null) {
          unsetNotificationSchemaId();
        } else {
          setNotificationSchemaId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION_SCHEMA_ID:
        return getNotificationSchemaId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION_SCHEMA_ID:
        return isSetNotificationSchemaId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchema_args)
        return this.equals((getNotificationSchema_args)that);
      return false;
    }

    public boolean equals(getNotificationSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_notificationSchemaId = true && this.isSetNotificationSchemaId();
      boolean that_present_notificationSchemaId = true && that.isSetNotificationSchemaId();
      if (this_present_notificationSchemaId || that_present_notificationSchemaId) {
        if (!(this_present_notificationSchemaId && that_present_notificationSchemaId))
          return false;
        if (!this.notificationSchemaId.equals(that.notificationSchemaId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notificationSchemaId = true && (isSetNotificationSchemaId());
      builder.append(present_notificationSchemaId);
      if (present_notificationSchemaId)
        builder.append(notificationSchemaId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotificationSchemaId()).compareTo(other.isSetNotificationSchemaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationSchemaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSchemaId, other.notificationSchemaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchema_args(");
      boolean first = true;

      sb.append("notificationSchemaId:");
      if (this.notificationSchemaId == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationSchemaId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchema_argsStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchema_argsStandardScheme getScheme() {
        return new getNotificationSchema_argsStandardScheme();
      }
    }

    private static class getNotificationSchema_argsStandardScheme extends StandardScheme<getNotificationSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION_SCHEMA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.notificationSchemaId = iprot.readString();
                struct.setNotificationSchemaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notificationSchemaId != null) {
          oprot.writeFieldBegin(NOTIFICATION_SCHEMA_ID_FIELD_DESC);
          oprot.writeString(struct.notificationSchemaId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchema_argsTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchema_argsTupleScheme getScheme() {
        return new getNotificationSchema_argsTupleScheme();
      }
    }

    private static class getNotificationSchema_argsTupleScheme extends TupleScheme<getNotificationSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotificationSchemaId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotificationSchemaId()) {
          oprot.writeString(struct.notificationSchemaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notificationSchemaId = iprot.readString();
          struct.setNotificationSchemaIdIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchema_result implements org.apache.thrift.TBase<getNotificationSchema_result, getNotificationSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchema_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchema_result.class, metaDataMap);
    }

    public getNotificationSchema_result() {
    }

    public getNotificationSchema_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchema_result(getNotificationSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getNotificationSchema_result deepCopy() {
      return new getNotificationSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getNotificationSchema_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getNotificationSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchema_result)
        return this.equals((getNotificationSchema_result)that);
      return false;
    }

    public boolean equals(getNotificationSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchema_resultStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchema_resultStandardScheme getScheme() {
        return new getNotificationSchema_resultStandardScheme();
      }
    }

    private static class getNotificationSchema_resultStandardScheme extends StandardScheme<getNotificationSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchema_resultTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchema_resultTupleScheme getScheme() {
        return new getNotificationSchema_resultTupleScheme();
      }
    }

    private static class getNotificationSchema_resultTupleScheme extends TupleScheme<getNotificationSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchemasByAppId_args implements org.apache.thrift.TBase<getNotificationSchemasByAppId_args, getNotificationSchemasByAppId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchemasByAppId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchemasByAppId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchemasByAppId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchemasByAppId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchemasByAppId_args.class, metaDataMap);
    }

    public getNotificationSchemasByAppId_args() {
    }

    public getNotificationSchemasByAppId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchemasByAppId_args(getNotificationSchemasByAppId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getNotificationSchemasByAppId_args deepCopy() {
      return new getNotificationSchemasByAppId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getNotificationSchemasByAppId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchemasByAppId_args)
        return this.equals((getNotificationSchemasByAppId_args)that);
      return false;
    }

    public boolean equals(getNotificationSchemasByAppId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchemasByAppId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchemasByAppId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchemasByAppId_argsStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchemasByAppId_argsStandardScheme getScheme() {
        return new getNotificationSchemasByAppId_argsStandardScheme();
      }
    }

    private static class getNotificationSchemasByAppId_argsStandardScheme extends StandardScheme<getNotificationSchemasByAppId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchemasByAppId_argsTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchemasByAppId_argsTupleScheme getScheme() {
        return new getNotificationSchemasByAppId_argsTupleScheme();
      }
    }

    private static class getNotificationSchemasByAppId_argsTupleScheme extends TupleScheme<getNotificationSchemasByAppId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getNotificationSchemasByAppId_result implements org.apache.thrift.TBase<getNotificationSchemasByAppId_result, getNotificationSchemasByAppId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationSchemasByAppId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationSchemasByAppId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationSchemasByAppId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationSchemasByAppId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationSchemasByAppId_result.class, metaDataMap);
    }

    public getNotificationSchemasByAppId_result() {
    }

    public getNotificationSchemasByAppId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationSchemasByAppId_result(getNotificationSchemasByAppId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getNotificationSchemasByAppId_result deepCopy() {
      return new getNotificationSchemasByAppId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getNotificationSchemasByAppId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getNotificationSchemasByAppId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationSchemasByAppId_result)
        return this.equals((getNotificationSchemasByAppId_result)that);
      return false;
    }

    public boolean equals(getNotificationSchemasByAppId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationSchemasByAppId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationSchemasByAppId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationSchemasByAppId_resultStandardSchemeFactory implements SchemeFactory {
      public getNotificationSchemasByAppId_resultStandardScheme getScheme() {
        return new getNotificationSchemasByAppId_resultStandardScheme();
      }
    }

    private static class getNotificationSchemasByAppId_resultStandardScheme extends StandardScheme<getNotificationSchemasByAppId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list136.size);
                  for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem138;
                    _elem138 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem138.read(iprot);
                    struct.success.add(_elem138);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationSchemasByAppId_resultTupleSchemeFactory implements SchemeFactory {
      public getNotificationSchemasByAppId_resultTupleScheme getScheme() {
        return new getNotificationSchemasByAppId_resultTupleScheme();
      }
    }

    private static class getNotificationSchemasByAppId_resultTupleScheme extends TupleScheme<getNotificationSchemasByAppId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list141.size);
            for (int _i142 = 0; _i142 < _list141.size; ++_i142)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem143;
              _elem143 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem143.read(iprot);
              struct.success.add(_elem143);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUserNotificationSchemasByAppId_args implements org.apache.thrift.TBase<getUserNotificationSchemasByAppId_args, getUserNotificationSchemasByAppId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserNotificationSchemasByAppId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserNotificationSchemasByAppId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserNotificationSchemasByAppId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserNotificationSchemasByAppId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserNotificationSchemasByAppId_args.class, metaDataMap);
    }

    public getUserNotificationSchemasByAppId_args() {
    }

    public getUserNotificationSchemasByAppId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserNotificationSchemasByAppId_args(getUserNotificationSchemasByAppId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getUserNotificationSchemasByAppId_args deepCopy() {
      return new getUserNotificationSchemasByAppId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getUserNotificationSchemasByAppId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserNotificationSchemasByAppId_args)
        return this.equals((getUserNotificationSchemasByAppId_args)that);
      return false;
    }

    public boolean equals(getUserNotificationSchemasByAppId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserNotificationSchemasByAppId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserNotificationSchemasByAppId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserNotificationSchemasByAppId_argsStandardSchemeFactory implements SchemeFactory {
      public getUserNotificationSchemasByAppId_argsStandardScheme getScheme() {
        return new getUserNotificationSchemasByAppId_argsStandardScheme();
      }
    }

    private static class getUserNotificationSchemasByAppId_argsStandardScheme extends StandardScheme<getUserNotificationSchemasByAppId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserNotificationSchemasByAppId_argsTupleSchemeFactory implements SchemeFactory {
      public getUserNotificationSchemasByAppId_argsTupleScheme getScheme() {
        return new getUserNotificationSchemasByAppId_argsTupleScheme();
      }
    }

    private static class getUserNotificationSchemasByAppId_argsTupleScheme extends TupleScheme<getUserNotificationSchemasByAppId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserNotificationSchemasByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getUserNotificationSchemasByAppId_result implements org.apache.thrift.TBase<getUserNotificationSchemasByAppId_result, getUserNotificationSchemasByAppId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserNotificationSchemasByAppId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserNotificationSchemasByAppId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserNotificationSchemasByAppId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserNotificationSchemasByAppId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserNotificationSchemasByAppId_result.class, metaDataMap);
    }

    public getUserNotificationSchemasByAppId_result() {
    }

    public getUserNotificationSchemasByAppId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserNotificationSchemasByAppId_result(getUserNotificationSchemasByAppId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUserNotificationSchemasByAppId_result deepCopy() {
      return new getUserNotificationSchemasByAppId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getUserNotificationSchemasByAppId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUserNotificationSchemasByAppId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserNotificationSchemasByAppId_result)
        return this.equals((getUserNotificationSchemasByAppId_result)that);
      return false;
    }

    public boolean equals(getUserNotificationSchemasByAppId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserNotificationSchemasByAppId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserNotificationSchemasByAppId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserNotificationSchemasByAppId_resultStandardSchemeFactory implements SchemeFactory {
      public getUserNotificationSchemasByAppId_resultStandardScheme getScheme() {
        return new getUserNotificationSchemasByAppId_resultStandardScheme();
      }
    }

    private static class getUserNotificationSchemasByAppId_resultStandardScheme extends StandardScheme<getUserNotificationSchemasByAppId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem146;
                    _elem146 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem146.read(iprot);
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserNotificationSchemasByAppId_resultTupleSchemeFactory implements SchemeFactory {
      public getUserNotificationSchemasByAppId_resultTupleScheme getScheme() {
        return new getUserNotificationSchemasByAppId_resultTupleScheme();
      }
    }

    private static class getUserNotificationSchemasByAppId_resultTupleScheme extends TupleScheme<getUserNotificationSchemasByAppId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserNotificationSchemasByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list149.size);
            for (int _i150 = 0; _i150 < _list149.size; ++_i150)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem151;
              _elem151 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem151.read(iprot);
              struct.success.add(_elem151);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class findNotificationSchemasByAppIdAndType_args implements org.apache.thrift.TBase<findNotificationSchemasByAppIdAndType_args, findNotificationSchemasByAppIdAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNotificationSchemasByAppIdAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNotificationSchemasByAppIdAndType_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNotificationSchemasByAppIdAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNotificationSchemasByAppIdAndType_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNotificationSchemasByAppIdAndType_args.class, metaDataMap);
    }

    public findNotificationSchemasByAppIdAndType_args() {
    }

    public findNotificationSchemasByAppIdAndType_args(
      String applicationId,
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type)
    {
      this();
      this.applicationId = applicationId;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotificationSchemasByAppIdAndType_args(findNotificationSchemasByAppIdAndType_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public findNotificationSchemasByAppIdAndType_args deepCopy() {
      return new findNotificationSchemasByAppIdAndType_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.type = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public findNotificationSchemasByAppIdAndType_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getType() {
      return this.type;
    }

    public findNotificationSchemasByAppIdAndType_args setType(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotificationSchemasByAppIdAndType_args)
        return this.equals((findNotificationSchemasByAppIdAndType_args)that);
      return false;
    }

    public boolean equals(findNotificationSchemasByAppIdAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      boolean present_type = true && (isSetType());
      builder.append(present_type);
      if (present_type)
        builder.append(type);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(findNotificationSchemasByAppIdAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNotificationSchemasByAppIdAndType_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNotificationSchemasByAppIdAndType_argsStandardSchemeFactory implements SchemeFactory {
      public findNotificationSchemasByAppIdAndType_argsStandardScheme getScheme() {
        return new findNotificationSchemasByAppIdAndType_argsStandardScheme();
      }
    }

    private static class findNotificationSchemasByAppIdAndType_argsStandardScheme extends StandardScheme<findNotificationSchemasByAppIdAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNotificationSchemasByAppIdAndType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.type.read(iprot);
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNotificationSchemasByAppIdAndType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          struct.type.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNotificationSchemasByAppIdAndType_argsTupleSchemeFactory implements SchemeFactory {
      public findNotificationSchemasByAppIdAndType_argsTupleScheme getScheme() {
        return new findNotificationSchemasByAppIdAndType_argsTupleScheme();
      }
    }

    private static class findNotificationSchemasByAppIdAndType_argsTupleScheme extends TupleScheme<findNotificationSchemasByAppIdAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNotificationSchemasByAppIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetType()) {
          struct.type.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNotificationSchemasByAppIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.type.read(iprot);
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class findNotificationSchemasByAppIdAndType_result implements org.apache.thrift.TBase<findNotificationSchemasByAppIdAndType_result, findNotificationSchemasByAppIdAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNotificationSchemasByAppIdAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNotificationSchemasByAppIdAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNotificationSchemasByAppIdAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNotificationSchemasByAppIdAndType_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNotificationSchemasByAppIdAndType_result.class, metaDataMap);
    }

    public findNotificationSchemasByAppIdAndType_result() {
    }

    public findNotificationSchemasByAppIdAndType_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotificationSchemasByAppIdAndType_result(findNotificationSchemasByAppIdAndType_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public findNotificationSchemasByAppIdAndType_result deepCopy() {
      return new findNotificationSchemasByAppIdAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public findNotificationSchemasByAppIdAndType_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public findNotificationSchemasByAppIdAndType_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotificationSchemasByAppIdAndType_result)
        return this.equals((findNotificationSchemasByAppIdAndType_result)that);
      return false;
    }

    public boolean equals(findNotificationSchemasByAppIdAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(findNotificationSchemasByAppIdAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNotificationSchemasByAppIdAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNotificationSchemasByAppIdAndType_resultStandardSchemeFactory implements SchemeFactory {
      public findNotificationSchemasByAppIdAndType_resultStandardScheme getScheme() {
        return new findNotificationSchemasByAppIdAndType_resultStandardScheme();
      }
    }

    private static class findNotificationSchemasByAppIdAndType_resultStandardScheme extends StandardScheme<findNotificationSchemasByAppIdAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNotificationSchemasByAppIdAndType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list152.size);
                  for (int _i153 = 0; _i153 < _list152.size; ++_i153)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem154;
                    _elem154 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem154.read(iprot);
                    struct.success.add(_elem154);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNotificationSchemasByAppIdAndType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNotificationSchemasByAppIdAndType_resultTupleSchemeFactory implements SchemeFactory {
      public findNotificationSchemasByAppIdAndType_resultTupleScheme getScheme() {
        return new findNotificationSchemasByAppIdAndType_resultTupleScheme();
      }
    }

    private static class findNotificationSchemasByAppIdAndType_resultTupleScheme extends TupleScheme<findNotificationSchemasByAppIdAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNotificationSchemasByAppIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNotificationSchemasByAppIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list157.size);
            for (int _i158 = 0; _i158 < _list157.size; ++_i158)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem159;
              _elem159 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem159.read(iprot);
              struct.success.add(_elem159);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editNotification_args implements org.apache.thrift.TBase<editNotification_args, editNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<editNotification_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editNotification_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editNotification_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION((short)1, "notification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION
            return NOTIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editNotification_args.class, metaDataMap);
    }

    public editNotification_args() {
    }

    public editNotification_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification)
    {
      this();
      this.notification = notification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editNotification_args(editNotification_args other) {
      if (other.isSetNotification()) {
        this.notification = other.notification;
      }
    }

    public editNotification_args deepCopy() {
      return new editNotification_args(this);
    }

    @Override
    public void clear() {
      this.notification = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotification() {
      return this.notification;
    }

    public editNotification_args setNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) {
      this.notification = notification;
      return this;
    }

    public void unsetNotification() {
      this.notification = null;
    }

    /** Returns true if field notification is set (has been assigned a value) and false otherwise */
    public boolean isSetNotification() {
      return this.notification != null;
    }

    public void setNotificationIsSet(boolean value) {
      if (!value) {
        this.notification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION:
        if (value == null) {
          unsetNotification();
        } else {
          setNotification((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION:
        return getNotification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION:
        return isSetNotification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editNotification_args)
        return this.equals((editNotification_args)that);
      return false;
    }

    public boolean equals(editNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_notification = true && this.isSetNotification();
      boolean that_present_notification = true && that.isSetNotification();
      if (this_present_notification || that_present_notification) {
        if (!(this_present_notification && that_present_notification))
          return false;
        if (!this.notification.equals(that.notification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notification = true && (isSetNotification());
      builder.append(present_notification);
      if (present_notification)
        builder.append(notification);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotification()).compareTo(other.isSetNotification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editNotification_args(");
      boolean first = true;

      sb.append("notification:");
      if (this.notification == null) {
        sb.append("null");
      } else {
        sb.append(this.notification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editNotification_argsStandardSchemeFactory implements SchemeFactory {
      public editNotification_argsStandardScheme getScheme() {
        return new editNotification_argsStandardScheme();
      }
    }

    private static class editNotification_argsStandardScheme extends StandardScheme<editNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notification = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.notification.read(iprot);
                struct.setNotificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notification != null) {
          oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
          struct.notification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editNotification_argsTupleSchemeFactory implements SchemeFactory {
      public editNotification_argsTupleScheme getScheme() {
        return new editNotification_argsTupleScheme();
      }
    }

    private static class editNotification_argsTupleScheme extends TupleScheme<editNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotification()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotification()) {
          struct.notification.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notification = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.notification.read(iprot);
          struct.setNotificationIsSet(true);
        }
      }
    }

  }

  public static class editNotification_result implements org.apache.thrift.TBase<editNotification_result, editNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<editNotification_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editNotification_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editNotification_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editNotification_result.class, metaDataMap);
    }

    public editNotification_result() {
    }

    public editNotification_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editNotification_result(editNotification_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editNotification_result deepCopy() {
      return new editNotification_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editNotification_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editNotification_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editNotification_result)
        return this.equals((editNotification_result)that);
      return false;
    }

    public boolean equals(editNotification_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editNotification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editNotification_resultStandardSchemeFactory implements SchemeFactory {
      public editNotification_resultStandardScheme getScheme() {
        return new editNotification_resultStandardScheme();
      }
    }

    private static class editNotification_resultStandardScheme extends StandardScheme<editNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editNotification_resultTupleSchemeFactory implements SchemeFactory {
      public editNotification_resultTupleScheme getScheme() {
        return new editNotification_resultTupleScheme();
      }
    }

    private static class editNotification_resultTupleScheme extends TupleScheme<editNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getNotification_args implements org.apache.thrift.TBase<getNotification_args, getNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotification_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotification_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotification_argsTupleSchemeFactory());
    }

    public String notificationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION_ID((short)1, "notificationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION_ID
            return NOTIFICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notificationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotification_args.class, metaDataMap);
    }

    public getNotification_args() {
    }

    public getNotification_args(
      String notificationId)
    {
      this();
      this.notificationId = notificationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotification_args(getNotification_args other) {
      if (other.isSetNotificationId()) {
        this.notificationId = other.notificationId;
      }
    }

    public getNotification_args deepCopy() {
      return new getNotification_args(this);
    }

    @Override
    public void clear() {
      this.notificationId = null;
    }

    public String getNotificationId() {
      return this.notificationId;
    }

    public getNotification_args setNotificationId(String notificationId) {
      this.notificationId = notificationId;
      return this;
    }

    public void unsetNotificationId() {
      this.notificationId = null;
    }

    /** Returns true if field notificationId is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationId() {
      return this.notificationId != null;
    }

    public void setNotificationIdIsSet(boolean value) {
      if (!value) {
        this.notificationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION_ID:
        if (value == null) {
          unsetNotificationId();
        } else {
          setNotificationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION_ID:
        return getNotificationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION_ID:
        return isSetNotificationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotification_args)
        return this.equals((getNotification_args)that);
      return false;
    }

    public boolean equals(getNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_notificationId = true && this.isSetNotificationId();
      boolean that_present_notificationId = true && that.isSetNotificationId();
      if (this_present_notificationId || that_present_notificationId) {
        if (!(this_present_notificationId && that_present_notificationId))
          return false;
        if (!this.notificationId.equals(that.notificationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notificationId = true && (isSetNotificationId());
      builder.append(present_notificationId);
      if (present_notificationId)
        builder.append(notificationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotificationId()).compareTo(other.isSetNotificationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationId, other.notificationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotification_args(");
      boolean first = true;

      sb.append("notificationId:");
      if (this.notificationId == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotification_argsStandardSchemeFactory implements SchemeFactory {
      public getNotification_argsStandardScheme getScheme() {
        return new getNotification_argsStandardScheme();
      }
    }

    private static class getNotification_argsStandardScheme extends StandardScheme<getNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.notificationId = iprot.readString();
                struct.setNotificationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notificationId != null) {
          oprot.writeFieldBegin(NOTIFICATION_ID_FIELD_DESC);
          oprot.writeString(struct.notificationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotification_argsTupleSchemeFactory implements SchemeFactory {
      public getNotification_argsTupleScheme getScheme() {
        return new getNotification_argsTupleScheme();
      }
    }

    private static class getNotification_argsTupleScheme extends TupleScheme<getNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotificationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotificationId()) {
          oprot.writeString(struct.notificationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notificationId = iprot.readString();
          struct.setNotificationIdIsSet(true);
        }
      }
    }

  }

  public static class getNotification_result implements org.apache.thrift.TBase<getNotification_result, getNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotification_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotification_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotification_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotification_result.class, metaDataMap);
    }

    public getNotification_result() {
    }

    public getNotification_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotification_result(getNotification_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getNotification_result deepCopy() {
      return new getNotification_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getNotification_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getNotification_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotification_result)
        return this.equals((getNotification_result)that);
      return false;
    }

    public boolean equals(getNotification_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotification_resultStandardSchemeFactory implements SchemeFactory {
      public getNotification_resultStandardScheme getScheme() {
        return new getNotification_resultStandardScheme();
      }
    }

    private static class getNotification_resultStandardScheme extends StandardScheme<getNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotification_resultTupleSchemeFactory implements SchemeFactory {
      public getNotification_resultTupleScheme getScheme() {
        return new getNotification_resultTupleScheme();
      }
    }

    private static class getNotification_resultTupleScheme extends TupleScheme<getNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getNotificationsByTopicId_args implements org.apache.thrift.TBase<getNotificationsByTopicId_args, getNotificationsByTopicId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationsByTopicId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationsByTopicId_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationsByTopicId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationsByTopicId_argsTupleSchemeFactory());
    }

    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationsByTopicId_args.class, metaDataMap);
    }

    public getNotificationsByTopicId_args() {
    }

    public getNotificationsByTopicId_args(
      String topicId)
    {
      this();
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationsByTopicId_args(getNotificationsByTopicId_args other) {
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public getNotificationsByTopicId_args deepCopy() {
      return new getNotificationsByTopicId_args(this);
    }

    @Override
    public void clear() {
      this.topicId = null;
    }

    public String getTopicId() {
      return this.topicId;
    }

    public getNotificationsByTopicId_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationsByTopicId_args)
        return this.equals((getNotificationsByTopicId_args)that);
      return false;
    }

    public boolean equals(getNotificationsByTopicId_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_topicId = true && (isSetTopicId());
      builder.append(present_topicId);
      if (present_topicId)
        builder.append(topicId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationsByTopicId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationsByTopicId_args(");
      boolean first = true;

      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationsByTopicId_argsStandardSchemeFactory implements SchemeFactory {
      public getNotificationsByTopicId_argsStandardScheme getScheme() {
        return new getNotificationsByTopicId_argsStandardScheme();
      }
    }

    private static class getNotificationsByTopicId_argsStandardScheme extends StandardScheme<getNotificationsByTopicId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationsByTopicId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationsByTopicId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationsByTopicId_argsTupleSchemeFactory implements SchemeFactory {
      public getNotificationsByTopicId_argsTupleScheme getScheme() {
        return new getNotificationsByTopicId_argsTupleScheme();
      }
    }

    private static class getNotificationsByTopicId_argsTupleScheme extends TupleScheme<getNotificationsByTopicId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationsByTopicId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationsByTopicId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class getNotificationsByTopicId_result implements org.apache.thrift.TBase<getNotificationsByTopicId_result, getNotificationsByTopicId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationsByTopicId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationsByTopicId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationsByTopicId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationsByTopicId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationsByTopicId_result.class, metaDataMap);
    }

    public getNotificationsByTopicId_result() {
    }

    public getNotificationsByTopicId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationsByTopicId_result(getNotificationsByTopicId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getNotificationsByTopicId_result deepCopy() {
      return new getNotificationsByTopicId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getNotificationsByTopicId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getNotificationsByTopicId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationsByTopicId_result)
        return this.equals((getNotificationsByTopicId_result)that);
      return false;
    }

    public boolean equals(getNotificationsByTopicId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getNotificationsByTopicId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationsByTopicId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationsByTopicId_resultStandardSchemeFactory implements SchemeFactory {
      public getNotificationsByTopicId_resultStandardScheme getScheme() {
        return new getNotificationsByTopicId_resultStandardScheme();
      }
    }

    private static class getNotificationsByTopicId_resultStandardScheme extends StandardScheme<getNotificationsByTopicId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationsByTopicId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list160.size);
                  for (int _i161 = 0; _i161 < _list160.size; ++_i161)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem162;
                    _elem162 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem162.read(iprot);
                    struct.success.add(_elem162);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationsByTopicId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationsByTopicId_resultTupleSchemeFactory implements SchemeFactory {
      public getNotificationsByTopicId_resultTupleScheme getScheme() {
        return new getNotificationsByTopicId_resultTupleScheme();
      }
    }

    private static class getNotificationsByTopicId_resultTupleScheme extends TupleScheme<getNotificationsByTopicId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationsByTopicId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationsByTopicId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list165.size);
            for (int _i166 = 0; _i166 < _list165.size; ++_i166)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem167;
              _elem167 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem167.read(iprot);
              struct.success.add(_elem167);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editTopic_args implements org.apache.thrift.TBase<editTopic_args, editTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<editTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTopic_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTopic_args.class, metaDataMap);
    }

    public editTopic_args() {
    }

    public editTopic_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTopic_args(editTopic_args other) {
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
    }

    public editTopic_args deepCopy() {
      return new editTopic_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getTopic() {
      return this.topic;
    }

    public editTopic_args setTopic(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTopic_args)
        return this.equals((editTopic_args)that);
      return false;
    }

    public boolean equals(editTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_topic = true && (isSetTopic());
      builder.append(present_topic);
      if (present_topic)
        builder.append(topic);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTopic_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTopic_argsStandardSchemeFactory implements SchemeFactory {
      public editTopic_argsStandardScheme getScheme() {
        return new editTopic_argsStandardScheme();
      }
    }

    private static class editTopic_argsStandardScheme extends StandardScheme<editTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTopic_argsTupleSchemeFactory implements SchemeFactory {
      public editTopic_argsTupleScheme getScheme() {
        return new editTopic_argsTupleScheme();
      }
    }

    private static class editTopic_argsTupleScheme extends TupleScheme<editTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

  }

  public static class editTopic_result implements org.apache.thrift.TBase<editTopic_result, editTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<editTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editTopic_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editTopic_result.class, metaDataMap);
    }

    public editTopic_result() {
    }

    public editTopic_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editTopic_result(editTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editTopic_result deepCopy() {
      return new editTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editTopic_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editTopic_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editTopic_result)
        return this.equals((editTopic_result)that);
      return false;
    }

    public boolean equals(editTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editTopic_resultStandardSchemeFactory implements SchemeFactory {
      public editTopic_resultStandardScheme getScheme() {
        return new editTopic_resultStandardScheme();
      }
    }

    private static class editTopic_resultStandardScheme extends StandardScheme<editTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editTopic_resultTupleSchemeFactory implements SchemeFactory {
      public editTopic_resultTupleScheme getScheme() {
        return new editTopic_resultTupleScheme();
      }
    }

    private static class editTopic_resultTupleScheme extends TupleScheme<editTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTopic_args implements org.apache.thrift.TBase<getTopic_args, getTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopic_argsTupleSchemeFactory());
    }

    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopic_args.class, metaDataMap);
    }

    public getTopic_args() {
    }

    public getTopic_args(
      String topicId)
    {
      this();
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopic_args(getTopic_args other) {
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public getTopic_args deepCopy() {
      return new getTopic_args(this);
    }

    @Override
    public void clear() {
      this.topicId = null;
    }

    public String getTopicId() {
      return this.topicId;
    }

    public getTopic_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopic_args)
        return this.equals((getTopic_args)that);
      return false;
    }

    public boolean equals(getTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_topicId = true && (isSetTopicId());
      builder.append(present_topicId);
      if (present_topicId)
        builder.append(topicId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopic_args(");
      boolean first = true;

      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopic_argsStandardSchemeFactory implements SchemeFactory {
      public getTopic_argsStandardScheme getScheme() {
        return new getTopic_argsStandardScheme();
      }
    }

    private static class getTopic_argsStandardScheme extends StandardScheme<getTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopic_argsTupleSchemeFactory implements SchemeFactory {
      public getTopic_argsTupleScheme getScheme() {
        return new getTopic_argsTupleScheme();
      }
    }

    private static class getTopic_argsTupleScheme extends TupleScheme<getTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class getTopic_result implements org.apache.thrift.TBase<getTopic_result, getTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopic_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopic_result.class, metaDataMap);
    }

    public getTopic_result() {
    }

    public getTopic_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopic_result(getTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTopic_result deepCopy() {
      return new getTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getTopic_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTopic_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopic_result)
        return this.equals((getTopic_result)that);
      return false;
    }

    public boolean equals(getTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopic_resultStandardSchemeFactory implements SchemeFactory {
      public getTopic_resultStandardScheme getScheme() {
        return new getTopic_resultStandardScheme();
      }
    }

    private static class getTopic_resultStandardScheme extends StandardScheme<getTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopic_resultTupleSchemeFactory implements SchemeFactory {
      public getTopic_resultTupleScheme getScheme() {
        return new getTopic_resultTupleScheme();
      }
    }

    private static class getTopic_resultTupleScheme extends TupleScheme<getTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTopicByAppId_args implements org.apache.thrift.TBase<getTopicByAppId_args, getTopicByAppId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicByAppId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicByAppId_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicByAppId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicByAppId_argsTupleSchemeFactory());
    }

    public String appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicByAppId_args.class, metaDataMap);
    }

    public getTopicByAppId_args() {
    }

    public getTopicByAppId_args(
      String appId)
    {
      this();
      this.appId = appId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicByAppId_args(getTopicByAppId_args other) {
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
    }

    public getTopicByAppId_args deepCopy() {
      return new getTopicByAppId_args(this);
    }

    @Override
    public void clear() {
      this.appId = null;
    }

    public String getAppId() {
      return this.appId;
    }

    public getTopicByAppId_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicByAppId_args)
        return this.equals((getTopicByAppId_args)that);
      return false;
    }

    public boolean equals(getTopicByAppId_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_appId = true && (isSetAppId());
      builder.append(present_appId);
      if (present_appId)
        builder.append(appId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopicByAppId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicByAppId_args(");
      boolean first = true;

      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicByAppId_argsStandardSchemeFactory implements SchemeFactory {
      public getTopicByAppId_argsStandardScheme getScheme() {
        return new getTopicByAppId_argsStandardScheme();
      }
    }

    private static class getTopicByAppId_argsStandardScheme extends StandardScheme<getTopicByAppId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicByAppId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicByAppId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicByAppId_argsTupleSchemeFactory implements SchemeFactory {
      public getTopicByAppId_argsTupleScheme getScheme() {
        return new getTopicByAppId_argsTupleScheme();
      }
    }

    private static class getTopicByAppId_argsTupleScheme extends TupleScheme<getTopicByAppId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicByAppId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class getTopicByAppId_result implements org.apache.thrift.TBase<getTopicByAppId_result, getTopicByAppId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicByAppId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicByAppId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicByAppId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicByAppId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicByAppId_result.class, metaDataMap);
    }

    public getTopicByAppId_result() {
    }

    public getTopicByAppId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicByAppId_result(getTopicByAppId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTopicByAppId_result deepCopy() {
      return new getTopicByAppId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getTopicByAppId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTopicByAppId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicByAppId_result)
        return this.equals((getTopicByAppId_result)that);
      return false;
    }

    public boolean equals(getTopicByAppId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopicByAppId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicByAppId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicByAppId_resultStandardSchemeFactory implements SchemeFactory {
      public getTopicByAppId_resultStandardScheme getScheme() {
        return new getTopicByAppId_resultStandardScheme();
      }
    }

    private static class getTopicByAppId_resultStandardScheme extends StandardScheme<getTopicByAppId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicByAppId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list168.size);
                  for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem170;
                    _elem170 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem170.read(iprot);
                    struct.success.add(_elem170);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicByAppId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicByAppId_resultTupleSchemeFactory implements SchemeFactory {
      public getTopicByAppId_resultTupleScheme getScheme() {
        return new getTopicByAppId_resultTupleScheme();
      }
    }

    private static class getTopicByAppId_resultTupleScheme extends TupleScheme<getTopicByAppId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicByAppId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list173.size);
            for (int _i174 = 0; _i174 < _list173.size; ++_i174)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem175;
              _elem175 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem175.read(iprot);
              struct.success.add(_elem175);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTopicByEndpointGroupId_args implements org.apache.thrift.TBase<getTopicByEndpointGroupId_args, getTopicByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicByEndpointGroupId_args.class, metaDataMap);
    }

    public getTopicByEndpointGroupId_args() {
    }

    public getTopicByEndpointGroupId_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicByEndpointGroupId_args(getTopicByEndpointGroupId_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getTopicByEndpointGroupId_args deepCopy() {
      return new getTopicByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getTopicByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicByEndpointGroupId_args)
        return this.equals((getTopicByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getTopicByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopicByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getTopicByEndpointGroupId_argsStandardScheme getScheme() {
        return new getTopicByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getTopicByEndpointGroupId_argsStandardScheme extends StandardScheme<getTopicByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getTopicByEndpointGroupId_argsTupleScheme getScheme() {
        return new getTopicByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getTopicByEndpointGroupId_argsTupleScheme extends TupleScheme<getTopicByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getTopicByEndpointGroupId_result implements org.apache.thrift.TBase<getTopicByEndpointGroupId_result, getTopicByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicByEndpointGroupId_result.class, metaDataMap);
    }

    public getTopicByEndpointGroupId_result() {
    }

    public getTopicByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicByEndpointGroupId_result(getTopicByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getTopicByEndpointGroupId_result deepCopy() {
      return new getTopicByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getTopicByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getTopicByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicByEndpointGroupId_result)
        return this.equals((getTopicByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getTopicByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getTopicByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getTopicByEndpointGroupId_resultStandardScheme getScheme() {
        return new getTopicByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getTopicByEndpointGroupId_resultStandardScheme extends StandardScheme<getTopicByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list176.size);
                  for (int _i177 = 0; _i177 < _list176.size; ++_i177)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem178;
                    _elem178 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem178.read(iprot);
                    struct.success.add(_elem178);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getTopicByEndpointGroupId_resultTupleScheme getScheme() {
        return new getTopicByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getTopicByEndpointGroupId_resultTupleScheme extends TupleScheme<getTopicByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list181.size);
            for (int _i182 = 0; _i182 < _list181.size; ++_i182)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem183;
              _elem183 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem183.read(iprot);
              struct.success.add(_elem183);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVacantTopicByEndpointGroupId_args implements org.apache.thrift.TBase<getVacantTopicByEndpointGroupId_args, getVacantTopicByEndpointGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantTopicByEndpointGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantTopicByEndpointGroupId_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantTopicByEndpointGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantTopicByEndpointGroupId_argsTupleSchemeFactory());
    }

    public String endpointGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_GROUP_ID((short)1, "endpointGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_GROUP_ID
            return ENDPOINT_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantTopicByEndpointGroupId_args.class, metaDataMap);
    }

    public getVacantTopicByEndpointGroupId_args() {
    }

    public getVacantTopicByEndpointGroupId_args(
      String endpointGroupId)
    {
      this();
      this.endpointGroupId = endpointGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantTopicByEndpointGroupId_args(getVacantTopicByEndpointGroupId_args other) {
      if (other.isSetEndpointGroupId()) {
        this.endpointGroupId = other.endpointGroupId;
      }
    }

    public getVacantTopicByEndpointGroupId_args deepCopy() {
      return new getVacantTopicByEndpointGroupId_args(this);
    }

    @Override
    public void clear() {
      this.endpointGroupId = null;
    }

    public String getEndpointGroupId() {
      return this.endpointGroupId;
    }

    public getVacantTopicByEndpointGroupId_args setEndpointGroupId(String endpointGroupId) {
      this.endpointGroupId = endpointGroupId;
      return this;
    }

    public void unsetEndpointGroupId() {
      this.endpointGroupId = null;
    }

    /** Returns true if field endpointGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointGroupId() {
      return this.endpointGroupId != null;
    }

    public void setEndpointGroupIdIsSet(boolean value) {
      if (!value) {
        this.endpointGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        if (value == null) {
          unsetEndpointGroupId();
        } else {
          setEndpointGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_GROUP_ID:
        return getEndpointGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_GROUP_ID:
        return isSetEndpointGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantTopicByEndpointGroupId_args)
        return this.equals((getVacantTopicByEndpointGroupId_args)that);
      return false;
    }

    public boolean equals(getVacantTopicByEndpointGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointGroupId = true && this.isSetEndpointGroupId();
      boolean that_present_endpointGroupId = true && that.isSetEndpointGroupId();
      if (this_present_endpointGroupId || that_present_endpointGroupId) {
        if (!(this_present_endpointGroupId && that_present_endpointGroupId))
          return false;
        if (!this.endpointGroupId.equals(that.endpointGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointGroupId = true && (isSetEndpointGroupId());
      builder.append(present_endpointGroupId);
      if (present_endpointGroupId)
        builder.append(endpointGroupId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantTopicByEndpointGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointGroupId()).compareTo(other.isSetEndpointGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointGroupId, other.endpointGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantTopicByEndpointGroupId_args(");
      boolean first = true;

      sb.append("endpointGroupId:");
      if (this.endpointGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantTopicByEndpointGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getVacantTopicByEndpointGroupId_argsStandardScheme getScheme() {
        return new getVacantTopicByEndpointGroupId_argsStandardScheme();
      }
    }

    private static class getVacantTopicByEndpointGroupId_argsStandardScheme extends StandardScheme<getVacantTopicByEndpointGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointGroupId = iprot.readString();
                struct.setEndpointGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointGroupId != null) {
          oprot.writeFieldBegin(ENDPOINT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.endpointGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantTopicByEndpointGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getVacantTopicByEndpointGroupId_argsTupleScheme getScheme() {
        return new getVacantTopicByEndpointGroupId_argsTupleScheme();
      }
    }

    private static class getVacantTopicByEndpointGroupId_argsTupleScheme extends TupleScheme<getVacantTopicByEndpointGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointGroupId()) {
          oprot.writeString(struct.endpointGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantTopicByEndpointGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointGroupId = iprot.readString();
          struct.setEndpointGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getVacantTopicByEndpointGroupId_result implements org.apache.thrift.TBase<getVacantTopicByEndpointGroupId_result, getVacantTopicByEndpointGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantTopicByEndpointGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantTopicByEndpointGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantTopicByEndpointGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantTopicByEndpointGroupId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantTopicByEndpointGroupId_result.class, metaDataMap);
    }

    public getVacantTopicByEndpointGroupId_result() {
    }

    public getVacantTopicByEndpointGroupId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantTopicByEndpointGroupId_result(getVacantTopicByEndpointGroupId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getVacantTopicByEndpointGroupId_result deepCopy() {
      return new getVacantTopicByEndpointGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getVacantTopicByEndpointGroupId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getVacantTopicByEndpointGroupId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantTopicByEndpointGroupId_result)
        return this.equals((getVacantTopicByEndpointGroupId_result)that);
      return false;
    }

    public boolean equals(getVacantTopicByEndpointGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantTopicByEndpointGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantTopicByEndpointGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantTopicByEndpointGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getVacantTopicByEndpointGroupId_resultStandardScheme getScheme() {
        return new getVacantTopicByEndpointGroupId_resultStandardScheme();
      }
    }

    private static class getVacantTopicByEndpointGroupId_resultStandardScheme extends StandardScheme<getVacantTopicByEndpointGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list184.size);
                  for (int _i185 = 0; _i185 < _list184.size; ++_i185)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem186;
                    _elem186 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem186.read(iprot);
                    struct.success.add(_elem186);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantTopicByEndpointGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getVacantTopicByEndpointGroupId_resultTupleScheme getScheme() {
        return new getVacantTopicByEndpointGroupId_resultTupleScheme();
      }
    }

    private static class getVacantTopicByEndpointGroupId_resultTupleScheme extends TupleScheme<getVacantTopicByEndpointGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantTopicByEndpointGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list189.size);
            for (int _i190 = 0; _i190 < _list189.size; ++_i190)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem191;
              _elem191 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem191.read(iprot);
              struct.success.add(_elem191);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteTopicById_args implements org.apache.thrift.TBase<deleteTopicById_args, deleteTopicById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopicById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopicById_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTopicById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTopicById_argsTupleSchemeFactory());
    }

    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopicById_args.class, metaDataMap);
    }

    public deleteTopicById_args() {
    }

    public deleteTopicById_args(
      String topicId)
    {
      this();
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopicById_args(deleteTopicById_args other) {
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public deleteTopicById_args deepCopy() {
      return new deleteTopicById_args(this);
    }

    @Override
    public void clear() {
      this.topicId = null;
    }

    public String getTopicId() {
      return this.topicId;
    }

    public deleteTopicById_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopicById_args)
        return this.equals((deleteTopicById_args)that);
      return false;
    }

    public boolean equals(deleteTopicById_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_topicId = true && (isSetTopicId());
      builder.append(present_topicId);
      if (present_topicId)
        builder.append(topicId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTopicById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTopicById_args(");
      boolean first = true;

      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopicById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTopicById_argsStandardScheme getScheme() {
        return new deleteTopicById_argsStandardScheme();
      }
    }

    private static class deleteTopicById_argsStandardScheme extends StandardScheme<deleteTopicById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopicById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopicById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopicById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTopicById_argsTupleScheme getScheme() {
        return new deleteTopicById_argsTupleScheme();
      }
    }

    private static class deleteTopicById_argsTupleScheme extends TupleScheme<deleteTopicById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class deleteTopicById_result implements org.apache.thrift.TBase<deleteTopicById_result, deleteTopicById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopicById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopicById_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTopicById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTopicById_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopicById_result.class, metaDataMap);
    }

    public deleteTopicById_result() {
    }

    public deleteTopicById_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopicById_result(deleteTopicById_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteTopicById_result deepCopy() {
      return new deleteTopicById_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteTopicById_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopicById_result)
        return this.equals((deleteTopicById_result)that);
      return false;
    }

    public boolean equals(deleteTopicById_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteTopicById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTopicById_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopicById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTopicById_resultStandardScheme getScheme() {
        return new deleteTopicById_resultStandardScheme();
      }
    }

    private static class deleteTopicById_resultStandardScheme extends StandardScheme<deleteTopicById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopicById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopicById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopicById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTopicById_resultTupleScheme getScheme() {
        return new deleteTopicById_resultTupleScheme();
      }
    }

    private static class deleteTopicById_resultTupleScheme extends TupleScheme<deleteTopicById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUnicastNotification_args implements org.apache.thrift.TBase<getUnicastNotification_args, getUnicastNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUnicastNotification_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnicastNotification_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnicastNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnicastNotification_argsTupleSchemeFactory());
    }

    public String notificationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION_ID((short)1, "notificationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION_ID
            return NOTIFICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notificationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnicastNotification_args.class, metaDataMap);
    }

    public getUnicastNotification_args() {
    }

    public getUnicastNotification_args(
      String notificationId)
    {
      this();
      this.notificationId = notificationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnicastNotification_args(getUnicastNotification_args other) {
      if (other.isSetNotificationId()) {
        this.notificationId = other.notificationId;
      }
    }

    public getUnicastNotification_args deepCopy() {
      return new getUnicastNotification_args(this);
    }

    @Override
    public void clear() {
      this.notificationId = null;
    }

    public String getNotificationId() {
      return this.notificationId;
    }

    public getUnicastNotification_args setNotificationId(String notificationId) {
      this.notificationId = notificationId;
      return this;
    }

    public void unsetNotificationId() {
      this.notificationId = null;
    }

    /** Returns true if field notificationId is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationId() {
      return this.notificationId != null;
    }

    public void setNotificationIdIsSet(boolean value) {
      if (!value) {
        this.notificationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION_ID:
        if (value == null) {
          unsetNotificationId();
        } else {
          setNotificationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION_ID:
        return getNotificationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION_ID:
        return isSetNotificationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnicastNotification_args)
        return this.equals((getUnicastNotification_args)that);
      return false;
    }

    public boolean equals(getUnicastNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_notificationId = true && this.isSetNotificationId();
      boolean that_present_notificationId = true && that.isSetNotificationId();
      if (this_present_notificationId || that_present_notificationId) {
        if (!(this_present_notificationId && that_present_notificationId))
          return false;
        if (!this.notificationId.equals(that.notificationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notificationId = true && (isSetNotificationId());
      builder.append(present_notificationId);
      if (present_notificationId)
        builder.append(notificationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUnicastNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotificationId()).compareTo(other.isSetNotificationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationId, other.notificationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnicastNotification_args(");
      boolean first = true;

      sb.append("notificationId:");
      if (this.notificationId == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnicastNotification_argsStandardSchemeFactory implements SchemeFactory {
      public getUnicastNotification_argsStandardScheme getScheme() {
        return new getUnicastNotification_argsStandardScheme();
      }
    }

    private static class getUnicastNotification_argsStandardScheme extends StandardScheme<getUnicastNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnicastNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.notificationId = iprot.readString();
                struct.setNotificationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnicastNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notificationId != null) {
          oprot.writeFieldBegin(NOTIFICATION_ID_FIELD_DESC);
          oprot.writeString(struct.notificationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnicastNotification_argsTupleSchemeFactory implements SchemeFactory {
      public getUnicastNotification_argsTupleScheme getScheme() {
        return new getUnicastNotification_argsTupleScheme();
      }
    }

    private static class getUnicastNotification_argsTupleScheme extends TupleScheme<getUnicastNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotificationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotificationId()) {
          oprot.writeString(struct.notificationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notificationId = iprot.readString();
          struct.setNotificationIdIsSet(true);
        }
      }
    }

  }

  public static class getUnicastNotification_result implements org.apache.thrift.TBase<getUnicastNotification_result, getUnicastNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUnicastNotification_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnicastNotification_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnicastNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnicastNotification_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnicastNotification_result.class, metaDataMap);
    }

    public getUnicastNotification_result() {
    }

    public getUnicastNotification_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnicastNotification_result(getUnicastNotification_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUnicastNotification_result deepCopy() {
      return new getUnicastNotification_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getUnicastNotification_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUnicastNotification_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnicastNotification_result)
        return this.equals((getUnicastNotification_result)that);
      return false;
    }

    public boolean equals(getUnicastNotification_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUnicastNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnicastNotification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnicastNotification_resultStandardSchemeFactory implements SchemeFactory {
      public getUnicastNotification_resultStandardScheme getScheme() {
        return new getUnicastNotification_resultStandardScheme();
      }
    }

    private static class getUnicastNotification_resultStandardScheme extends StandardScheme<getUnicastNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnicastNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnicastNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnicastNotification_resultTupleSchemeFactory implements SchemeFactory {
      public getUnicastNotification_resultTupleScheme getScheme() {
        return new getUnicastNotification_resultTupleScheme();
      }
    }

    private static class getUnicastNotification_resultTupleScheme extends TupleScheme<getUnicastNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editUnicastNotification_args implements org.apache.thrift.TBase<editUnicastNotification_args, editUnicastNotification_args._Fields>, java.io.Serializable, Cloneable, Comparable<editUnicastNotification_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUnicastNotification_args");

    private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUnicastNotification_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUnicastNotification_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTIFICATION((short)1, "notification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTIFICATION
            return NOTIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUnicastNotification_args.class, metaDataMap);
    }

    public editUnicastNotification_args() {
    }

    public editUnicastNotification_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification)
    {
      this();
      this.notification = notification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUnicastNotification_args(editUnicastNotification_args other) {
      if (other.isSetNotification()) {
        this.notification = other.notification;
      }
    }

    public editUnicastNotification_args deepCopy() {
      return new editUnicastNotification_args(this);
    }

    @Override
    public void clear() {
      this.notification = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getNotification() {
      return this.notification;
    }

    public editUnicastNotification_args setNotification(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct notification) {
      this.notification = notification;
      return this;
    }

    public void unsetNotification() {
      this.notification = null;
    }

    /** Returns true if field notification is set (has been assigned a value) and false otherwise */
    public boolean isSetNotification() {
      return this.notification != null;
    }

    public void setNotificationIsSet(boolean value) {
      if (!value) {
        this.notification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTIFICATION:
        if (value == null) {
          unsetNotification();
        } else {
          setNotification((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTIFICATION:
        return getNotification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTIFICATION:
        return isSetNotification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUnicastNotification_args)
        return this.equals((editUnicastNotification_args)that);
      return false;
    }

    public boolean equals(editUnicastNotification_args that) {
      if (that == null)
        return false;

      boolean this_present_notification = true && this.isSetNotification();
      boolean that_present_notification = true && that.isSetNotification();
      if (this_present_notification || that_present_notification) {
        if (!(this_present_notification && that_present_notification))
          return false;
        if (!this.notification.equals(that.notification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_notification = true && (isSetNotification());
      builder.append(present_notification);
      if (present_notification)
        builder.append(notification);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUnicastNotification_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotification()).compareTo(other.isSetNotification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUnicastNotification_args(");
      boolean first = true;

      sb.append("notification:");
      if (this.notification == null) {
        sb.append("null");
      } else {
        sb.append(this.notification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUnicastNotification_argsStandardSchemeFactory implements SchemeFactory {
      public editUnicastNotification_argsStandardScheme getScheme() {
        return new editUnicastNotification_argsStandardScheme();
      }
    }

    private static class editUnicastNotification_argsStandardScheme extends StandardScheme<editUnicastNotification_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUnicastNotification_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notification = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.notification.read(iprot);
                struct.setNotificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUnicastNotification_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notification != null) {
          oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
          struct.notification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUnicastNotification_argsTupleSchemeFactory implements SchemeFactory {
      public editUnicastNotification_argsTupleScheme getScheme() {
        return new editUnicastNotification_argsTupleScheme();
      }
    }

    private static class editUnicastNotification_argsTupleScheme extends TupleScheme<editUnicastNotification_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotification()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNotification()) {
          struct.notification.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUnicastNotification_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.notification = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.notification.read(iprot);
          struct.setNotificationIsSet(true);
        }
      }
    }

  }

  public static class editUnicastNotification_result implements org.apache.thrift.TBase<editUnicastNotification_result, editUnicastNotification_result._Fields>, java.io.Serializable, Cloneable, Comparable<editUnicastNotification_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUnicastNotification_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUnicastNotification_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUnicastNotification_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUnicastNotification_result.class, metaDataMap);
    }

    public editUnicastNotification_result() {
    }

    public editUnicastNotification_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUnicastNotification_result(editUnicastNotification_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editUnicastNotification_result deepCopy() {
      return new editUnicastNotification_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editUnicastNotification_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editUnicastNotification_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUnicastNotification_result)
        return this.equals((editUnicastNotification_result)that);
      return false;
    }

    public boolean equals(editUnicastNotification_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUnicastNotification_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUnicastNotification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUnicastNotification_resultStandardSchemeFactory implements SchemeFactory {
      public editUnicastNotification_resultStandardScheme getScheme() {
        return new editUnicastNotification_resultStandardScheme();
      }
    }

    private static class editUnicastNotification_resultStandardScheme extends StandardScheme<editUnicastNotification_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUnicastNotification_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUnicastNotification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUnicastNotification_resultTupleSchemeFactory implements SchemeFactory {
      public editUnicastNotification_resultTupleScheme getScheme() {
        return new editUnicastNotification_resultTupleScheme();
      }
    }

    private static class editUnicastNotification_resultTupleScheme extends TupleScheme<editUnicastNotification_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUnicastNotification_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUnicastNotificationsByKeyHash_args implements org.apache.thrift.TBase<getUnicastNotificationsByKeyHash_args, getUnicastNotificationsByKeyHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUnicastNotificationsByKeyHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnicastNotificationsByKeyHash_args");

    private static final org.apache.thrift.protocol.TField KEYHASH_FIELD_DESC = new org.apache.thrift.protocol.TField("keyhash", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnicastNotificationsByKeyHash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnicastNotificationsByKeyHash_argsTupleSchemeFactory());
    }

    public ByteBuffer keyhash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYHASH((short)1, "keyhash");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYHASH
            return KEYHASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYHASH, new org.apache.thrift.meta_data.FieldMetaData("keyhash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnicastNotificationsByKeyHash_args.class, metaDataMap);
    }

    public getUnicastNotificationsByKeyHash_args() {
    }

    public getUnicastNotificationsByKeyHash_args(
      ByteBuffer keyhash)
    {
      this();
      this.keyhash = keyhash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnicastNotificationsByKeyHash_args(getUnicastNotificationsByKeyHash_args other) {
      if (other.isSetKeyhash()) {
        this.keyhash = org.apache.thrift.TBaseHelper.copyBinary(other.keyhash);
;
      }
    }

    public getUnicastNotificationsByKeyHash_args deepCopy() {
      return new getUnicastNotificationsByKeyHash_args(this);
    }

    @Override
    public void clear() {
      this.keyhash = null;
    }

    public byte[] getKeyhash() {
      setKeyhash(org.apache.thrift.TBaseHelper.rightSize(keyhash));
      return keyhash == null ? null : keyhash.array();
    }

    public ByteBuffer bufferForKeyhash() {
      return keyhash;
    }

    public getUnicastNotificationsByKeyHash_args setKeyhash(byte[] keyhash) {
      setKeyhash(keyhash == null ? (ByteBuffer)null : ByteBuffer.wrap(keyhash));
      return this;
    }

    public getUnicastNotificationsByKeyHash_args setKeyhash(ByteBuffer keyhash) {
      this.keyhash = keyhash;
      return this;
    }

    public void unsetKeyhash() {
      this.keyhash = null;
    }

    /** Returns true if field keyhash is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyhash() {
      return this.keyhash != null;
    }

    public void setKeyhashIsSet(boolean value) {
      if (!value) {
        this.keyhash = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYHASH:
        if (value == null) {
          unsetKeyhash();
        } else {
          setKeyhash((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYHASH:
        return getKeyhash();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYHASH:
        return isSetKeyhash();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnicastNotificationsByKeyHash_args)
        return this.equals((getUnicastNotificationsByKeyHash_args)that);
      return false;
    }

    public boolean equals(getUnicastNotificationsByKeyHash_args that) {
      if (that == null)
        return false;

      boolean this_present_keyhash = true && this.isSetKeyhash();
      boolean that_present_keyhash = true && that.isSetKeyhash();
      if (this_present_keyhash || that_present_keyhash) {
        if (!(this_present_keyhash && that_present_keyhash))
          return false;
        if (!this.keyhash.equals(that.keyhash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_keyhash = true && (isSetKeyhash());
      builder.append(present_keyhash);
      if (present_keyhash)
        builder.append(keyhash);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUnicastNotificationsByKeyHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyhash()).compareTo(other.isSetKeyhash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyhash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyhash, other.keyhash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnicastNotificationsByKeyHash_args(");
      boolean first = true;

      sb.append("keyhash:");
      if (this.keyhash == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.keyhash, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnicastNotificationsByKeyHash_argsStandardSchemeFactory implements SchemeFactory {
      public getUnicastNotificationsByKeyHash_argsStandardScheme getScheme() {
        return new getUnicastNotificationsByKeyHash_argsStandardScheme();
      }
    }

    private static class getUnicastNotificationsByKeyHash_argsStandardScheme extends StandardScheme<getUnicastNotificationsByKeyHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnicastNotificationsByKeyHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYHASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyhash = iprot.readBinary();
                struct.setKeyhashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnicastNotificationsByKeyHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyhash != null) {
          oprot.writeFieldBegin(KEYHASH_FIELD_DESC);
          oprot.writeBinary(struct.keyhash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnicastNotificationsByKeyHash_argsTupleSchemeFactory implements SchemeFactory {
      public getUnicastNotificationsByKeyHash_argsTupleScheme getScheme() {
        return new getUnicastNotificationsByKeyHash_argsTupleScheme();
      }
    }

    private static class getUnicastNotificationsByKeyHash_argsTupleScheme extends TupleScheme<getUnicastNotificationsByKeyHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnicastNotificationsByKeyHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyhash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeyhash()) {
          oprot.writeBinary(struct.keyhash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnicastNotificationsByKeyHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.keyhash = iprot.readBinary();
          struct.setKeyhashIsSet(true);
        }
      }
    }

  }

  public static class getUnicastNotificationsByKeyHash_result implements org.apache.thrift.TBase<getUnicastNotificationsByKeyHash_result, getUnicastNotificationsByKeyHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUnicastNotificationsByKeyHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnicastNotificationsByKeyHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnicastNotificationsByKeyHash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnicastNotificationsByKeyHash_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnicastNotificationsByKeyHash_result.class, metaDataMap);
    }

    public getUnicastNotificationsByKeyHash_result() {
    }

    public getUnicastNotificationsByKeyHash_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnicastNotificationsByKeyHash_result(getUnicastNotificationsByKeyHash_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUnicastNotificationsByKeyHash_result deepCopy() {
      return new getUnicastNotificationsByKeyHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getUnicastNotificationsByKeyHash_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUnicastNotificationsByKeyHash_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnicastNotificationsByKeyHash_result)
        return this.equals((getUnicastNotificationsByKeyHash_result)that);
      return false;
    }

    public boolean equals(getUnicastNotificationsByKeyHash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUnicastNotificationsByKeyHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnicastNotificationsByKeyHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnicastNotificationsByKeyHash_resultStandardSchemeFactory implements SchemeFactory {
      public getUnicastNotificationsByKeyHash_resultStandardScheme getScheme() {
        return new getUnicastNotificationsByKeyHash_resultStandardScheme();
      }
    }

    private static class getUnicastNotificationsByKeyHash_resultStandardScheme extends StandardScheme<getUnicastNotificationsByKeyHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnicastNotificationsByKeyHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list192.size);
                  for (int _i193 = 0; _i193 < _list192.size; ++_i193)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem194;
                    _elem194 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem194.read(iprot);
                    struct.success.add(_elem194);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnicastNotificationsByKeyHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnicastNotificationsByKeyHash_resultTupleSchemeFactory implements SchemeFactory {
      public getUnicastNotificationsByKeyHash_resultTupleScheme getScheme() {
        return new getUnicastNotificationsByKeyHash_resultTupleScheme();
      }
    }

    private static class getUnicastNotificationsByKeyHash_resultTupleScheme extends TupleScheme<getUnicastNotificationsByKeyHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnicastNotificationsByKeyHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnicastNotificationsByKeyHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list197.size);
            for (int _i198 = 0; _i198 < _list197.size; ++_i198)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem199;
              _elem199 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem199.read(iprot);
              struct.success.add(_elem199);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class addSdkProfile_args implements org.apache.thrift.TBase<addSdkProfile_args, addSdkProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSdkProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSdkProfile_args");

    private static final org.apache.thrift.protocol.TField SDK_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkProfile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSdkProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSdkProfile_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_PROFILE((short)1, "sdkProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_PROFILE
            return SDK_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("sdkProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSdkProfile_args.class, metaDataMap);
    }

    public addSdkProfile_args() {
    }

    public addSdkProfile_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile)
    {
      this();
      this.sdkProfile = sdkProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSdkProfile_args(addSdkProfile_args other) {
      if (other.isSetSdkProfile()) {
        this.sdkProfile = other.sdkProfile;
      }
    }

    public addSdkProfile_args deepCopy() {
      return new addSdkProfile_args(this);
    }

    @Override
    public void clear() {
      this.sdkProfile = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSdkProfile() {
      return this.sdkProfile;
    }

    public addSdkProfile_args setSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile) {
      this.sdkProfile = sdkProfile;
      return this;
    }

    public void unsetSdkProfile() {
      this.sdkProfile = null;
    }

    /** Returns true if field sdkProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkProfile() {
      return this.sdkProfile != null;
    }

    public void setSdkProfileIsSet(boolean value) {
      if (!value) {
        this.sdkProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_PROFILE:
        if (value == null) {
          unsetSdkProfile();
        } else {
          setSdkProfile((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_PROFILE:
        return getSdkProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_PROFILE:
        return isSetSdkProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSdkProfile_args)
        return this.equals((addSdkProfile_args)that);
      return false;
    }

    public boolean equals(addSdkProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkProfile = true && this.isSetSdkProfile();
      boolean that_present_sdkProfile = true && that.isSetSdkProfile();
      if (this_present_sdkProfile || that_present_sdkProfile) {
        if (!(this_present_sdkProfile && that_present_sdkProfile))
          return false;
        if (!this.sdkProfile.equals(that.sdkProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sdkProfile = true && (isSetSdkProfile());
      builder.append(present_sdkProfile);
      if (present_sdkProfile)
        builder.append(sdkProfile);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addSdkProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdkProfile()).compareTo(other.isSetSdkProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkProfile, other.sdkProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSdkProfile_args(");
      boolean first = true;

      sb.append("sdkProfile:");
      if (this.sdkProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSdkProfile_argsStandardSchemeFactory implements SchemeFactory {
      public addSdkProfile_argsStandardScheme getScheme() {
        return new addSdkProfile_argsStandardScheme();
      }
    }

    private static class addSdkProfile_argsStandardScheme extends StandardScheme<addSdkProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSdkProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sdkProfile = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.sdkProfile.read(iprot);
                struct.setSdkProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSdkProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdkProfile != null) {
          oprot.writeFieldBegin(SDK_PROFILE_FIELD_DESC);
          struct.sdkProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSdkProfile_argsTupleSchemeFactory implements SchemeFactory {
      public addSdkProfile_argsTupleScheme getScheme() {
        return new addSdkProfile_argsTupleScheme();
      }
    }

    private static class addSdkProfile_argsTupleScheme extends TupleScheme<addSdkProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSdkProfile()) {
          struct.sdkProfile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sdkProfile = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.sdkProfile.read(iprot);
          struct.setSdkProfileIsSet(true);
        }
      }
    }

  }

  public static class addSdkProfile_result implements org.apache.thrift.TBase<addSdkProfile_result, addSdkProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSdkProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSdkProfile_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSdkProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSdkProfile_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSdkProfile_result.class, metaDataMap);
    }

    public addSdkProfile_result() {
    }

    public addSdkProfile_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSdkProfile_result(addSdkProfile_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public addSdkProfile_result deepCopy() {
      return new addSdkProfile_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public addSdkProfile_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSdkProfile_result)
        return this.equals((addSdkProfile_result)that);
      return false;
    }

    public boolean equals(addSdkProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addSdkProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSdkProfile_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSdkProfile_resultStandardSchemeFactory implements SchemeFactory {
      public addSdkProfile_resultStandardScheme getScheme() {
        return new addSdkProfile_resultStandardScheme();
      }
    }

    private static class addSdkProfile_resultStandardScheme extends StandardScheme<addSdkProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSdkProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSdkProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSdkProfile_resultTupleSchemeFactory implements SchemeFactory {
      public addSdkProfile_resultTupleScheme getScheme() {
        return new addSdkProfile_resultTupleScheme();
      }
    }

    private static class addSdkProfile_resultTupleScheme extends TupleScheme<addSdkProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteSdkProfile_args implements org.apache.thrift.TBase<deleteSdkProfile_args, deleteSdkProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSdkProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSdkProfile_args");

    private static final org.apache.thrift.protocol.TField SDK_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkProfileId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSdkProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSdkProfile_argsTupleSchemeFactory());
    }

    public String sdkProfileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_PROFILE_ID((short)1, "sdkProfileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_PROFILE_ID
            return SDK_PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("sdkProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSdkProfile_args.class, metaDataMap);
    }

    public deleteSdkProfile_args() {
    }

    public deleteSdkProfile_args(
      String sdkProfileId)
    {
      this();
      this.sdkProfileId = sdkProfileId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSdkProfile_args(deleteSdkProfile_args other) {
      if (other.isSetSdkProfileId()) {
        this.sdkProfileId = other.sdkProfileId;
      }
    }

    public deleteSdkProfile_args deepCopy() {
      return new deleteSdkProfile_args(this);
    }

    @Override
    public void clear() {
      this.sdkProfileId = null;
    }

    public String getSdkProfileId() {
      return this.sdkProfileId;
    }

    public deleteSdkProfile_args setSdkProfileId(String sdkProfileId) {
      this.sdkProfileId = sdkProfileId;
      return this;
    }

    public void unsetSdkProfileId() {
      this.sdkProfileId = null;
    }

    /** Returns true if field sdkProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkProfileId() {
      return this.sdkProfileId != null;
    }

    public void setSdkProfileIdIsSet(boolean value) {
      if (!value) {
        this.sdkProfileId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_PROFILE_ID:
        if (value == null) {
          unsetSdkProfileId();
        } else {
          setSdkProfileId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_PROFILE_ID:
        return getSdkProfileId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_PROFILE_ID:
        return isSetSdkProfileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSdkProfile_args)
        return this.equals((deleteSdkProfile_args)that);
      return false;
    }

    public boolean equals(deleteSdkProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkProfileId = true && this.isSetSdkProfileId();
      boolean that_present_sdkProfileId = true && that.isSetSdkProfileId();
      if (this_present_sdkProfileId || that_present_sdkProfileId) {
        if (!(this_present_sdkProfileId && that_present_sdkProfileId))
          return false;
        if (!this.sdkProfileId.equals(that.sdkProfileId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sdkProfileId = true && (isSetSdkProfileId());
      builder.append(present_sdkProfileId);
      if (present_sdkProfileId)
        builder.append(sdkProfileId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteSdkProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdkProfileId()).compareTo(other.isSetSdkProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkProfileId, other.sdkProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSdkProfile_args(");
      boolean first = true;

      sb.append("sdkProfileId:");
      if (this.sdkProfileId == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkProfileId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSdkProfile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSdkProfile_argsStandardScheme getScheme() {
        return new deleteSdkProfile_argsStandardScheme();
      }
    }

    private static class deleteSdkProfile_argsStandardScheme extends StandardScheme<deleteSdkProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSdkProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sdkProfileId = iprot.readString();
                struct.setSdkProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSdkProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdkProfileId != null) {
          oprot.writeFieldBegin(SDK_PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.sdkProfileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSdkProfile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSdkProfile_argsTupleScheme getScheme() {
        return new deleteSdkProfile_argsTupleScheme();
      }
    }

    private static class deleteSdkProfile_argsTupleScheme extends TupleScheme<deleteSdkProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSdkProfileId()) {
          oprot.writeString(struct.sdkProfileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sdkProfileId = iprot.readString();
          struct.setSdkProfileIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSdkProfile_result implements org.apache.thrift.TBase<deleteSdkProfile_result, deleteSdkProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSdkProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSdkProfile_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSdkProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSdkProfile_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSdkProfile_result.class, metaDataMap);
    }

    public deleteSdkProfile_result() {
    }

    public deleteSdkProfile_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSdkProfile_result(deleteSdkProfile_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteSdkProfile_result deepCopy() {
      return new deleteSdkProfile_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteSdkProfile_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSdkProfile_result)
        return this.equals((deleteSdkProfile_result)that);
      return false;
    }

    public boolean equals(deleteSdkProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteSdkProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSdkProfile_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSdkProfile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSdkProfile_resultStandardScheme getScheme() {
        return new deleteSdkProfile_resultStandardScheme();
      }
    }

    private static class deleteSdkProfile_resultStandardScheme extends StandardScheme<deleteSdkProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSdkProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSdkProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSdkProfile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSdkProfile_resultTupleScheme getScheme() {
        return new deleteSdkProfile_resultTupleScheme();
      }
    }

    private static class deleteSdkProfile_resultTupleScheme extends TupleScheme<deleteSdkProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getSdkProfile_args implements org.apache.thrift.TBase<getSdkProfile_args, getSdkProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSdkProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSdkProfile_args");

    private static final org.apache.thrift.protocol.TField SDK_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkProfileId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSdkProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSdkProfile_argsTupleSchemeFactory());
    }

    public String sdkProfileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_PROFILE_ID((short)1, "sdkProfileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_PROFILE_ID
            return SDK_PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("sdkProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSdkProfile_args.class, metaDataMap);
    }

    public getSdkProfile_args() {
    }

    public getSdkProfile_args(
      String sdkProfileId)
    {
      this();
      this.sdkProfileId = sdkProfileId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSdkProfile_args(getSdkProfile_args other) {
      if (other.isSetSdkProfileId()) {
        this.sdkProfileId = other.sdkProfileId;
      }
    }

    public getSdkProfile_args deepCopy() {
      return new getSdkProfile_args(this);
    }

    @Override
    public void clear() {
      this.sdkProfileId = null;
    }

    public String getSdkProfileId() {
      return this.sdkProfileId;
    }

    public getSdkProfile_args setSdkProfileId(String sdkProfileId) {
      this.sdkProfileId = sdkProfileId;
      return this;
    }

    public void unsetSdkProfileId() {
      this.sdkProfileId = null;
    }

    /** Returns true if field sdkProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkProfileId() {
      return this.sdkProfileId != null;
    }

    public void setSdkProfileIdIsSet(boolean value) {
      if (!value) {
        this.sdkProfileId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_PROFILE_ID:
        if (value == null) {
          unsetSdkProfileId();
        } else {
          setSdkProfileId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_PROFILE_ID:
        return getSdkProfileId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_PROFILE_ID:
        return isSetSdkProfileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSdkProfile_args)
        return this.equals((getSdkProfile_args)that);
      return false;
    }

    public boolean equals(getSdkProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkProfileId = true && this.isSetSdkProfileId();
      boolean that_present_sdkProfileId = true && that.isSetSdkProfileId();
      if (this_present_sdkProfileId || that_present_sdkProfileId) {
        if (!(this_present_sdkProfileId && that_present_sdkProfileId))
          return false;
        if (!this.sdkProfileId.equals(that.sdkProfileId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sdkProfileId = true && (isSetSdkProfileId());
      builder.append(present_sdkProfileId);
      if (present_sdkProfileId)
        builder.append(sdkProfileId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getSdkProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdkProfileId()).compareTo(other.isSetSdkProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkProfileId, other.sdkProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSdkProfile_args(");
      boolean first = true;

      sb.append("sdkProfileId:");
      if (this.sdkProfileId == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkProfileId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSdkProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getSdkProfile_argsStandardScheme getScheme() {
        return new getSdkProfile_argsStandardScheme();
      }
    }

    private static class getSdkProfile_argsStandardScheme extends StandardScheme<getSdkProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSdkProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sdkProfileId = iprot.readString();
                struct.setSdkProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSdkProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdkProfileId != null) {
          oprot.writeFieldBegin(SDK_PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.sdkProfileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSdkProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getSdkProfile_argsTupleScheme getScheme() {
        return new getSdkProfile_argsTupleScheme();
      }
    }

    private static class getSdkProfile_argsTupleScheme extends TupleScheme<getSdkProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSdkProfileId()) {
          oprot.writeString(struct.sdkProfileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSdkProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sdkProfileId = iprot.readString();
          struct.setSdkProfileIdIsSet(true);
        }
      }
    }

  }

  public static class getSdkProfile_result implements org.apache.thrift.TBase<getSdkProfile_result, getSdkProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSdkProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSdkProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSdkProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSdkProfile_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSdkProfile_result.class, metaDataMap);
    }

    public getSdkProfile_result() {
    }

    public getSdkProfile_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSdkProfile_result(getSdkProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getSdkProfile_result deepCopy() {
      return new getSdkProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getSdkProfile_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getSdkProfile_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSdkProfile_result)
        return this.equals((getSdkProfile_result)that);
      return false;
    }

    public boolean equals(getSdkProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getSdkProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSdkProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSdkProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getSdkProfile_resultStandardScheme getScheme() {
        return new getSdkProfile_resultStandardScheme();
      }
    }

    private static class getSdkProfile_resultStandardScheme extends StandardScheme<getSdkProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSdkProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSdkProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSdkProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getSdkProfile_resultTupleScheme getScheme() {
        return new getSdkProfile_resultTupleScheme();
      }
    }

    private static class getSdkProfile_resultTupleScheme extends TupleScheme<getSdkProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSdkProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getSdkProfilesByApplicationId_args implements org.apache.thrift.TBase<getSdkProfilesByApplicationId_args, getSdkProfilesByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSdkProfilesByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSdkProfilesByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSdkProfilesByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSdkProfilesByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSdkProfilesByApplicationId_args.class, metaDataMap);
    }

    public getSdkProfilesByApplicationId_args() {
    }

    public getSdkProfilesByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSdkProfilesByApplicationId_args(getSdkProfilesByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getSdkProfilesByApplicationId_args deepCopy() {
      return new getSdkProfilesByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getSdkProfilesByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSdkProfilesByApplicationId_args)
        return this.equals((getSdkProfilesByApplicationId_args)that);
      return false;
    }

    public boolean equals(getSdkProfilesByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getSdkProfilesByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSdkProfilesByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSdkProfilesByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getSdkProfilesByApplicationId_argsStandardScheme getScheme() {
        return new getSdkProfilesByApplicationId_argsStandardScheme();
      }
    }

    private static class getSdkProfilesByApplicationId_argsStandardScheme extends StandardScheme<getSdkProfilesByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSdkProfilesByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSdkProfilesByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSdkProfilesByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getSdkProfilesByApplicationId_argsTupleScheme getScheme() {
        return new getSdkProfilesByApplicationId_argsTupleScheme();
      }
    }

    private static class getSdkProfilesByApplicationId_argsTupleScheme extends TupleScheme<getSdkProfilesByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSdkProfilesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSdkProfilesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getSdkProfilesByApplicationId_result implements org.apache.thrift.TBase<getSdkProfilesByApplicationId_result, getSdkProfilesByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSdkProfilesByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSdkProfilesByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSdkProfilesByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSdkProfilesByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSdkProfilesByApplicationId_result.class, metaDataMap);
    }

    public getSdkProfilesByApplicationId_result() {
    }

    public getSdkProfilesByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSdkProfilesByApplicationId_result(getSdkProfilesByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getSdkProfilesByApplicationId_result deepCopy() {
      return new getSdkProfilesByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getSdkProfilesByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getSdkProfilesByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSdkProfilesByApplicationId_result)
        return this.equals((getSdkProfilesByApplicationId_result)that);
      return false;
    }

    public boolean equals(getSdkProfilesByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getSdkProfilesByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSdkProfilesByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSdkProfilesByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getSdkProfilesByApplicationId_resultStandardScheme getScheme() {
        return new getSdkProfilesByApplicationId_resultStandardScheme();
      }
    }

    private static class getSdkProfilesByApplicationId_resultStandardScheme extends StandardScheme<getSdkProfilesByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSdkProfilesByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list200.size);
                  for (int _i201 = 0; _i201 < _list200.size; ++_i201)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem202;
                    _elem202 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem202.read(iprot);
                    struct.success.add(_elem202);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSdkProfilesByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSdkProfilesByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getSdkProfilesByApplicationId_resultTupleScheme getScheme() {
        return new getSdkProfilesByApplicationId_resultTupleScheme();
      }
    }

    private static class getSdkProfilesByApplicationId_resultTupleScheme extends TupleScheme<getSdkProfilesByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSdkProfilesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSdkProfilesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list205.size);
            for (int _i206 = 0; _i206 < _list205.size; ++_i206)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem207;
              _elem207 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem207.read(iprot);
              struct.success.add(_elem207);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class generateSdk_args implements org.apache.thrift.TBase<generateSdk_args, generateSdk_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateSdk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateSdk_args");

    private static final org.apache.thrift.protocol.TField SDK_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkProfile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("targetPlatform", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateSdk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateSdk_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile; // required
    /**
     * 
     * @see SdkPlatform
     */
    public SdkPlatform targetPlatform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_PROFILE((short)1, "sdkProfile"),
      /**
       * 
       * @see SdkPlatform
       */
      TARGET_PLATFORM((short)2, "targetPlatform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_PROFILE
            return SDK_PROFILE;
          case 2: // TARGET_PLATFORM
            return TARGET_PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("sdkProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.TARGET_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("targetPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SdkPlatform.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateSdk_args.class, metaDataMap);
    }

    public generateSdk_args() {
    }

    public generateSdk_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile,
      SdkPlatform targetPlatform)
    {
      this();
      this.sdkProfile = sdkProfile;
      this.targetPlatform = targetPlatform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateSdk_args(generateSdk_args other) {
      if (other.isSetSdkProfile()) {
        this.sdkProfile = other.sdkProfile;
      }
      if (other.isSetTargetPlatform()) {
        this.targetPlatform = other.targetPlatform;
      }
    }

    public generateSdk_args deepCopy() {
      return new generateSdk_args(this);
    }

    @Override
    public void clear() {
      this.sdkProfile = null;
      this.targetPlatform = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSdkProfile() {
      return this.sdkProfile;
    }

    public generateSdk_args setSdkProfile(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct sdkProfile) {
      this.sdkProfile = sdkProfile;
      return this;
    }

    public void unsetSdkProfile() {
      this.sdkProfile = null;
    }

    /** Returns true if field sdkProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkProfile() {
      return this.sdkProfile != null;
    }

    public void setSdkProfileIsSet(boolean value) {
      if (!value) {
        this.sdkProfile = null;
      }
    }

    /**
     * 
     * @see SdkPlatform
     */
    public SdkPlatform getTargetPlatform() {
      return this.targetPlatform;
    }

    /**
     * 
     * @see SdkPlatform
     */
    public generateSdk_args setTargetPlatform(SdkPlatform targetPlatform) {
      this.targetPlatform = targetPlatform;
      return this;
    }

    public void unsetTargetPlatform() {
      this.targetPlatform = null;
    }

    /** Returns true if field targetPlatform is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetPlatform() {
      return this.targetPlatform != null;
    }

    public void setTargetPlatformIsSet(boolean value) {
      if (!value) {
        this.targetPlatform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_PROFILE:
        if (value == null) {
          unsetSdkProfile();
        } else {
          setSdkProfile((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case TARGET_PLATFORM:
        if (value == null) {
          unsetTargetPlatform();
        } else {
          setTargetPlatform((SdkPlatform)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_PROFILE:
        return getSdkProfile();

      case TARGET_PLATFORM:
        return getTargetPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_PROFILE:
        return isSetSdkProfile();
      case TARGET_PLATFORM:
        return isSetTargetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateSdk_args)
        return this.equals((generateSdk_args)that);
      return false;
    }

    public boolean equals(generateSdk_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkProfile = true && this.isSetSdkProfile();
      boolean that_present_sdkProfile = true && that.isSetSdkProfile();
      if (this_present_sdkProfile || that_present_sdkProfile) {
        if (!(this_present_sdkProfile && that_present_sdkProfile))
          return false;
        if (!this.sdkProfile.equals(that.sdkProfile))
          return false;
      }

      boolean this_present_targetPlatform = true && this.isSetTargetPlatform();
      boolean that_present_targetPlatform = true && that.isSetTargetPlatform();
      if (this_present_targetPlatform || that_present_targetPlatform) {
        if (!(this_present_targetPlatform && that_present_targetPlatform))
          return false;
        if (!this.targetPlatform.equals(that.targetPlatform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sdkProfile = true && (isSetSdkProfile());
      builder.append(present_sdkProfile);
      if (present_sdkProfile)
        builder.append(sdkProfile);

      boolean present_targetPlatform = true && (isSetTargetPlatform());
      builder.append(present_targetPlatform);
      if (present_targetPlatform)
        builder.append(targetPlatform.getValue());

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateSdk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdkProfile()).compareTo(other.isSetSdkProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkProfile, other.sdkProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTargetPlatform()).compareTo(other.isSetTargetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetPlatform, other.targetPlatform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateSdk_args(");
      boolean first = true;

      sb.append("sdkProfile:");
      if (this.sdkProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkProfile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetPlatform:");
      if (this.targetPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.targetPlatform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateSdk_argsStandardSchemeFactory implements SchemeFactory {
      public generateSdk_argsStandardScheme getScheme() {
        return new generateSdk_argsStandardScheme();
      }
    }

    private static class generateSdk_argsStandardScheme extends StandardScheme<generateSdk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateSdk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sdkProfile = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.sdkProfile.read(iprot);
                struct.setSdkProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET_PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.targetPlatform = SdkPlatform.findByValue(iprot.readI32());
                struct.setTargetPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateSdk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdkProfile != null) {
          oprot.writeFieldBegin(SDK_PROFILE_FIELD_DESC);
          struct.sdkProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.targetPlatform != null) {
          oprot.writeFieldBegin(TARGET_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.targetPlatform.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateSdk_argsTupleSchemeFactory implements SchemeFactory {
      public generateSdk_argsTupleScheme getScheme() {
        return new generateSdk_argsTupleScheme();
      }
    }

    private static class generateSdk_argsTupleScheme extends TupleScheme<generateSdk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateSdk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkProfile()) {
          optionals.set(0);
        }
        if (struct.isSetTargetPlatform()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSdkProfile()) {
          struct.sdkProfile.write(oprot);
        }
        if (struct.isSetTargetPlatform()) {
          oprot.writeI32(struct.targetPlatform.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateSdk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sdkProfile = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.sdkProfile.read(iprot);
          struct.setSdkProfileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.targetPlatform = SdkPlatform.findByValue(iprot.readI32());
          struct.setTargetPlatformIsSet(true);
        }
      }
    }

  }

  public static class generateSdk_result implements org.apache.thrift.TBase<generateSdk_result, generateSdk_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateSdk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateSdk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateSdk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateSdk_resultTupleSchemeFactory());
    }

    public Sdk success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sdk.class)));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateSdk_result.class, metaDataMap);
    }

    public generateSdk_result() {
    }

    public generateSdk_result(
      Sdk success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateSdk_result(generateSdk_result other) {
      if (other.isSetSuccess()) {
        this.success = new Sdk(other.success);
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public generateSdk_result deepCopy() {
      return new generateSdk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public Sdk getSuccess() {
      return this.success;
    }

    public generateSdk_result setSuccess(Sdk success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public generateSdk_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Sdk)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateSdk_result)
        return this.equals((generateSdk_result)that);
      return false;
    }

    public boolean equals(generateSdk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateSdk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateSdk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateSdk_resultStandardSchemeFactory implements SchemeFactory {
      public generateSdk_resultStandardScheme getScheme() {
        return new generateSdk_resultStandardScheme();
      }
    }

    private static class generateSdk_resultStandardScheme extends StandardScheme<generateSdk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateSdk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Sdk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateSdk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateSdk_resultTupleSchemeFactory implements SchemeFactory {
      public generateSdk_resultTupleScheme getScheme() {
        return new generateSdk_resultTupleScheme();
      }
    }

    private static class generateSdk_resultTupleScheme extends TupleScheme<generateSdk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateSdk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateSdk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Sdk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class isSdkProfileUsed_args implements org.apache.thrift.TBase<isSdkProfileUsed_args, isSdkProfileUsed_args._Fields>, java.io.Serializable, Cloneable, Comparable<isSdkProfileUsed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isSdkProfileUsed_args");

    private static final org.apache.thrift.protocol.TField SDK_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkToken", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isSdkProfileUsed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isSdkProfileUsed_argsTupleSchemeFactory());
    }

    public String sdkToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_TOKEN((short)1, "sdkToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_TOKEN
            return SDK_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sdkToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isSdkProfileUsed_args.class, metaDataMap);
    }

    public isSdkProfileUsed_args() {
    }

    public isSdkProfileUsed_args(
      String sdkToken)
    {
      this();
      this.sdkToken = sdkToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isSdkProfileUsed_args(isSdkProfileUsed_args other) {
      if (other.isSetSdkToken()) {
        this.sdkToken = other.sdkToken;
      }
    }

    public isSdkProfileUsed_args deepCopy() {
      return new isSdkProfileUsed_args(this);
    }

    @Override
    public void clear() {
      this.sdkToken = null;
    }

    public String getSdkToken() {
      return this.sdkToken;
    }

    public isSdkProfileUsed_args setSdkToken(String sdkToken) {
      this.sdkToken = sdkToken;
      return this;
    }

    public void unsetSdkToken() {
      this.sdkToken = null;
    }

    /** Returns true if field sdkToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkToken() {
      return this.sdkToken != null;
    }

    public void setSdkTokenIsSet(boolean value) {
      if (!value) {
        this.sdkToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_TOKEN:
        if (value == null) {
          unsetSdkToken();
        } else {
          setSdkToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_TOKEN:
        return getSdkToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_TOKEN:
        return isSetSdkToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isSdkProfileUsed_args)
        return this.equals((isSdkProfileUsed_args)that);
      return false;
    }

    public boolean equals(isSdkProfileUsed_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkToken = true && this.isSetSdkToken();
      boolean that_present_sdkToken = true && that.isSetSdkToken();
      if (this_present_sdkToken || that_present_sdkToken) {
        if (!(this_present_sdkToken && that_present_sdkToken))
          return false;
        if (!this.sdkToken.equals(that.sdkToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sdkToken = true && (isSetSdkToken());
      builder.append(present_sdkToken);
      if (present_sdkToken)
        builder.append(sdkToken);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(isSdkProfileUsed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSdkToken()).compareTo(other.isSetSdkToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkToken, other.sdkToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isSdkProfileUsed_args(");
      boolean first = true;

      sb.append("sdkToken:");
      if (this.sdkToken == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isSdkProfileUsed_argsStandardSchemeFactory implements SchemeFactory {
      public isSdkProfileUsed_argsStandardScheme getScheme() {
        return new isSdkProfileUsed_argsStandardScheme();
      }
    }

    private static class isSdkProfileUsed_argsStandardScheme extends StandardScheme<isSdkProfileUsed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isSdkProfileUsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sdkToken = iprot.readString();
                struct.setSdkTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isSdkProfileUsed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sdkToken != null) {
          oprot.writeFieldBegin(SDK_TOKEN_FIELD_DESC);
          oprot.writeString(struct.sdkToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isSdkProfileUsed_argsTupleSchemeFactory implements SchemeFactory {
      public isSdkProfileUsed_argsTupleScheme getScheme() {
        return new isSdkProfileUsed_argsTupleScheme();
      }
    }

    private static class isSdkProfileUsed_argsTupleScheme extends TupleScheme<isSdkProfileUsed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isSdkProfileUsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSdkToken()) {
          oprot.writeString(struct.sdkToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isSdkProfileUsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sdkToken = iprot.readString();
          struct.setSdkTokenIsSet(true);
        }
      }
    }

  }

  public static class isSdkProfileUsed_result implements org.apache.thrift.TBase<isSdkProfileUsed_result, isSdkProfileUsed_result._Fields>, java.io.Serializable, Cloneable, Comparable<isSdkProfileUsed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isSdkProfileUsed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isSdkProfileUsed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isSdkProfileUsed_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL          , "boolean")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isSdkProfileUsed_result.class, metaDataMap);
    }

    public isSdkProfileUsed_result() {
    }

    public isSdkProfileUsed_result(
      boolean success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isSdkProfileUsed_result(isSdkProfileUsed_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public isSdkProfileUsed_result deepCopy() {
      return new isSdkProfileUsed_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ControlException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isSdkProfileUsed_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public isSdkProfileUsed_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isSdkProfileUsed_result)
        return this.equals((isSdkProfileUsed_result)that);
      return false;
    }

    public boolean equals(isSdkProfileUsed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(isSdkProfileUsed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isSdkProfileUsed_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isSdkProfileUsed_resultStandardSchemeFactory implements SchemeFactory {
      public isSdkProfileUsed_resultStandardScheme getScheme() {
        return new isSdkProfileUsed_resultStandardScheme();
      }
    }

    private static class isSdkProfileUsed_resultStandardScheme extends StandardScheme<isSdkProfileUsed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isSdkProfileUsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isSdkProfileUsed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isSdkProfileUsed_resultTupleSchemeFactory implements SchemeFactory {
      public isSdkProfileUsed_resultTupleScheme getScheme() {
        return new isSdkProfileUsed_resultTupleScheme();
      }
    }

    private static class isSdkProfileUsed_resultTupleScheme extends TupleScheme<isSdkProfileUsed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isSdkProfileUsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isSdkProfileUsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editEventClassFamily_args implements org.apache.thrift.TBase<editEventClassFamily_args, editEventClassFamily_args._Fields>, java.io.Serializable, Cloneable, Comparable<editEventClassFamily_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEventClassFamily_args");

    private static final org.apache.thrift.protocol.TField EVENT_CLASS_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("eventClassFamily", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEventClassFamily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEventClassFamily_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_CLASS_FAMILY((short)1, "eventClassFamily");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_CLASS_FAMILY
            return EVENT_CLASS_FAMILY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_CLASS_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("eventClassFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEventClassFamily_args.class, metaDataMap);
    }

    public editEventClassFamily_args() {
    }

    public editEventClassFamily_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily)
    {
      this();
      this.eventClassFamily = eventClassFamily;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEventClassFamily_args(editEventClassFamily_args other) {
      if (other.isSetEventClassFamily()) {
        this.eventClassFamily = other.eventClassFamily;
      }
    }

    public editEventClassFamily_args deepCopy() {
      return new editEventClassFamily_args(this);
    }

    @Override
    public void clear() {
      this.eventClassFamily = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEventClassFamily() {
      return this.eventClassFamily;
    }

    public editEventClassFamily_args setEventClassFamily(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct eventClassFamily) {
      this.eventClassFamily = eventClassFamily;
      return this;
    }

    public void unsetEventClassFamily() {
      this.eventClassFamily = null;
    }

    /** Returns true if field eventClassFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetEventClassFamily() {
      return this.eventClassFamily != null;
    }

    public void setEventClassFamilyIsSet(boolean value) {
      if (!value) {
        this.eventClassFamily = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_CLASS_FAMILY:
        if (value == null) {
          unsetEventClassFamily();
        } else {
          setEventClassFamily((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_CLASS_FAMILY:
        return getEventClassFamily();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_CLASS_FAMILY:
        return isSetEventClassFamily();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEventClassFamily_args)
        return this.equals((editEventClassFamily_args)that);
      return false;
    }

    public boolean equals(editEventClassFamily_args that) {
      if (that == null)
        return false;

      boolean this_present_eventClassFamily = true && this.isSetEventClassFamily();
      boolean that_present_eventClassFamily = true && that.isSetEventClassFamily();
      if (this_present_eventClassFamily || that_present_eventClassFamily) {
        if (!(this_present_eventClassFamily && that_present_eventClassFamily))
          return false;
        if (!this.eventClassFamily.equals(that.eventClassFamily))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_eventClassFamily = true && (isSetEventClassFamily());
      builder.append(present_eventClassFamily);
      if (present_eventClassFamily)
        builder.append(eventClassFamily);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEventClassFamily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventClassFamily()).compareTo(other.isSetEventClassFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventClassFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventClassFamily, other.eventClassFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEventClassFamily_args(");
      boolean first = true;

      sb.append("eventClassFamily:");
      if (this.eventClassFamily == null) {
        sb.append("null");
      } else {
        sb.append(this.eventClassFamily);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEventClassFamily_argsStandardSchemeFactory implements SchemeFactory {
      public editEventClassFamily_argsStandardScheme getScheme() {
        return new editEventClassFamily_argsStandardScheme();
      }
    }

    private static class editEventClassFamily_argsStandardScheme extends StandardScheme<editEventClassFamily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEventClassFamily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_CLASS_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventClassFamily = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.eventClassFamily.read(iprot);
                struct.setEventClassFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEventClassFamily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventClassFamily != null) {
          oprot.writeFieldBegin(EVENT_CLASS_FAMILY_FIELD_DESC);
          struct.eventClassFamily.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEventClassFamily_argsTupleSchemeFactory implements SchemeFactory {
      public editEventClassFamily_argsTupleScheme getScheme() {
        return new editEventClassFamily_argsTupleScheme();
      }
    }

    private static class editEventClassFamily_argsTupleScheme extends TupleScheme<editEventClassFamily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEventClassFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventClassFamily()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventClassFamily()) {
          struct.eventClassFamily.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEventClassFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventClassFamily = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.eventClassFamily.read(iprot);
          struct.setEventClassFamilyIsSet(true);
        }
      }
    }

  }

  public static class editEventClassFamily_result implements org.apache.thrift.TBase<editEventClassFamily_result, editEventClassFamily_result._Fields>, java.io.Serializable, Cloneable, Comparable<editEventClassFamily_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEventClassFamily_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEventClassFamily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEventClassFamily_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEventClassFamily_result.class, metaDataMap);
    }

    public editEventClassFamily_result() {
    }

    public editEventClassFamily_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEventClassFamily_result(editEventClassFamily_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editEventClassFamily_result deepCopy() {
      return new editEventClassFamily_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editEventClassFamily_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editEventClassFamily_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEventClassFamily_result)
        return this.equals((editEventClassFamily_result)that);
      return false;
    }

    public boolean equals(editEventClassFamily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEventClassFamily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEventClassFamily_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEventClassFamily_resultStandardSchemeFactory implements SchemeFactory {
      public editEventClassFamily_resultStandardScheme getScheme() {
        return new editEventClassFamily_resultStandardScheme();
      }
    }

    private static class editEventClassFamily_resultStandardScheme extends StandardScheme<editEventClassFamily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEventClassFamily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEventClassFamily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEventClassFamily_resultTupleSchemeFactory implements SchemeFactory {
      public editEventClassFamily_resultTupleScheme getScheme() {
        return new editEventClassFamily_resultTupleScheme();
      }
    }

    private static class editEventClassFamily_resultTupleScheme extends TupleScheme<editEventClassFamily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEventClassFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEventClassFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamiliesByTenantId_args implements org.apache.thrift.TBase<getEventClassFamiliesByTenantId_args, getEventClassFamiliesByTenantId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamiliesByTenantId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamiliesByTenantId_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamiliesByTenantId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamiliesByTenantId_argsTupleSchemeFactory());
    }

    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamiliesByTenantId_args.class, metaDataMap);
    }

    public getEventClassFamiliesByTenantId_args() {
    }

    public getEventClassFamiliesByTenantId_args(
      String tenantId)
    {
      this();
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamiliesByTenantId_args(getEventClassFamiliesByTenantId_args other) {
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public getEventClassFamiliesByTenantId_args deepCopy() {
      return new getEventClassFamiliesByTenantId_args(this);
    }

    @Override
    public void clear() {
      this.tenantId = null;
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public getEventClassFamiliesByTenantId_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamiliesByTenantId_args)
        return this.equals((getEventClassFamiliesByTenantId_args)that);
      return false;
    }

    public boolean equals(getEventClassFamiliesByTenantId_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamiliesByTenantId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamiliesByTenantId_args(");
      boolean first = true;

      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamiliesByTenantId_argsStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByTenantId_argsStandardScheme getScheme() {
        return new getEventClassFamiliesByTenantId_argsStandardScheme();
      }
    }

    private static class getEventClassFamiliesByTenantId_argsStandardScheme extends StandardScheme<getEventClassFamiliesByTenantId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamiliesByTenantId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamiliesByTenantId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamiliesByTenantId_argsTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByTenantId_argsTupleScheme getScheme() {
        return new getEventClassFamiliesByTenantId_argsTupleScheme();
      }
    }

    private static class getEventClassFamiliesByTenantId_argsTupleScheme extends TupleScheme<getEventClassFamiliesByTenantId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByTenantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByTenantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamiliesByTenantId_result implements org.apache.thrift.TBase<getEventClassFamiliesByTenantId_result, getEventClassFamiliesByTenantId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamiliesByTenantId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamiliesByTenantId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamiliesByTenantId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamiliesByTenantId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamiliesByTenantId_result.class, metaDataMap);
    }

    public getEventClassFamiliesByTenantId_result() {
    }

    public getEventClassFamiliesByTenantId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamiliesByTenantId_result(getEventClassFamiliesByTenantId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEventClassFamiliesByTenantId_result deepCopy() {
      return new getEventClassFamiliesByTenantId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getEventClassFamiliesByTenantId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEventClassFamiliesByTenantId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamiliesByTenantId_result)
        return this.equals((getEventClassFamiliesByTenantId_result)that);
      return false;
    }

    public boolean equals(getEventClassFamiliesByTenantId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamiliesByTenantId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamiliesByTenantId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamiliesByTenantId_resultStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByTenantId_resultStandardScheme getScheme() {
        return new getEventClassFamiliesByTenantId_resultStandardScheme();
      }
    }

    private static class getEventClassFamiliesByTenantId_resultStandardScheme extends StandardScheme<getEventClassFamiliesByTenantId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamiliesByTenantId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list208.size);
                  for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem210;
                    _elem210 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem210.read(iprot);
                    struct.success.add(_elem210);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamiliesByTenantId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamiliesByTenantId_resultTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByTenantId_resultTupleScheme getScheme() {
        return new getEventClassFamiliesByTenantId_resultTupleScheme();
      }
    }

    private static class getEventClassFamiliesByTenantId_resultTupleScheme extends TupleScheme<getEventClassFamiliesByTenantId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByTenantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByTenantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list213.size);
            for (int _i214 = 0; _i214 < _list213.size; ++_i214)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem215;
              _elem215 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem215.read(iprot);
              struct.success.add(_elem215);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamily_args implements org.apache.thrift.TBase<getEventClassFamily_args, getEventClassFamily_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamily_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamily_args");

    private static final org.apache.thrift.protocol.TField EVENT_CLASS_FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventClassFamilyId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamily_argsTupleSchemeFactory());
    }

    public String eventClassFamilyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_CLASS_FAMILY_ID((short)1, "eventClassFamilyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_CLASS_FAMILY_ID
            return EVENT_CLASS_FAMILY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_CLASS_FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("eventClassFamilyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamily_args.class, metaDataMap);
    }

    public getEventClassFamily_args() {
    }

    public getEventClassFamily_args(
      String eventClassFamilyId)
    {
      this();
      this.eventClassFamilyId = eventClassFamilyId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamily_args(getEventClassFamily_args other) {
      if (other.isSetEventClassFamilyId()) {
        this.eventClassFamilyId = other.eventClassFamilyId;
      }
    }

    public getEventClassFamily_args deepCopy() {
      return new getEventClassFamily_args(this);
    }

    @Override
    public void clear() {
      this.eventClassFamilyId = null;
    }

    public String getEventClassFamilyId() {
      return this.eventClassFamilyId;
    }

    public getEventClassFamily_args setEventClassFamilyId(String eventClassFamilyId) {
      this.eventClassFamilyId = eventClassFamilyId;
      return this;
    }

    public void unsetEventClassFamilyId() {
      this.eventClassFamilyId = null;
    }

    /** Returns true if field eventClassFamilyId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventClassFamilyId() {
      return this.eventClassFamilyId != null;
    }

    public void setEventClassFamilyIdIsSet(boolean value) {
      if (!value) {
        this.eventClassFamilyId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        if (value == null) {
          unsetEventClassFamilyId();
        } else {
          setEventClassFamilyId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        return getEventClassFamilyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        return isSetEventClassFamilyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamily_args)
        return this.equals((getEventClassFamily_args)that);
      return false;
    }

    public boolean equals(getEventClassFamily_args that) {
      if (that == null)
        return false;

      boolean this_present_eventClassFamilyId = true && this.isSetEventClassFamilyId();
      boolean that_present_eventClassFamilyId = true && that.isSetEventClassFamilyId();
      if (this_present_eventClassFamilyId || that_present_eventClassFamilyId) {
        if (!(this_present_eventClassFamilyId && that_present_eventClassFamilyId))
          return false;
        if (!this.eventClassFamilyId.equals(that.eventClassFamilyId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_eventClassFamilyId = true && (isSetEventClassFamilyId());
      builder.append(present_eventClassFamilyId);
      if (present_eventClassFamilyId)
        builder.append(eventClassFamilyId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventClassFamilyId()).compareTo(other.isSetEventClassFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventClassFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventClassFamilyId, other.eventClassFamilyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamily_args(");
      boolean first = true;

      sb.append("eventClassFamilyId:");
      if (this.eventClassFamilyId == null) {
        sb.append("null");
      } else {
        sb.append(this.eventClassFamilyId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamily_argsStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamily_argsStandardScheme getScheme() {
        return new getEventClassFamily_argsStandardScheme();
      }
    }

    private static class getEventClassFamily_argsStandardScheme extends StandardScheme<getEventClassFamily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_CLASS_FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventClassFamilyId = iprot.readString();
                struct.setEventClassFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventClassFamilyId != null) {
          oprot.writeFieldBegin(EVENT_CLASS_FAMILY_ID_FIELD_DESC);
          oprot.writeString(struct.eventClassFamilyId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamily_argsTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamily_argsTupleScheme getScheme() {
        return new getEventClassFamily_argsTupleScheme();
      }
    }

    private static class getEventClassFamily_argsTupleScheme extends TupleScheme<getEventClassFamily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventClassFamilyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventClassFamilyId()) {
          oprot.writeString(struct.eventClassFamilyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventClassFamilyId = iprot.readString();
          struct.setEventClassFamilyIdIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamily_result implements org.apache.thrift.TBase<getEventClassFamily_result, getEventClassFamily_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamily_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamily_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamily_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamily_result.class, metaDataMap);
    }

    public getEventClassFamily_result() {
    }

    public getEventClassFamily_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamily_result(getEventClassFamily_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEventClassFamily_result deepCopy() {
      return new getEventClassFamily_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getEventClassFamily_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEventClassFamily_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamily_result)
        return this.equals((getEventClassFamily_result)that);
      return false;
    }

    public boolean equals(getEventClassFamily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamily_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamily_resultStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamily_resultStandardScheme getScheme() {
        return new getEventClassFamily_resultStandardScheme();
      }
    }

    private static class getEventClassFamily_resultStandardScheme extends StandardScheme<getEventClassFamily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamily_resultTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamily_resultTupleScheme getScheme() {
        return new getEventClassFamily_resultTupleScheme();
      }
    }

    private static class getEventClassFamily_resultTupleScheme extends TupleScheme<getEventClassFamily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class addEventClassFamilySchema_args implements org.apache.thrift.TBase<addEventClassFamilySchema_args, addEventClassFamilySchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEventClassFamilySchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEventClassFamilySchema_args");

    private static final org.apache.thrift.protocol.TField EVENT_CLASS_FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventClassFamilyId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_CLASS_FAMILY_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("eventClassFamilySchema", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CREATED_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdUsername", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEventClassFamilySchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEventClassFamilySchema_argsTupleSchemeFactory());
    }

    public String eventClassFamilyId; // required
    public String eventClassFamilySchema; // required
    public String createdUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_CLASS_FAMILY_ID((short)1, "eventClassFamilyId"),
      EVENT_CLASS_FAMILY_SCHEMA((short)2, "eventClassFamilySchema"),
      CREATED_USERNAME((short)3, "createdUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_CLASS_FAMILY_ID
            return EVENT_CLASS_FAMILY_ID;
          case 2: // EVENT_CLASS_FAMILY_SCHEMA
            return EVENT_CLASS_FAMILY_SCHEMA;
          case 3: // CREATED_USERNAME
            return CREATED_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_CLASS_FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("eventClassFamilyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.EVENT_CLASS_FAMILY_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("eventClassFamilySchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATED_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("createdUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEventClassFamilySchema_args.class, metaDataMap);
    }

    public addEventClassFamilySchema_args() {
    }

    public addEventClassFamilySchema_args(
      String eventClassFamilyId,
      String eventClassFamilySchema,
      String createdUsername)
    {
      this();
      this.eventClassFamilyId = eventClassFamilyId;
      this.eventClassFamilySchema = eventClassFamilySchema;
      this.createdUsername = createdUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEventClassFamilySchema_args(addEventClassFamilySchema_args other) {
      if (other.isSetEventClassFamilyId()) {
        this.eventClassFamilyId = other.eventClassFamilyId;
      }
      if (other.isSetEventClassFamilySchema()) {
        this.eventClassFamilySchema = other.eventClassFamilySchema;
      }
      if (other.isSetCreatedUsername()) {
        this.createdUsername = other.createdUsername;
      }
    }

    public addEventClassFamilySchema_args deepCopy() {
      return new addEventClassFamilySchema_args(this);
    }

    @Override
    public void clear() {
      this.eventClassFamilyId = null;
      this.eventClassFamilySchema = null;
      this.createdUsername = null;
    }

    public String getEventClassFamilyId() {
      return this.eventClassFamilyId;
    }

    public addEventClassFamilySchema_args setEventClassFamilyId(String eventClassFamilyId) {
      this.eventClassFamilyId = eventClassFamilyId;
      return this;
    }

    public void unsetEventClassFamilyId() {
      this.eventClassFamilyId = null;
    }

    /** Returns true if field eventClassFamilyId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventClassFamilyId() {
      return this.eventClassFamilyId != null;
    }

    public void setEventClassFamilyIdIsSet(boolean value) {
      if (!value) {
        this.eventClassFamilyId = null;
      }
    }

    public String getEventClassFamilySchema() {
      return this.eventClassFamilySchema;
    }

    public addEventClassFamilySchema_args setEventClassFamilySchema(String eventClassFamilySchema) {
      this.eventClassFamilySchema = eventClassFamilySchema;
      return this;
    }

    public void unsetEventClassFamilySchema() {
      this.eventClassFamilySchema = null;
    }

    /** Returns true if field eventClassFamilySchema is set (has been assigned a value) and false otherwise */
    public boolean isSetEventClassFamilySchema() {
      return this.eventClassFamilySchema != null;
    }

    public void setEventClassFamilySchemaIsSet(boolean value) {
      if (!value) {
        this.eventClassFamilySchema = null;
      }
    }

    public String getCreatedUsername() {
      return this.createdUsername;
    }

    public addEventClassFamilySchema_args setCreatedUsername(String createdUsername) {
      this.createdUsername = createdUsername;
      return this;
    }

    public void unsetCreatedUsername() {
      this.createdUsername = null;
    }

    /** Returns true if field createdUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatedUsername() {
      return this.createdUsername != null;
    }

    public void setCreatedUsernameIsSet(boolean value) {
      if (!value) {
        this.createdUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        if (value == null) {
          unsetEventClassFamilyId();
        } else {
          setEventClassFamilyId((String)value);
        }
        break;

      case EVENT_CLASS_FAMILY_SCHEMA:
        if (value == null) {
          unsetEventClassFamilySchema();
        } else {
          setEventClassFamilySchema((String)value);
        }
        break;

      case CREATED_USERNAME:
        if (value == null) {
          unsetCreatedUsername();
        } else {
          setCreatedUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        return getEventClassFamilyId();

      case EVENT_CLASS_FAMILY_SCHEMA:
        return getEventClassFamilySchema();

      case CREATED_USERNAME:
        return getCreatedUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_CLASS_FAMILY_ID:
        return isSetEventClassFamilyId();
      case EVENT_CLASS_FAMILY_SCHEMA:
        return isSetEventClassFamilySchema();
      case CREATED_USERNAME:
        return isSetCreatedUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEventClassFamilySchema_args)
        return this.equals((addEventClassFamilySchema_args)that);
      return false;
    }

    public boolean equals(addEventClassFamilySchema_args that) {
      if (that == null)
        return false;

      boolean this_present_eventClassFamilyId = true && this.isSetEventClassFamilyId();
      boolean that_present_eventClassFamilyId = true && that.isSetEventClassFamilyId();
      if (this_present_eventClassFamilyId || that_present_eventClassFamilyId) {
        if (!(this_present_eventClassFamilyId && that_present_eventClassFamilyId))
          return false;
        if (!this.eventClassFamilyId.equals(that.eventClassFamilyId))
          return false;
      }

      boolean this_present_eventClassFamilySchema = true && this.isSetEventClassFamilySchema();
      boolean that_present_eventClassFamilySchema = true && that.isSetEventClassFamilySchema();
      if (this_present_eventClassFamilySchema || that_present_eventClassFamilySchema) {
        if (!(this_present_eventClassFamilySchema && that_present_eventClassFamilySchema))
          return false;
        if (!this.eventClassFamilySchema.equals(that.eventClassFamilySchema))
          return false;
      }

      boolean this_present_createdUsername = true && this.isSetCreatedUsername();
      boolean that_present_createdUsername = true && that.isSetCreatedUsername();
      if (this_present_createdUsername || that_present_createdUsername) {
        if (!(this_present_createdUsername && that_present_createdUsername))
          return false;
        if (!this.createdUsername.equals(that.createdUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_eventClassFamilyId = true && (isSetEventClassFamilyId());
      builder.append(present_eventClassFamilyId);
      if (present_eventClassFamilyId)
        builder.append(eventClassFamilyId);

      boolean present_eventClassFamilySchema = true && (isSetEventClassFamilySchema());
      builder.append(present_eventClassFamilySchema);
      if (present_eventClassFamilySchema)
        builder.append(eventClassFamilySchema);

      boolean present_createdUsername = true && (isSetCreatedUsername());
      builder.append(present_createdUsername);
      if (present_createdUsername)
        builder.append(createdUsername);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addEventClassFamilySchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventClassFamilyId()).compareTo(other.isSetEventClassFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventClassFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventClassFamilyId, other.eventClassFamilyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventClassFamilySchema()).compareTo(other.isSetEventClassFamilySchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventClassFamilySchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventClassFamilySchema, other.eventClassFamilySchema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatedUsername()).compareTo(other.isSetCreatedUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatedUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdUsername, other.createdUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEventClassFamilySchema_args(");
      boolean first = true;

      sb.append("eventClassFamilyId:");
      if (this.eventClassFamilyId == null) {
        sb.append("null");
      } else {
        sb.append(this.eventClassFamilyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventClassFamilySchema:");
      if (this.eventClassFamilySchema == null) {
        sb.append("null");
      } else {
        sb.append(this.eventClassFamilySchema);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createdUsername:");
      if (this.createdUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.createdUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEventClassFamilySchema_argsStandardSchemeFactory implements SchemeFactory {
      public addEventClassFamilySchema_argsStandardScheme getScheme() {
        return new addEventClassFamilySchema_argsStandardScheme();
      }
    }

    private static class addEventClassFamilySchema_argsStandardScheme extends StandardScheme<addEventClassFamilySchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEventClassFamilySchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_CLASS_FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventClassFamilyId = iprot.readString();
                struct.setEventClassFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_CLASS_FAMILY_SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventClassFamilySchema = iprot.readString();
                struct.setEventClassFamilySchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREATED_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createdUsername = iprot.readString();
                struct.setCreatedUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEventClassFamilySchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventClassFamilyId != null) {
          oprot.writeFieldBegin(EVENT_CLASS_FAMILY_ID_FIELD_DESC);
          oprot.writeString(struct.eventClassFamilyId);
          oprot.writeFieldEnd();
        }
        if (struct.eventClassFamilySchema != null) {
          oprot.writeFieldBegin(EVENT_CLASS_FAMILY_SCHEMA_FIELD_DESC);
          oprot.writeString(struct.eventClassFamilySchema);
          oprot.writeFieldEnd();
        }
        if (struct.createdUsername != null) {
          oprot.writeFieldBegin(CREATED_USERNAME_FIELD_DESC);
          oprot.writeString(struct.createdUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEventClassFamilySchema_argsTupleSchemeFactory implements SchemeFactory {
      public addEventClassFamilySchema_argsTupleScheme getScheme() {
        return new addEventClassFamilySchema_argsTupleScheme();
      }
    }

    private static class addEventClassFamilySchema_argsTupleScheme extends TupleScheme<addEventClassFamilySchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEventClassFamilySchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventClassFamilyId()) {
          optionals.set(0);
        }
        if (struct.isSetEventClassFamilySchema()) {
          optionals.set(1);
        }
        if (struct.isSetCreatedUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEventClassFamilyId()) {
          oprot.writeString(struct.eventClassFamilyId);
        }
        if (struct.isSetEventClassFamilySchema()) {
          oprot.writeString(struct.eventClassFamilySchema);
        }
        if (struct.isSetCreatedUsername()) {
          oprot.writeString(struct.createdUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEventClassFamilySchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.eventClassFamilyId = iprot.readString();
          struct.setEventClassFamilyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eventClassFamilySchema = iprot.readString();
          struct.setEventClassFamilySchemaIsSet(true);
        }
        if (incoming.get(2)) {
          struct.createdUsername = iprot.readString();
          struct.setCreatedUsernameIsSet(true);
        }
      }
    }

  }

  public static class addEventClassFamilySchema_result implements org.apache.thrift.TBase<addEventClassFamilySchema_result, addEventClassFamilySchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEventClassFamilySchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEventClassFamilySchema_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEventClassFamilySchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEventClassFamilySchema_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEventClassFamilySchema_result.class, metaDataMap);
    }

    public addEventClassFamilySchema_result() {
    }

    public addEventClassFamilySchema_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEventClassFamilySchema_result(addEventClassFamilySchema_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public addEventClassFamilySchema_result deepCopy() {
      return new addEventClassFamilySchema_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public addEventClassFamilySchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEventClassFamilySchema_result)
        return this.equals((addEventClassFamilySchema_result)that);
      return false;
    }

    public boolean equals(addEventClassFamilySchema_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addEventClassFamilySchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEventClassFamilySchema_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEventClassFamilySchema_resultStandardSchemeFactory implements SchemeFactory {
      public addEventClassFamilySchema_resultStandardScheme getScheme() {
        return new addEventClassFamilySchema_resultStandardScheme();
      }
    }

    private static class addEventClassFamilySchema_resultStandardScheme extends StandardScheme<addEventClassFamilySchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEventClassFamilySchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEventClassFamilySchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEventClassFamilySchema_resultTupleSchemeFactory implements SchemeFactory {
      public addEventClassFamilySchema_resultTupleScheme getScheme() {
        return new addEventClassFamilySchema_resultTupleScheme();
      }
    }

    private static class addEventClassFamilySchema_resultTupleScheme extends TupleScheme<addEventClassFamilySchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEventClassFamilySchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEventClassFamilySchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEventClassesByFamilyIdVersionAndType_args implements org.apache.thrift.TBase<getEventClassesByFamilyIdVersionAndType_args, getEventClassesByFamilyIdVersionAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassesByFamilyIdVersionAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassesByFamilyIdVersionAndType_args");

    private static final org.apache.thrift.protocol.TField ECF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ecfId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassesByFamilyIdVersionAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassesByFamilyIdVersionAndType_argsTupleSchemeFactory());
    }

    public String ecfId; // required
    public int version; // required
    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ECF_ID((short)1, "ecfId"),
      VERSION((short)2, "version"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ECF_ID
            return ECF_ID;
          case 2: // VERSION
            return VERSION;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ECF_ID, new org.apache.thrift.meta_data.FieldMetaData("ecfId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassesByFamilyIdVersionAndType_args.class, metaDataMap);
    }

    public getEventClassesByFamilyIdVersionAndType_args() {
    }

    public getEventClassesByFamilyIdVersionAndType_args(
      String ecfId,
      int version,
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type)
    {
      this();
      this.ecfId = ecfId;
      this.version = version;
      setVersionIsSet(true);
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassesByFamilyIdVersionAndType_args(getEventClassesByFamilyIdVersionAndType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEcfId()) {
        this.ecfId = other.ecfId;
      }
      this.version = other.version;
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getEventClassesByFamilyIdVersionAndType_args deepCopy() {
      return new getEventClassesByFamilyIdVersionAndType_args(this);
    }

    @Override
    public void clear() {
      this.ecfId = null;
      setVersionIsSet(false);
      this.version = 0;
      this.type = null;
    }

    public String getEcfId() {
      return this.ecfId;
    }

    public getEventClassesByFamilyIdVersionAndType_args setEcfId(String ecfId) {
      this.ecfId = ecfId;
      return this;
    }

    public void unsetEcfId() {
      this.ecfId = null;
    }

    /** Returns true if field ecfId is set (has been assigned a value) and false otherwise */
    public boolean isSetEcfId() {
      return this.ecfId != null;
    }

    public void setEcfIdIsSet(boolean value) {
      if (!value) {
        this.ecfId = null;
      }
    }

    public int getVersion() {
      return this.version;
    }

    public getEventClassesByFamilyIdVersionAndType_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getType() {
      return this.type;
    }

    public getEventClassesByFamilyIdVersionAndType_args setType(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ECF_ID:
        if (value == null) {
          unsetEcfId();
        } else {
          setEcfId((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ECF_ID:
        return getEcfId();

      case VERSION:
        return Integer.valueOf(getVersion());

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ECF_ID:
        return isSetEcfId();
      case VERSION:
        return isSetVersion();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassesByFamilyIdVersionAndType_args)
        return this.equals((getEventClassesByFamilyIdVersionAndType_args)that);
      return false;
    }

    public boolean equals(getEventClassesByFamilyIdVersionAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_ecfId = true && this.isSetEcfId();
      boolean that_present_ecfId = true && that.isSetEcfId();
      if (this_present_ecfId || that_present_ecfId) {
        if (!(this_present_ecfId && that_present_ecfId))
          return false;
        if (!this.ecfId.equals(that.ecfId))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ecfId = true && (isSetEcfId());
      builder.append(present_ecfId);
      if (present_ecfId)
        builder.append(ecfId);

      boolean present_version = true;
      builder.append(present_version);
      if (present_version)
        builder.append(version);

      boolean present_type = true && (isSetType());
      builder.append(present_type);
      if (present_type)
        builder.append(type);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassesByFamilyIdVersionAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEcfId()).compareTo(other.isSetEcfId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEcfId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecfId, other.ecfId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassesByFamilyIdVersionAndType_args(");
      boolean first = true;

      sb.append("ecfId:");
      if (this.ecfId == null) {
        sb.append("null");
      } else {
        sb.append(this.ecfId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_argsStandardSchemeFactory implements SchemeFactory {
      public getEventClassesByFamilyIdVersionAndType_argsStandardScheme getScheme() {
        return new getEventClassesByFamilyIdVersionAndType_argsStandardScheme();
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_argsStandardScheme extends StandardScheme<getEventClassesByFamilyIdVersionAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassesByFamilyIdVersionAndType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ECF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ecfId = iprot.readString();
                struct.setEcfIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.type.read(iprot);
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassesByFamilyIdVersionAndType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ecfId != null) {
          oprot.writeFieldBegin(ECF_ID_FIELD_DESC);
          oprot.writeString(struct.ecfId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          struct.type.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassesByFamilyIdVersionAndType_argsTupleSchemeFactory implements SchemeFactory {
      public getEventClassesByFamilyIdVersionAndType_argsTupleScheme getScheme() {
        return new getEventClassesByFamilyIdVersionAndType_argsTupleScheme();
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_argsTupleScheme extends TupleScheme<getEventClassesByFamilyIdVersionAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassesByFamilyIdVersionAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEcfId()) {
          optionals.set(0);
        }
        if (struct.isSetVersion()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEcfId()) {
          oprot.writeString(struct.ecfId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetType()) {
          struct.type.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassesByFamilyIdVersionAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ecfId = iprot.readString();
          struct.setEcfIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.type.read(iprot);
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getEventClassesByFamilyIdVersionAndType_result implements org.apache.thrift.TBase<getEventClassesByFamilyIdVersionAndType_result, getEventClassesByFamilyIdVersionAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassesByFamilyIdVersionAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassesByFamilyIdVersionAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassesByFamilyIdVersionAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassesByFamilyIdVersionAndType_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassesByFamilyIdVersionAndType_result.class, metaDataMap);
    }

    public getEventClassesByFamilyIdVersionAndType_result() {
    }

    public getEventClassesByFamilyIdVersionAndType_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassesByFamilyIdVersionAndType_result(getEventClassesByFamilyIdVersionAndType_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEventClassesByFamilyIdVersionAndType_result deepCopy() {
      return new getEventClassesByFamilyIdVersionAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getEventClassesByFamilyIdVersionAndType_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEventClassesByFamilyIdVersionAndType_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassesByFamilyIdVersionAndType_result)
        return this.equals((getEventClassesByFamilyIdVersionAndType_result)that);
      return false;
    }

    public boolean equals(getEventClassesByFamilyIdVersionAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassesByFamilyIdVersionAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassesByFamilyIdVersionAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_resultStandardSchemeFactory implements SchemeFactory {
      public getEventClassesByFamilyIdVersionAndType_resultStandardScheme getScheme() {
        return new getEventClassesByFamilyIdVersionAndType_resultStandardScheme();
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_resultStandardScheme extends StandardScheme<getEventClassesByFamilyIdVersionAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassesByFamilyIdVersionAndType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list216.size);
                  for (int _i217 = 0; _i217 < _list216.size; ++_i217)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem218;
                    _elem218 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem218.read(iprot);
                    struct.success.add(_elem218);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassesByFamilyIdVersionAndType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassesByFamilyIdVersionAndType_resultTupleSchemeFactory implements SchemeFactory {
      public getEventClassesByFamilyIdVersionAndType_resultTupleScheme getScheme() {
        return new getEventClassesByFamilyIdVersionAndType_resultTupleScheme();
      }
    }

    private static class getEventClassesByFamilyIdVersionAndType_resultTupleScheme extends TupleScheme<getEventClassesByFamilyIdVersionAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassesByFamilyIdVersionAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassesByFamilyIdVersionAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list221.size);
            for (int _i222 = 0; _i222 < _list221.size; ++_i222)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem223;
              _elem223 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem223.read(iprot);
              struct.success.add(_elem223);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editApplicationEventFamilyMap_args implements org.apache.thrift.TBase<editApplicationEventFamilyMap_args, editApplicationEventFamilyMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<editApplicationEventFamilyMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editApplicationEventFamilyMap_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_EVENT_FAMILY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationEventFamilyMap", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editApplicationEventFamilyMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editApplicationEventFamilyMap_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_EVENT_FAMILY_MAP((short)1, "applicationEventFamilyMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_EVENT_FAMILY_MAP
            return APPLICATION_EVENT_FAMILY_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_EVENT_FAMILY_MAP, new org.apache.thrift.meta_data.FieldMetaData("applicationEventFamilyMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editApplicationEventFamilyMap_args.class, metaDataMap);
    }

    public editApplicationEventFamilyMap_args() {
    }

    public editApplicationEventFamilyMap_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap)
    {
      this();
      this.applicationEventFamilyMap = applicationEventFamilyMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editApplicationEventFamilyMap_args(editApplicationEventFamilyMap_args other) {
      if (other.isSetApplicationEventFamilyMap()) {
        this.applicationEventFamilyMap = other.applicationEventFamilyMap;
      }
    }

    public editApplicationEventFamilyMap_args deepCopy() {
      return new editApplicationEventFamilyMap_args(this);
    }

    @Override
    public void clear() {
      this.applicationEventFamilyMap = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getApplicationEventFamilyMap() {
      return this.applicationEventFamilyMap;
    }

    public editApplicationEventFamilyMap_args setApplicationEventFamilyMap(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct applicationEventFamilyMap) {
      this.applicationEventFamilyMap = applicationEventFamilyMap;
      return this;
    }

    public void unsetApplicationEventFamilyMap() {
      this.applicationEventFamilyMap = null;
    }

    /** Returns true if field applicationEventFamilyMap is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationEventFamilyMap() {
      return this.applicationEventFamilyMap != null;
    }

    public void setApplicationEventFamilyMapIsSet(boolean value) {
      if (!value) {
        this.applicationEventFamilyMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP:
        if (value == null) {
          unsetApplicationEventFamilyMap();
        } else {
          setApplicationEventFamilyMap((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP:
        return getApplicationEventFamilyMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP:
        return isSetApplicationEventFamilyMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editApplicationEventFamilyMap_args)
        return this.equals((editApplicationEventFamilyMap_args)that);
      return false;
    }

    public boolean equals(editApplicationEventFamilyMap_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationEventFamilyMap = true && this.isSetApplicationEventFamilyMap();
      boolean that_present_applicationEventFamilyMap = true && that.isSetApplicationEventFamilyMap();
      if (this_present_applicationEventFamilyMap || that_present_applicationEventFamilyMap) {
        if (!(this_present_applicationEventFamilyMap && that_present_applicationEventFamilyMap))
          return false;
        if (!this.applicationEventFamilyMap.equals(that.applicationEventFamilyMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationEventFamilyMap = true && (isSetApplicationEventFamilyMap());
      builder.append(present_applicationEventFamilyMap);
      if (present_applicationEventFamilyMap)
        builder.append(applicationEventFamilyMap);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editApplicationEventFamilyMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationEventFamilyMap()).compareTo(other.isSetApplicationEventFamilyMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationEventFamilyMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationEventFamilyMap, other.applicationEventFamilyMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editApplicationEventFamilyMap_args(");
      boolean first = true;

      sb.append("applicationEventFamilyMap:");
      if (this.applicationEventFamilyMap == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationEventFamilyMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editApplicationEventFamilyMap_argsStandardSchemeFactory implements SchemeFactory {
      public editApplicationEventFamilyMap_argsStandardScheme getScheme() {
        return new editApplicationEventFamilyMap_argsStandardScheme();
      }
    }

    private static class editApplicationEventFamilyMap_argsStandardScheme extends StandardScheme<editApplicationEventFamilyMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_EVENT_FAMILY_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationEventFamilyMap = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.applicationEventFamilyMap.read(iprot);
                struct.setApplicationEventFamilyMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationEventFamilyMap != null) {
          oprot.writeFieldBegin(APPLICATION_EVENT_FAMILY_MAP_FIELD_DESC);
          struct.applicationEventFamilyMap.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editApplicationEventFamilyMap_argsTupleSchemeFactory implements SchemeFactory {
      public editApplicationEventFamilyMap_argsTupleScheme getScheme() {
        return new editApplicationEventFamilyMap_argsTupleScheme();
      }
    }

    private static class editApplicationEventFamilyMap_argsTupleScheme extends TupleScheme<editApplicationEventFamilyMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationEventFamilyMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationEventFamilyMap()) {
          struct.applicationEventFamilyMap.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationEventFamilyMap = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.applicationEventFamilyMap.read(iprot);
          struct.setApplicationEventFamilyMapIsSet(true);
        }
      }
    }

  }

  public static class editApplicationEventFamilyMap_result implements org.apache.thrift.TBase<editApplicationEventFamilyMap_result, editApplicationEventFamilyMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<editApplicationEventFamilyMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editApplicationEventFamilyMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editApplicationEventFamilyMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editApplicationEventFamilyMap_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editApplicationEventFamilyMap_result.class, metaDataMap);
    }

    public editApplicationEventFamilyMap_result() {
    }

    public editApplicationEventFamilyMap_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editApplicationEventFamilyMap_result(editApplicationEventFamilyMap_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editApplicationEventFamilyMap_result deepCopy() {
      return new editApplicationEventFamilyMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editApplicationEventFamilyMap_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editApplicationEventFamilyMap_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editApplicationEventFamilyMap_result)
        return this.equals((editApplicationEventFamilyMap_result)that);
      return false;
    }

    public boolean equals(editApplicationEventFamilyMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editApplicationEventFamilyMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editApplicationEventFamilyMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editApplicationEventFamilyMap_resultStandardSchemeFactory implements SchemeFactory {
      public editApplicationEventFamilyMap_resultStandardScheme getScheme() {
        return new editApplicationEventFamilyMap_resultStandardScheme();
      }
    }

    private static class editApplicationEventFamilyMap_resultStandardScheme extends StandardScheme<editApplicationEventFamilyMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editApplicationEventFamilyMap_resultTupleSchemeFactory implements SchemeFactory {
      public editApplicationEventFamilyMap_resultTupleScheme getScheme() {
        return new editApplicationEventFamilyMap_resultTupleScheme();
      }
    }

    private static class editApplicationEventFamilyMap_resultTupleScheme extends TupleScheme<editApplicationEventFamilyMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getApplicationEventFamilyMap_args implements org.apache.thrift.TBase<getApplicationEventFamilyMap_args, getApplicationEventFamilyMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationEventFamilyMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationEventFamilyMap_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_EVENT_FAMILY_MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationEventFamilyMapId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationEventFamilyMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationEventFamilyMap_argsTupleSchemeFactory());
    }

    public String applicationEventFamilyMapId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_EVENT_FAMILY_MAP_ID((short)1, "applicationEventFamilyMapId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_EVENT_FAMILY_MAP_ID
            return APPLICATION_EVENT_FAMILY_MAP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_EVENT_FAMILY_MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationEventFamilyMapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationEventFamilyMap_args.class, metaDataMap);
    }

    public getApplicationEventFamilyMap_args() {
    }

    public getApplicationEventFamilyMap_args(
      String applicationEventFamilyMapId)
    {
      this();
      this.applicationEventFamilyMapId = applicationEventFamilyMapId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationEventFamilyMap_args(getApplicationEventFamilyMap_args other) {
      if (other.isSetApplicationEventFamilyMapId()) {
        this.applicationEventFamilyMapId = other.applicationEventFamilyMapId;
      }
    }

    public getApplicationEventFamilyMap_args deepCopy() {
      return new getApplicationEventFamilyMap_args(this);
    }

    @Override
    public void clear() {
      this.applicationEventFamilyMapId = null;
    }

    public String getApplicationEventFamilyMapId() {
      return this.applicationEventFamilyMapId;
    }

    public getApplicationEventFamilyMap_args setApplicationEventFamilyMapId(String applicationEventFamilyMapId) {
      this.applicationEventFamilyMapId = applicationEventFamilyMapId;
      return this;
    }

    public void unsetApplicationEventFamilyMapId() {
      this.applicationEventFamilyMapId = null;
    }

    /** Returns true if field applicationEventFamilyMapId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationEventFamilyMapId() {
      return this.applicationEventFamilyMapId != null;
    }

    public void setApplicationEventFamilyMapIdIsSet(boolean value) {
      if (!value) {
        this.applicationEventFamilyMapId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP_ID:
        if (value == null) {
          unsetApplicationEventFamilyMapId();
        } else {
          setApplicationEventFamilyMapId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP_ID:
        return getApplicationEventFamilyMapId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_EVENT_FAMILY_MAP_ID:
        return isSetApplicationEventFamilyMapId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationEventFamilyMap_args)
        return this.equals((getApplicationEventFamilyMap_args)that);
      return false;
    }

    public boolean equals(getApplicationEventFamilyMap_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationEventFamilyMapId = true && this.isSetApplicationEventFamilyMapId();
      boolean that_present_applicationEventFamilyMapId = true && that.isSetApplicationEventFamilyMapId();
      if (this_present_applicationEventFamilyMapId || that_present_applicationEventFamilyMapId) {
        if (!(this_present_applicationEventFamilyMapId && that_present_applicationEventFamilyMapId))
          return false;
        if (!this.applicationEventFamilyMapId.equals(that.applicationEventFamilyMapId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationEventFamilyMapId = true && (isSetApplicationEventFamilyMapId());
      builder.append(present_applicationEventFamilyMapId);
      if (present_applicationEventFamilyMapId)
        builder.append(applicationEventFamilyMapId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationEventFamilyMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationEventFamilyMapId()).compareTo(other.isSetApplicationEventFamilyMapId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationEventFamilyMapId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationEventFamilyMapId, other.applicationEventFamilyMapId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationEventFamilyMap_args(");
      boolean first = true;

      sb.append("applicationEventFamilyMapId:");
      if (this.applicationEventFamilyMapId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationEventFamilyMapId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationEventFamilyMap_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMap_argsStandardScheme getScheme() {
        return new getApplicationEventFamilyMap_argsStandardScheme();
      }
    }

    private static class getApplicationEventFamilyMap_argsStandardScheme extends StandardScheme<getApplicationEventFamilyMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_EVENT_FAMILY_MAP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationEventFamilyMapId = iprot.readString();
                struct.setApplicationEventFamilyMapIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationEventFamilyMapId != null) {
          oprot.writeFieldBegin(APPLICATION_EVENT_FAMILY_MAP_ID_FIELD_DESC);
          oprot.writeString(struct.applicationEventFamilyMapId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationEventFamilyMap_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMap_argsTupleScheme getScheme() {
        return new getApplicationEventFamilyMap_argsTupleScheme();
      }
    }

    private static class getApplicationEventFamilyMap_argsTupleScheme extends TupleScheme<getApplicationEventFamilyMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationEventFamilyMapId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationEventFamilyMapId()) {
          oprot.writeString(struct.applicationEventFamilyMapId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationEventFamilyMapId = iprot.readString();
          struct.setApplicationEventFamilyMapIdIsSet(true);
        }
      }
    }

  }

  public static class getApplicationEventFamilyMap_result implements org.apache.thrift.TBase<getApplicationEventFamilyMap_result, getApplicationEventFamilyMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationEventFamilyMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationEventFamilyMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationEventFamilyMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationEventFamilyMap_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationEventFamilyMap_result.class, metaDataMap);
    }

    public getApplicationEventFamilyMap_result() {
    }

    public getApplicationEventFamilyMap_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationEventFamilyMap_result(getApplicationEventFamilyMap_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getApplicationEventFamilyMap_result deepCopy() {
      return new getApplicationEventFamilyMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getApplicationEventFamilyMap_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getApplicationEventFamilyMap_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationEventFamilyMap_result)
        return this.equals((getApplicationEventFamilyMap_result)that);
      return false;
    }

    public boolean equals(getApplicationEventFamilyMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationEventFamilyMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationEventFamilyMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationEventFamilyMap_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMap_resultStandardScheme getScheme() {
        return new getApplicationEventFamilyMap_resultStandardScheme();
      }
    }

    private static class getApplicationEventFamilyMap_resultStandardScheme extends StandardScheme<getApplicationEventFamilyMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationEventFamilyMap_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMap_resultTupleScheme getScheme() {
        return new getApplicationEventFamilyMap_resultTupleScheme();
      }
    }

    private static class getApplicationEventFamilyMap_resultTupleScheme extends TupleScheme<getApplicationEventFamilyMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getApplicationEventFamilyMapsByApplicationId_args implements org.apache.thrift.TBase<getApplicationEventFamilyMapsByApplicationId_args, getApplicationEventFamilyMapsByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationEventFamilyMapsByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationEventFamilyMapsByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationEventFamilyMapsByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationEventFamilyMapsByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationEventFamilyMapsByApplicationId_args.class, metaDataMap);
    }

    public getApplicationEventFamilyMapsByApplicationId_args() {
    }

    public getApplicationEventFamilyMapsByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationEventFamilyMapsByApplicationId_args(getApplicationEventFamilyMapsByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getApplicationEventFamilyMapsByApplicationId_args deepCopy() {
      return new getApplicationEventFamilyMapsByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getApplicationEventFamilyMapsByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationEventFamilyMapsByApplicationId_args)
        return this.equals((getApplicationEventFamilyMapsByApplicationId_args)that);
      return false;
    }

    public boolean equals(getApplicationEventFamilyMapsByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationEventFamilyMapsByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationEventFamilyMapsByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMapsByApplicationId_argsStandardScheme getScheme() {
        return new getApplicationEventFamilyMapsByApplicationId_argsStandardScheme();
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_argsStandardScheme extends StandardScheme<getApplicationEventFamilyMapsByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationEventFamilyMapsByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationEventFamilyMapsByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationEventFamilyMapsByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMapsByApplicationId_argsTupleScheme getScheme() {
        return new getApplicationEventFamilyMapsByApplicationId_argsTupleScheme();
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_argsTupleScheme extends TupleScheme<getApplicationEventFamilyMapsByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMapsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMapsByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getApplicationEventFamilyMapsByApplicationId_result implements org.apache.thrift.TBase<getApplicationEventFamilyMapsByApplicationId_result, getApplicationEventFamilyMapsByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationEventFamilyMapsByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationEventFamilyMapsByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationEventFamilyMapsByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationEventFamilyMapsByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationEventFamilyMapsByApplicationId_result.class, metaDataMap);
    }

    public getApplicationEventFamilyMapsByApplicationId_result() {
    }

    public getApplicationEventFamilyMapsByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationEventFamilyMapsByApplicationId_result(getApplicationEventFamilyMapsByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getApplicationEventFamilyMapsByApplicationId_result deepCopy() {
      return new getApplicationEventFamilyMapsByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getApplicationEventFamilyMapsByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getApplicationEventFamilyMapsByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationEventFamilyMapsByApplicationId_result)
        return this.equals((getApplicationEventFamilyMapsByApplicationId_result)that);
      return false;
    }

    public boolean equals(getApplicationEventFamilyMapsByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getApplicationEventFamilyMapsByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationEventFamilyMapsByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMapsByApplicationId_resultStandardScheme getScheme() {
        return new getApplicationEventFamilyMapsByApplicationId_resultStandardScheme();
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_resultStandardScheme extends StandardScheme<getApplicationEventFamilyMapsByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationEventFamilyMapsByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list224.size);
                  for (int _i225 = 0; _i225 < _list224.size; ++_i225)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem226;
                    _elem226 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem226.read(iprot);
                    struct.success.add(_elem226);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationEventFamilyMapsByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationEventFamilyMapsByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationEventFamilyMapsByApplicationId_resultTupleScheme getScheme() {
        return new getApplicationEventFamilyMapsByApplicationId_resultTupleScheme();
      }
    }

    private static class getApplicationEventFamilyMapsByApplicationId_resultTupleScheme extends TupleScheme<getApplicationEventFamilyMapsByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMapsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationEventFamilyMapsByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list229.size);
            for (int _i230 = 0; _i230 < _list229.size; ++_i230)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem231;
              _elem231 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem231.read(iprot);
              struct.success.add(_elem231);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVacantEventClassFamiliesByApplicationId_args implements org.apache.thrift.TBase<getVacantEventClassFamiliesByApplicationId_args, getVacantEventClassFamiliesByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantEventClassFamiliesByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantEventClassFamiliesByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantEventClassFamiliesByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantEventClassFamiliesByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantEventClassFamiliesByApplicationId_args.class, metaDataMap);
    }

    public getVacantEventClassFamiliesByApplicationId_args() {
    }

    public getVacantEventClassFamiliesByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantEventClassFamiliesByApplicationId_args(getVacantEventClassFamiliesByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getVacantEventClassFamiliesByApplicationId_args deepCopy() {
      return new getVacantEventClassFamiliesByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getVacantEventClassFamiliesByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantEventClassFamiliesByApplicationId_args)
        return this.equals((getVacantEventClassFamiliesByApplicationId_args)that);
      return false;
    }

    public boolean equals(getVacantEventClassFamiliesByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantEventClassFamiliesByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantEventClassFamiliesByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getVacantEventClassFamiliesByApplicationId_argsStandardScheme getScheme() {
        return new getVacantEventClassFamiliesByApplicationId_argsStandardScheme();
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_argsStandardScheme extends StandardScheme<getVacantEventClassFamiliesByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantEventClassFamiliesByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getVacantEventClassFamiliesByApplicationId_argsTupleScheme getScheme() {
        return new getVacantEventClassFamiliesByApplicationId_argsTupleScheme();
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_argsTupleScheme extends TupleScheme<getVacantEventClassFamiliesByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getVacantEventClassFamiliesByApplicationId_result implements org.apache.thrift.TBase<getVacantEventClassFamiliesByApplicationId_result, getVacantEventClassFamiliesByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVacantEventClassFamiliesByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVacantEventClassFamiliesByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVacantEventClassFamiliesByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVacantEventClassFamiliesByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVacantEventClassFamiliesByApplicationId_result.class, metaDataMap);
    }

    public getVacantEventClassFamiliesByApplicationId_result() {
    }

    public getVacantEventClassFamiliesByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVacantEventClassFamiliesByApplicationId_result(getVacantEventClassFamiliesByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getVacantEventClassFamiliesByApplicationId_result deepCopy() {
      return new getVacantEventClassFamiliesByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getVacantEventClassFamiliesByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getVacantEventClassFamiliesByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVacantEventClassFamiliesByApplicationId_result)
        return this.equals((getVacantEventClassFamiliesByApplicationId_result)that);
      return false;
    }

    public boolean equals(getVacantEventClassFamiliesByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getVacantEventClassFamiliesByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVacantEventClassFamiliesByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getVacantEventClassFamiliesByApplicationId_resultStandardScheme getScheme() {
        return new getVacantEventClassFamiliesByApplicationId_resultStandardScheme();
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_resultStandardScheme extends StandardScheme<getVacantEventClassFamiliesByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVacantEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list232.size);
                  for (int _i233 = 0; _i233 < _list232.size; ++_i233)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem234;
                    _elem234 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem234.read(iprot);
                    struct.success.add(_elem234);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVacantEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVacantEventClassFamiliesByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getVacantEventClassFamiliesByApplicationId_resultTupleScheme getScheme() {
        return new getVacantEventClassFamiliesByApplicationId_resultTupleScheme();
      }
    }

    private static class getVacantEventClassFamiliesByApplicationId_resultTupleScheme extends TupleScheme<getVacantEventClassFamiliesByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVacantEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVacantEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list237.size);
            for (int _i238 = 0; _i238 < _list237.size; ++_i238)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem239;
              _elem239 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem239.read(iprot);
              struct.success.add(_elem239);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamiliesByApplicationId_args implements org.apache.thrift.TBase<getEventClassFamiliesByApplicationId_args, getEventClassFamiliesByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamiliesByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamiliesByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamiliesByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamiliesByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamiliesByApplicationId_args.class, metaDataMap);
    }

    public getEventClassFamiliesByApplicationId_args() {
    }

    public getEventClassFamiliesByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamiliesByApplicationId_args(getEventClassFamiliesByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getEventClassFamiliesByApplicationId_args deepCopy() {
      return new getEventClassFamiliesByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getEventClassFamiliesByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamiliesByApplicationId_args)
        return this.equals((getEventClassFamiliesByApplicationId_args)that);
      return false;
    }

    public boolean equals(getEventClassFamiliesByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamiliesByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamiliesByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamiliesByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByApplicationId_argsStandardScheme getScheme() {
        return new getEventClassFamiliesByApplicationId_argsStandardScheme();
      }
    }

    private static class getEventClassFamiliesByApplicationId_argsStandardScheme extends StandardScheme<getEventClassFamiliesByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamiliesByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByApplicationId_argsTupleScheme getScheme() {
        return new getEventClassFamiliesByApplicationId_argsTupleScheme();
      }
    }

    private static class getEventClassFamiliesByApplicationId_argsTupleScheme extends TupleScheme<getEventClassFamiliesByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getEventClassFamiliesByApplicationId_result implements org.apache.thrift.TBase<getEventClassFamiliesByApplicationId_result, getEventClassFamiliesByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventClassFamiliesByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventClassFamiliesByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventClassFamiliesByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventClassFamiliesByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventClassFamiliesByApplicationId_result.class, metaDataMap);
    }

    public getEventClassFamiliesByApplicationId_result() {
    }

    public getEventClassFamiliesByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventClassFamiliesByApplicationId_result(getEventClassFamiliesByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEventClassFamiliesByApplicationId_result deepCopy() {
      return new getEventClassFamiliesByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getEventClassFamiliesByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEventClassFamiliesByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventClassFamiliesByApplicationId_result)
        return this.equals((getEventClassFamiliesByApplicationId_result)that);
      return false;
    }

    public boolean equals(getEventClassFamiliesByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEventClassFamiliesByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventClassFamiliesByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventClassFamiliesByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByApplicationId_resultStandardScheme getScheme() {
        return new getEventClassFamiliesByApplicationId_resultStandardScheme();
      }
    }

    private static class getEventClassFamiliesByApplicationId_resultStandardScheme extends StandardScheme<getEventClassFamiliesByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list240.size);
                  for (int _i241 = 0; _i241 < _list240.size; ++_i241)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem242;
                    _elem242 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem242.read(iprot);
                    struct.success.add(_elem242);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventClassFamiliesByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getEventClassFamiliesByApplicationId_resultTupleScheme getScheme() {
        return new getEventClassFamiliesByApplicationId_resultTupleScheme();
      }
    }

    private static class getEventClassFamiliesByApplicationId_resultTupleScheme extends TupleScheme<getEventClassFamiliesByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventClassFamiliesByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list245.size);
            for (int _i246 = 0; _i246 < _list245.size; ++_i246)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem247;
              _elem247 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem247.read(iprot);
              struct.success.add(_elem247);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEndpointUsers_args implements org.apache.thrift.TBase<getEndpointUsers_args, getEndpointUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointUsers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointUsers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointUsers_args.class, metaDataMap);
    }

    public getEndpointUsers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointUsers_args(getEndpointUsers_args other) {
    }

    public getEndpointUsers_args deepCopy() {
      return new getEndpointUsers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointUsers_args)
        return this.equals((getEndpointUsers_args)that);
      return false;
    }

    public boolean equals(getEndpointUsers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointUsers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointUsers_argsStandardSchemeFactory implements SchemeFactory {
      public getEndpointUsers_argsStandardScheme getScheme() {
        return new getEndpointUsers_argsStandardScheme();
      }
    }

    private static class getEndpointUsers_argsStandardScheme extends StandardScheme<getEndpointUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointUsers_argsTupleSchemeFactory implements SchemeFactory {
      public getEndpointUsers_argsTupleScheme getScheme() {
        return new getEndpointUsers_argsTupleScheme();
      }
    }

    private static class getEndpointUsers_argsTupleScheme extends TupleScheme<getEndpointUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEndpointUsers_result implements org.apache.thrift.TBase<getEndpointUsers_result, getEndpointUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointUsers_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointUsers_result.class, metaDataMap);
    }

    public getEndpointUsers_result() {
    }

    public getEndpointUsers_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointUsers_result(getEndpointUsers_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEndpointUsers_result deepCopy() {
      return new getEndpointUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getEndpointUsers_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEndpointUsers_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointUsers_result)
        return this.equals((getEndpointUsers_result)that);
      return false;
    }

    public boolean equals(getEndpointUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointUsers_resultStandardSchemeFactory implements SchemeFactory {
      public getEndpointUsers_resultStandardScheme getScheme() {
        return new getEndpointUsers_resultStandardScheme();
      }
    }

    private static class getEndpointUsers_resultStandardScheme extends StandardScheme<getEndpointUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list248.size);
                  for (int _i249 = 0; _i249 < _list248.size; ++_i249)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem250;
                    _elem250 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem250.read(iprot);
                    struct.success.add(_elem250);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointUsers_resultTupleSchemeFactory implements SchemeFactory {
      public getEndpointUsers_resultTupleScheme getScheme() {
        return new getEndpointUsers_resultTupleScheme();
      }
    }

    private static class getEndpointUsers_resultTupleScheme extends TupleScheme<getEndpointUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list253.size);
            for (int _i254 = 0; _i254 < _list253.size; ++_i254)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem255;
              _elem255 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem255.read(iprot);
              struct.success.add(_elem255);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEndpointUser_args implements org.apache.thrift.TBase<getEndpointUser_args, getEndpointUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointUser_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointUserId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointUser_argsTupleSchemeFactory());
    }

    public String endpointUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_USER_ID((short)1, "endpointUserId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_USER_ID
            return ENDPOINT_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointUser_args.class, metaDataMap);
    }

    public getEndpointUser_args() {
    }

    public getEndpointUser_args(
      String endpointUserId)
    {
      this();
      this.endpointUserId = endpointUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointUser_args(getEndpointUser_args other) {
      if (other.isSetEndpointUserId()) {
        this.endpointUserId = other.endpointUserId;
      }
    }

    public getEndpointUser_args deepCopy() {
      return new getEndpointUser_args(this);
    }

    @Override
    public void clear() {
      this.endpointUserId = null;
    }

    public String getEndpointUserId() {
      return this.endpointUserId;
    }

    public getEndpointUser_args setEndpointUserId(String endpointUserId) {
      this.endpointUserId = endpointUserId;
      return this;
    }

    public void unsetEndpointUserId() {
      this.endpointUserId = null;
    }

    /** Returns true if field endpointUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointUserId() {
      return this.endpointUserId != null;
    }

    public void setEndpointUserIdIsSet(boolean value) {
      if (!value) {
        this.endpointUserId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_USER_ID:
        if (value == null) {
          unsetEndpointUserId();
        } else {
          setEndpointUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_USER_ID:
        return getEndpointUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_USER_ID:
        return isSetEndpointUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointUser_args)
        return this.equals((getEndpointUser_args)that);
      return false;
    }

    public boolean equals(getEndpointUser_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointUserId = true && this.isSetEndpointUserId();
      boolean that_present_endpointUserId = true && that.isSetEndpointUserId();
      if (this_present_endpointUserId || that_present_endpointUserId) {
        if (!(this_present_endpointUserId && that_present_endpointUserId))
          return false;
        if (!this.endpointUserId.equals(that.endpointUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointUserId = true && (isSetEndpointUserId());
      builder.append(present_endpointUserId);
      if (present_endpointUserId)
        builder.append(endpointUserId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointUserId()).compareTo(other.isSetEndpointUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointUserId, other.endpointUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointUser_args(");
      boolean first = true;

      sb.append("endpointUserId:");
      if (this.endpointUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointUser_argsStandardSchemeFactory implements SchemeFactory {
      public getEndpointUser_argsStandardScheme getScheme() {
        return new getEndpointUser_argsStandardScheme();
      }
    }

    private static class getEndpointUser_argsStandardScheme extends StandardScheme<getEndpointUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointUserId = iprot.readString();
                struct.setEndpointUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointUserId != null) {
          oprot.writeFieldBegin(ENDPOINT_USER_ID_FIELD_DESC);
          oprot.writeString(struct.endpointUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointUser_argsTupleSchemeFactory implements SchemeFactory {
      public getEndpointUser_argsTupleScheme getScheme() {
        return new getEndpointUser_argsTupleScheme();
      }
    }

    private static class getEndpointUser_argsTupleScheme extends TupleScheme<getEndpointUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointUserId()) {
          oprot.writeString(struct.endpointUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointUserId = iprot.readString();
          struct.setEndpointUserIdIsSet(true);
        }
      }
    }

  }

  public static class getEndpointUser_result implements org.apache.thrift.TBase<getEndpointUser_result, getEndpointUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEndpointUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndpointUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndpointUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndpointUser_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndpointUser_result.class, metaDataMap);
    }

    public getEndpointUser_result() {
    }

    public getEndpointUser_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndpointUser_result(getEndpointUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getEndpointUser_result deepCopy() {
      return new getEndpointUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getEndpointUser_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getEndpointUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndpointUser_result)
        return this.equals((getEndpointUser_result)that);
      return false;
    }

    public boolean equals(getEndpointUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getEndpointUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndpointUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndpointUser_resultStandardSchemeFactory implements SchemeFactory {
      public getEndpointUser_resultStandardScheme getScheme() {
        return new getEndpointUser_resultStandardScheme();
      }
    }

    private static class getEndpointUser_resultStandardScheme extends StandardScheme<getEndpointUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndpointUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndpointUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndpointUser_resultTupleSchemeFactory implements SchemeFactory {
      public getEndpointUser_resultTupleScheme getScheme() {
        return new getEndpointUser_resultTupleScheme();
      }
    }

    private static class getEndpointUser_resultTupleScheme extends TupleScheme<getEndpointUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editEndpointUser_args implements org.apache.thrift.TBase<editEndpointUser_args, editEndpointUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<editEndpointUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEndpointUser_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEndpointUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEndpointUser_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_USER((short)1, "endpointUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_USER
            return ENDPOINT_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_USER, new org.apache.thrift.meta_data.FieldMetaData("endpointUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEndpointUser_args.class, metaDataMap);
    }

    public editEndpointUser_args() {
    }

    public editEndpointUser_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser)
    {
      this();
      this.endpointUser = endpointUser;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEndpointUser_args(editEndpointUser_args other) {
      if (other.isSetEndpointUser()) {
        this.endpointUser = other.endpointUser;
      }
    }

    public editEndpointUser_args deepCopy() {
      return new editEndpointUser_args(this);
    }

    @Override
    public void clear() {
      this.endpointUser = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getEndpointUser() {
      return this.endpointUser;
    }

    public editEndpointUser_args setEndpointUser(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct endpointUser) {
      this.endpointUser = endpointUser;
      return this;
    }

    public void unsetEndpointUser() {
      this.endpointUser = null;
    }

    /** Returns true if field endpointUser is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointUser() {
      return this.endpointUser != null;
    }

    public void setEndpointUserIsSet(boolean value) {
      if (!value) {
        this.endpointUser = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_USER:
        if (value == null) {
          unsetEndpointUser();
        } else {
          setEndpointUser((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_USER:
        return getEndpointUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_USER:
        return isSetEndpointUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEndpointUser_args)
        return this.equals((editEndpointUser_args)that);
      return false;
    }

    public boolean equals(editEndpointUser_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointUser = true && this.isSetEndpointUser();
      boolean that_present_endpointUser = true && that.isSetEndpointUser();
      if (this_present_endpointUser || that_present_endpointUser) {
        if (!(this_present_endpointUser && that_present_endpointUser))
          return false;
        if (!this.endpointUser.equals(that.endpointUser))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointUser = true && (isSetEndpointUser());
      builder.append(present_endpointUser);
      if (present_endpointUser)
        builder.append(endpointUser);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEndpointUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointUser()).compareTo(other.isSetEndpointUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointUser, other.endpointUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEndpointUser_args(");
      boolean first = true;

      sb.append("endpointUser:");
      if (this.endpointUser == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointUser);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEndpointUser_argsStandardSchemeFactory implements SchemeFactory {
      public editEndpointUser_argsStandardScheme getScheme() {
        return new editEndpointUser_argsStandardScheme();
      }
    }

    private static class editEndpointUser_argsStandardScheme extends StandardScheme<editEndpointUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEndpointUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.endpointUser = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.endpointUser.read(iprot);
                struct.setEndpointUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEndpointUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointUser != null) {
          oprot.writeFieldBegin(ENDPOINT_USER_FIELD_DESC);
          struct.endpointUser.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEndpointUser_argsTupleSchemeFactory implements SchemeFactory {
      public editEndpointUser_argsTupleScheme getScheme() {
        return new editEndpointUser_argsTupleScheme();
      }
    }

    private static class editEndpointUser_argsTupleScheme extends TupleScheme<editEndpointUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointUser()) {
          struct.endpointUser.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointUser = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.endpointUser.read(iprot);
          struct.setEndpointUserIsSet(true);
        }
      }
    }

  }

  public static class editEndpointUser_result implements org.apache.thrift.TBase<editEndpointUser_result, editEndpointUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<editEndpointUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEndpointUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEndpointUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEndpointUser_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEndpointUser_result.class, metaDataMap);
    }

    public editEndpointUser_result() {
    }

    public editEndpointUser_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEndpointUser_result(editEndpointUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editEndpointUser_result deepCopy() {
      return new editEndpointUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editEndpointUser_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editEndpointUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEndpointUser_result)
        return this.equals((editEndpointUser_result)that);
      return false;
    }

    public boolean equals(editEndpointUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editEndpointUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEndpointUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEndpointUser_resultStandardSchemeFactory implements SchemeFactory {
      public editEndpointUser_resultStandardScheme getScheme() {
        return new editEndpointUser_resultStandardScheme();
      }
    }

    private static class editEndpointUser_resultStandardScheme extends StandardScheme<editEndpointUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEndpointUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEndpointUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEndpointUser_resultTupleSchemeFactory implements SchemeFactory {
      public editEndpointUser_resultTupleScheme getScheme() {
        return new editEndpointUser_resultTupleScheme();
      }
    }

    private static class editEndpointUser_resultTupleScheme extends TupleScheme<editEndpointUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteEndpointUser_args implements org.apache.thrift.TBase<deleteEndpointUser_args, deleteEndpointUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEndpointUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEndpointUser_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointUserId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEndpointUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEndpointUser_argsTupleSchemeFactory());
    }

    public String endpointUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_USER_ID((short)1, "endpointUserId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_USER_ID
            return ENDPOINT_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("endpointUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEndpointUser_args.class, metaDataMap);
    }

    public deleteEndpointUser_args() {
    }

    public deleteEndpointUser_args(
      String endpointUserId)
    {
      this();
      this.endpointUserId = endpointUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEndpointUser_args(deleteEndpointUser_args other) {
      if (other.isSetEndpointUserId()) {
        this.endpointUserId = other.endpointUserId;
      }
    }

    public deleteEndpointUser_args deepCopy() {
      return new deleteEndpointUser_args(this);
    }

    @Override
    public void clear() {
      this.endpointUserId = null;
    }

    public String getEndpointUserId() {
      return this.endpointUserId;
    }

    public deleteEndpointUser_args setEndpointUserId(String endpointUserId) {
      this.endpointUserId = endpointUserId;
      return this;
    }

    public void unsetEndpointUserId() {
      this.endpointUserId = null;
    }

    /** Returns true if field endpointUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointUserId() {
      return this.endpointUserId != null;
    }

    public void setEndpointUserIdIsSet(boolean value) {
      if (!value) {
        this.endpointUserId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_USER_ID:
        if (value == null) {
          unsetEndpointUserId();
        } else {
          setEndpointUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_USER_ID:
        return getEndpointUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_USER_ID:
        return isSetEndpointUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEndpointUser_args)
        return this.equals((deleteEndpointUser_args)that);
      return false;
    }

    public boolean equals(deleteEndpointUser_args that) {
      if (that == null)
        return false;

      boolean this_present_endpointUserId = true && this.isSetEndpointUserId();
      boolean that_present_endpointUserId = true && that.isSetEndpointUserId();
      if (this_present_endpointUserId || that_present_endpointUserId) {
        if (!(this_present_endpointUserId && that_present_endpointUserId))
          return false;
        if (!this.endpointUserId.equals(that.endpointUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_endpointUserId = true && (isSetEndpointUserId());
      builder.append(present_endpointUserId);
      if (present_endpointUserId)
        builder.append(endpointUserId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteEndpointUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEndpointUserId()).compareTo(other.isSetEndpointUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointUserId, other.endpointUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEndpointUser_args(");
      boolean first = true;

      sb.append("endpointUserId:");
      if (this.endpointUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.endpointUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEndpointUser_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEndpointUser_argsStandardScheme getScheme() {
        return new deleteEndpointUser_argsStandardScheme();
      }
    }

    private static class deleteEndpointUser_argsStandardScheme extends StandardScheme<deleteEndpointUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEndpointUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endpointUserId = iprot.readString();
                struct.setEndpointUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEndpointUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpointUserId != null) {
          oprot.writeFieldBegin(ENDPOINT_USER_ID_FIELD_DESC);
          oprot.writeString(struct.endpointUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEndpointUser_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEndpointUser_argsTupleScheme getScheme() {
        return new deleteEndpointUser_argsTupleScheme();
      }
    }

    private static class deleteEndpointUser_argsTupleScheme extends TupleScheme<deleteEndpointUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEndpointUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpointUserId()) {
          oprot.writeString(struct.endpointUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEndpointUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpointUserId = iprot.readString();
          struct.setEndpointUserIdIsSet(true);
        }
      }
    }

  }

  public static class deleteEndpointUser_result implements org.apache.thrift.TBase<deleteEndpointUser_result, deleteEndpointUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEndpointUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEndpointUser_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEndpointUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEndpointUser_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEndpointUser_result.class, metaDataMap);
    }

    public deleteEndpointUser_result() {
    }

    public deleteEndpointUser_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEndpointUser_result(deleteEndpointUser_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteEndpointUser_result deepCopy() {
      return new deleteEndpointUser_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteEndpointUser_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEndpointUser_result)
        return this.equals((deleteEndpointUser_result)that);
      return false;
    }

    public boolean equals(deleteEndpointUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteEndpointUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEndpointUser_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEndpointUser_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEndpointUser_resultStandardScheme getScheme() {
        return new deleteEndpointUser_resultStandardScheme();
      }
    }

    private static class deleteEndpointUser_resultStandardScheme extends StandardScheme<deleteEndpointUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEndpointUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEndpointUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEndpointUser_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEndpointUser_resultTupleScheme getScheme() {
        return new deleteEndpointUser_resultTupleScheme();
      }
    }

    private static class deleteEndpointUser_resultTupleScheme extends TupleScheme<deleteEndpointUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEndpointUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class generateEndpointUserAccessToken_args implements org.apache.thrift.TBase<generateEndpointUserAccessToken_args, generateEndpointUserAccessToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateEndpointUserAccessToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateEndpointUserAccessToken_args");

    private static final org.apache.thrift.protocol.TField EXTERNAL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("externalUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateEndpointUserAccessToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateEndpointUserAccessToken_argsTupleSchemeFactory());
    }

    public String externalUid; // required
    public String tenantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTERNAL_UID((short)1, "externalUid"),
      TENANT_ID((short)2, "tenantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTERNAL_UID
            return EXTERNAL_UID;
          case 2: // TENANT_ID
            return TENANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTERNAL_UID, new org.apache.thrift.meta_data.FieldMetaData("externalUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateEndpointUserAccessToken_args.class, metaDataMap);
    }

    public generateEndpointUserAccessToken_args() {
    }

    public generateEndpointUserAccessToken_args(
      String externalUid,
      String tenantId)
    {
      this();
      this.externalUid = externalUid;
      this.tenantId = tenantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateEndpointUserAccessToken_args(generateEndpointUserAccessToken_args other) {
      if (other.isSetExternalUid()) {
        this.externalUid = other.externalUid;
      }
      if (other.isSetTenantId()) {
        this.tenantId = other.tenantId;
      }
    }

    public generateEndpointUserAccessToken_args deepCopy() {
      return new generateEndpointUserAccessToken_args(this);
    }

    @Override
    public void clear() {
      this.externalUid = null;
      this.tenantId = null;
    }

    public String getExternalUid() {
      return this.externalUid;
    }

    public generateEndpointUserAccessToken_args setExternalUid(String externalUid) {
      this.externalUid = externalUid;
      return this;
    }

    public void unsetExternalUid() {
      this.externalUid = null;
    }

    /** Returns true if field externalUid is set (has been assigned a value) and false otherwise */
    public boolean isSetExternalUid() {
      return this.externalUid != null;
    }

    public void setExternalUidIsSet(boolean value) {
      if (!value) {
        this.externalUid = null;
      }
    }

    public String getTenantId() {
      return this.tenantId;
    }

    public generateEndpointUserAccessToken_args setTenantId(String tenantId) {
      this.tenantId = tenantId;
      return this;
    }

    public void unsetTenantId() {
      this.tenantId = null;
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return this.tenantId != null;
    }

    public void setTenantIdIsSet(boolean value) {
      if (!value) {
        this.tenantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTERNAL_UID:
        if (value == null) {
          unsetExternalUid();
        } else {
          setExternalUid((String)value);
        }
        break;

      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTERNAL_UID:
        return getExternalUid();

      case TENANT_ID:
        return getTenantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTERNAL_UID:
        return isSetExternalUid();
      case TENANT_ID:
        return isSetTenantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateEndpointUserAccessToken_args)
        return this.equals((generateEndpointUserAccessToken_args)that);
      return false;
    }

    public boolean equals(generateEndpointUserAccessToken_args that) {
      if (that == null)
        return false;

      boolean this_present_externalUid = true && this.isSetExternalUid();
      boolean that_present_externalUid = true && that.isSetExternalUid();
      if (this_present_externalUid || that_present_externalUid) {
        if (!(this_present_externalUid && that_present_externalUid))
          return false;
        if (!this.externalUid.equals(that.externalUid))
          return false;
      }

      boolean this_present_tenantId = true && this.isSetTenantId();
      boolean that_present_tenantId = true && that.isSetTenantId();
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (!this.tenantId.equals(that.tenantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_externalUid = true && (isSetExternalUid());
      builder.append(present_externalUid);
      if (present_externalUid)
        builder.append(externalUid);

      boolean present_tenantId = true && (isSetTenantId());
      builder.append(present_tenantId);
      if (present_tenantId)
        builder.append(tenantId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateEndpointUserAccessToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExternalUid()).compareTo(other.isSetExternalUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExternalUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalUid, other.externalUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateEndpointUserAccessToken_args(");
      boolean first = true;

      sb.append("externalUid:");
      if (this.externalUid == null) {
        sb.append("null");
      } else {
        sb.append(this.externalUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateEndpointUserAccessToken_argsStandardSchemeFactory implements SchemeFactory {
      public generateEndpointUserAccessToken_argsStandardScheme getScheme() {
        return new generateEndpointUserAccessToken_argsStandardScheme();
      }
    }

    private static class generateEndpointUserAccessToken_argsStandardScheme extends StandardScheme<generateEndpointUserAccessToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateEndpointUserAccessToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTERNAL_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.externalUid = iprot.readString();
                struct.setExternalUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tenantId = iprot.readString();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateEndpointUserAccessToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.externalUid != null) {
          oprot.writeFieldBegin(EXTERNAL_UID_FIELD_DESC);
          oprot.writeString(struct.externalUid);
          oprot.writeFieldEnd();
        }
        if (struct.tenantId != null) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateEndpointUserAccessToken_argsTupleSchemeFactory implements SchemeFactory {
      public generateEndpointUserAccessToken_argsTupleScheme getScheme() {
        return new generateEndpointUserAccessToken_argsTupleScheme();
      }
    }

    private static class generateEndpointUserAccessToken_argsTupleScheme extends TupleScheme<generateEndpointUserAccessToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateEndpointUserAccessToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExternalUid()) {
          optionals.set(0);
        }
        if (struct.isSetTenantId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExternalUid()) {
          oprot.writeString(struct.externalUid);
        }
        if (struct.isSetTenantId()) {
          oprot.writeString(struct.tenantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateEndpointUserAccessToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.externalUid = iprot.readString();
          struct.setExternalUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tenantId = iprot.readString();
          struct.setTenantIdIsSet(true);
        }
      }
    }

  }

  public static class generateEndpointUserAccessToken_result implements org.apache.thrift.TBase<generateEndpointUserAccessToken_result, generateEndpointUserAccessToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateEndpointUserAccessToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateEndpointUserAccessToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateEndpointUserAccessToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateEndpointUserAccessToken_resultTupleSchemeFactory());
    }

    public String success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateEndpointUserAccessToken_result.class, metaDataMap);
    }

    public generateEndpointUserAccessToken_result() {
    }

    public generateEndpointUserAccessToken_result(
      String success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateEndpointUserAccessToken_result(generateEndpointUserAccessToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public generateEndpointUserAccessToken_result deepCopy() {
      return new generateEndpointUserAccessToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public generateEndpointUserAccessToken_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public generateEndpointUserAccessToken_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateEndpointUserAccessToken_result)
        return this.equals((generateEndpointUserAccessToken_result)that);
      return false;
    }

    public boolean equals(generateEndpointUserAccessToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateEndpointUserAccessToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateEndpointUserAccessToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateEndpointUserAccessToken_resultStandardSchemeFactory implements SchemeFactory {
      public generateEndpointUserAccessToken_resultStandardScheme getScheme() {
        return new generateEndpointUserAccessToken_resultStandardScheme();
      }
    }

    private static class generateEndpointUserAccessToken_resultStandardScheme extends StandardScheme<generateEndpointUserAccessToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateEndpointUserAccessToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateEndpointUserAccessToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateEndpointUserAccessToken_resultTupleSchemeFactory implements SchemeFactory {
      public generateEndpointUserAccessToken_resultTupleScheme getScheme() {
        return new generateEndpointUserAccessToken_resultTupleScheme();
      }
    }

    private static class generateEndpointUserAccessToken_resultTupleScheme extends TupleScheme<generateEndpointUserAccessToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateEndpointUserAccessToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateEndpointUserAccessToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogAppendersByApplicationId_args implements org.apache.thrift.TBase<getLogAppendersByApplicationId_args, getLogAppendersByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogAppendersByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogAppendersByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogAppendersByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogAppendersByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogAppendersByApplicationId_args.class, metaDataMap);
    }

    public getLogAppendersByApplicationId_args() {
    }

    public getLogAppendersByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogAppendersByApplicationId_args(getLogAppendersByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getLogAppendersByApplicationId_args deepCopy() {
      return new getLogAppendersByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getLogAppendersByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogAppendersByApplicationId_args)
        return this.equals((getLogAppendersByApplicationId_args)that);
      return false;
    }

    public boolean equals(getLogAppendersByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogAppendersByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogAppendersByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogAppendersByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getLogAppendersByApplicationId_argsStandardScheme getScheme() {
        return new getLogAppendersByApplicationId_argsStandardScheme();
      }
    }

    private static class getLogAppendersByApplicationId_argsStandardScheme extends StandardScheme<getLogAppendersByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogAppendersByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogAppendersByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogAppendersByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getLogAppendersByApplicationId_argsTupleScheme getScheme() {
        return new getLogAppendersByApplicationId_argsTupleScheme();
      }
    }

    private static class getLogAppendersByApplicationId_argsTupleScheme extends TupleScheme<getLogAppendersByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogAppendersByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogAppendersByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getLogAppendersByApplicationId_result implements org.apache.thrift.TBase<getLogAppendersByApplicationId_result, getLogAppendersByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogAppendersByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogAppendersByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogAppendersByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogAppendersByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogAppendersByApplicationId_result.class, metaDataMap);
    }

    public getLogAppendersByApplicationId_result() {
    }

    public getLogAppendersByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogAppendersByApplicationId_result(getLogAppendersByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogAppendersByApplicationId_result deepCopy() {
      return new getLogAppendersByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getLogAppendersByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogAppendersByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogAppendersByApplicationId_result)
        return this.equals((getLogAppendersByApplicationId_result)that);
      return false;
    }

    public boolean equals(getLogAppendersByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogAppendersByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogAppendersByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogAppendersByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getLogAppendersByApplicationId_resultStandardScheme getScheme() {
        return new getLogAppendersByApplicationId_resultStandardScheme();
      }
    }

    private static class getLogAppendersByApplicationId_resultStandardScheme extends StandardScheme<getLogAppendersByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogAppendersByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list256.size);
                  for (int _i257 = 0; _i257 < _list256.size; ++_i257)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem258;
                    _elem258 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem258.read(iprot);
                    struct.success.add(_elem258);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogAppendersByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogAppendersByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getLogAppendersByApplicationId_resultTupleScheme getScheme() {
        return new getLogAppendersByApplicationId_resultTupleScheme();
      }
    }

    private static class getLogAppendersByApplicationId_resultTupleScheme extends TupleScheme<getLogAppendersByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogAppendersByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogAppendersByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list261.size);
            for (int _i262 = 0; _i262 < _list261.size; ++_i262)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem263;
              _elem263 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem263.read(iprot);
              struct.success.add(_elem263);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getLogAppender_args implements org.apache.thrift.TBase<getLogAppender_args, getLogAppender_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLogAppender_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogAppender_args");

    private static final org.apache.thrift.protocol.TField LOG_APPENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logAppenderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogAppender_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogAppender_argsTupleSchemeFactory());
    }

    public String logAppenderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_APPENDER_ID((short)1, "logAppenderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_APPENDER_ID
            return LOG_APPENDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_APPENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("logAppenderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogAppender_args.class, metaDataMap);
    }

    public getLogAppender_args() {
    }

    public getLogAppender_args(
      String logAppenderId)
    {
      this();
      this.logAppenderId = logAppenderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogAppender_args(getLogAppender_args other) {
      if (other.isSetLogAppenderId()) {
        this.logAppenderId = other.logAppenderId;
      }
    }

    public getLogAppender_args deepCopy() {
      return new getLogAppender_args(this);
    }

    @Override
    public void clear() {
      this.logAppenderId = null;
    }

    public String getLogAppenderId() {
      return this.logAppenderId;
    }

    public getLogAppender_args setLogAppenderId(String logAppenderId) {
      this.logAppenderId = logAppenderId;
      return this;
    }

    public void unsetLogAppenderId() {
      this.logAppenderId = null;
    }

    /** Returns true if field logAppenderId is set (has been assigned a value) and false otherwise */
    public boolean isSetLogAppenderId() {
      return this.logAppenderId != null;
    }

    public void setLogAppenderIdIsSet(boolean value) {
      if (!value) {
        this.logAppenderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_APPENDER_ID:
        if (value == null) {
          unsetLogAppenderId();
        } else {
          setLogAppenderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_APPENDER_ID:
        return getLogAppenderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_APPENDER_ID:
        return isSetLogAppenderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogAppender_args)
        return this.equals((getLogAppender_args)that);
      return false;
    }

    public boolean equals(getLogAppender_args that) {
      if (that == null)
        return false;

      boolean this_present_logAppenderId = true && this.isSetLogAppenderId();
      boolean that_present_logAppenderId = true && that.isSetLogAppenderId();
      if (this_present_logAppenderId || that_present_logAppenderId) {
        if (!(this_present_logAppenderId && that_present_logAppenderId))
          return false;
        if (!this.logAppenderId.equals(that.logAppenderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_logAppenderId = true && (isSetLogAppenderId());
      builder.append(present_logAppenderId);
      if (present_logAppenderId)
        builder.append(logAppenderId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogAppender_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogAppenderId()).compareTo(other.isSetLogAppenderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogAppenderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logAppenderId, other.logAppenderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogAppender_args(");
      boolean first = true;

      sb.append("logAppenderId:");
      if (this.logAppenderId == null) {
        sb.append("null");
      } else {
        sb.append(this.logAppenderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogAppender_argsStandardSchemeFactory implements SchemeFactory {
      public getLogAppender_argsStandardScheme getScheme() {
        return new getLogAppender_argsStandardScheme();
      }
    }

    private static class getLogAppender_argsStandardScheme extends StandardScheme<getLogAppender_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogAppender_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_APPENDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logAppenderId = iprot.readString();
                struct.setLogAppenderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogAppender_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logAppenderId != null) {
          oprot.writeFieldBegin(LOG_APPENDER_ID_FIELD_DESC);
          oprot.writeString(struct.logAppenderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogAppender_argsTupleSchemeFactory implements SchemeFactory {
      public getLogAppender_argsTupleScheme getScheme() {
        return new getLogAppender_argsTupleScheme();
      }
    }

    private static class getLogAppender_argsTupleScheme extends TupleScheme<getLogAppender_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogAppenderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogAppenderId()) {
          oprot.writeString(struct.logAppenderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logAppenderId = iprot.readString();
          struct.setLogAppenderIdIsSet(true);
        }
      }
    }

  }

  public static class getLogAppender_result implements org.apache.thrift.TBase<getLogAppender_result, getLogAppender_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLogAppender_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogAppender_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogAppender_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogAppender_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogAppender_result.class, metaDataMap);
    }

    public getLogAppender_result() {
    }

    public getLogAppender_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogAppender_result(getLogAppender_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getLogAppender_result deepCopy() {
      return new getLogAppender_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getLogAppender_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getLogAppender_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogAppender_result)
        return this.equals((getLogAppender_result)that);
      return false;
    }

    public boolean equals(getLogAppender_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getLogAppender_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogAppender_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogAppender_resultStandardSchemeFactory implements SchemeFactory {
      public getLogAppender_resultStandardScheme getScheme() {
        return new getLogAppender_resultStandardScheme();
      }
    }

    private static class getLogAppender_resultStandardScheme extends StandardScheme<getLogAppender_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogAppender_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogAppender_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogAppender_resultTupleSchemeFactory implements SchemeFactory {
      public getLogAppender_resultTupleScheme getScheme() {
        return new getLogAppender_resultTupleScheme();
      }
    }

    private static class getLogAppender_resultTupleScheme extends TupleScheme<getLogAppender_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editLogAppender_args implements org.apache.thrift.TBase<editLogAppender_args, editLogAppender_args._Fields>, java.io.Serializable, Cloneable, Comparable<editLogAppender_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editLogAppender_args");

    private static final org.apache.thrift.protocol.TField LOG_APPENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("logAppender", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editLogAppender_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editLogAppender_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_APPENDER((short)1, "logAppender");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_APPENDER
            return LOG_APPENDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_APPENDER, new org.apache.thrift.meta_data.FieldMetaData("logAppender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editLogAppender_args.class, metaDataMap);
    }

    public editLogAppender_args() {
    }

    public editLogAppender_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender)
    {
      this();
      this.logAppender = logAppender;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editLogAppender_args(editLogAppender_args other) {
      if (other.isSetLogAppender()) {
        this.logAppender = other.logAppender;
      }
    }

    public editLogAppender_args deepCopy() {
      return new editLogAppender_args(this);
    }

    @Override
    public void clear() {
      this.logAppender = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getLogAppender() {
      return this.logAppender;
    }

    public editLogAppender_args setLogAppender(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct logAppender) {
      this.logAppender = logAppender;
      return this;
    }

    public void unsetLogAppender() {
      this.logAppender = null;
    }

    /** Returns true if field logAppender is set (has been assigned a value) and false otherwise */
    public boolean isSetLogAppender() {
      return this.logAppender != null;
    }

    public void setLogAppenderIsSet(boolean value) {
      if (!value) {
        this.logAppender = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_APPENDER:
        if (value == null) {
          unsetLogAppender();
        } else {
          setLogAppender((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_APPENDER:
        return getLogAppender();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_APPENDER:
        return isSetLogAppender();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editLogAppender_args)
        return this.equals((editLogAppender_args)that);
      return false;
    }

    public boolean equals(editLogAppender_args that) {
      if (that == null)
        return false;

      boolean this_present_logAppender = true && this.isSetLogAppender();
      boolean that_present_logAppender = true && that.isSetLogAppender();
      if (this_present_logAppender || that_present_logAppender) {
        if (!(this_present_logAppender && that_present_logAppender))
          return false;
        if (!this.logAppender.equals(that.logAppender))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_logAppender = true && (isSetLogAppender());
      builder.append(present_logAppender);
      if (present_logAppender)
        builder.append(logAppender);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editLogAppender_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogAppender()).compareTo(other.isSetLogAppender());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogAppender()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logAppender, other.logAppender);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editLogAppender_args(");
      boolean first = true;

      sb.append("logAppender:");
      if (this.logAppender == null) {
        sb.append("null");
      } else {
        sb.append(this.logAppender);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editLogAppender_argsStandardSchemeFactory implements SchemeFactory {
      public editLogAppender_argsStandardScheme getScheme() {
        return new editLogAppender_argsStandardScheme();
      }
    }

    private static class editLogAppender_argsStandardScheme extends StandardScheme<editLogAppender_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editLogAppender_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_APPENDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.logAppender = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.logAppender.read(iprot);
                struct.setLogAppenderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editLogAppender_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logAppender != null) {
          oprot.writeFieldBegin(LOG_APPENDER_FIELD_DESC);
          struct.logAppender.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editLogAppender_argsTupleSchemeFactory implements SchemeFactory {
      public editLogAppender_argsTupleScheme getScheme() {
        return new editLogAppender_argsTupleScheme();
      }
    }

    private static class editLogAppender_argsTupleScheme extends TupleScheme<editLogAppender_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogAppender()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogAppender()) {
          struct.logAppender.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logAppender = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.logAppender.read(iprot);
          struct.setLogAppenderIsSet(true);
        }
      }
    }

  }

  public static class editLogAppender_result implements org.apache.thrift.TBase<editLogAppender_result, editLogAppender_result._Fields>, java.io.Serializable, Cloneable, Comparable<editLogAppender_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editLogAppender_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editLogAppender_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editLogAppender_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editLogAppender_result.class, metaDataMap);
    }

    public editLogAppender_result() {
    }

    public editLogAppender_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editLogAppender_result(editLogAppender_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editLogAppender_result deepCopy() {
      return new editLogAppender_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editLogAppender_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editLogAppender_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editLogAppender_result)
        return this.equals((editLogAppender_result)that);
      return false;
    }

    public boolean equals(editLogAppender_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editLogAppender_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editLogAppender_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editLogAppender_resultStandardSchemeFactory implements SchemeFactory {
      public editLogAppender_resultStandardScheme getScheme() {
        return new editLogAppender_resultStandardScheme();
      }
    }

    private static class editLogAppender_resultStandardScheme extends StandardScheme<editLogAppender_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editLogAppender_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editLogAppender_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editLogAppender_resultTupleSchemeFactory implements SchemeFactory {
      public editLogAppender_resultTupleScheme getScheme() {
        return new editLogAppender_resultTupleScheme();
      }
    }

    private static class editLogAppender_resultTupleScheme extends TupleScheme<editLogAppender_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteLogAppender_args implements org.apache.thrift.TBase<deleteLogAppender_args, deleteLogAppender_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLogAppender_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLogAppender_args");

    private static final org.apache.thrift.protocol.TField LOG_APPENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logAppenderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLogAppender_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLogAppender_argsTupleSchemeFactory());
    }

    public String logAppenderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_APPENDER_ID((short)1, "logAppenderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_APPENDER_ID
            return LOG_APPENDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_APPENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("logAppenderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLogAppender_args.class, metaDataMap);
    }

    public deleteLogAppender_args() {
    }

    public deleteLogAppender_args(
      String logAppenderId)
    {
      this();
      this.logAppenderId = logAppenderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLogAppender_args(deleteLogAppender_args other) {
      if (other.isSetLogAppenderId()) {
        this.logAppenderId = other.logAppenderId;
      }
    }

    public deleteLogAppender_args deepCopy() {
      return new deleteLogAppender_args(this);
    }

    @Override
    public void clear() {
      this.logAppenderId = null;
    }

    public String getLogAppenderId() {
      return this.logAppenderId;
    }

    public deleteLogAppender_args setLogAppenderId(String logAppenderId) {
      this.logAppenderId = logAppenderId;
      return this;
    }

    public void unsetLogAppenderId() {
      this.logAppenderId = null;
    }

    /** Returns true if field logAppenderId is set (has been assigned a value) and false otherwise */
    public boolean isSetLogAppenderId() {
      return this.logAppenderId != null;
    }

    public void setLogAppenderIdIsSet(boolean value) {
      if (!value) {
        this.logAppenderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_APPENDER_ID:
        if (value == null) {
          unsetLogAppenderId();
        } else {
          setLogAppenderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_APPENDER_ID:
        return getLogAppenderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_APPENDER_ID:
        return isSetLogAppenderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLogAppender_args)
        return this.equals((deleteLogAppender_args)that);
      return false;
    }

    public boolean equals(deleteLogAppender_args that) {
      if (that == null)
        return false;

      boolean this_present_logAppenderId = true && this.isSetLogAppenderId();
      boolean that_present_logAppenderId = true && that.isSetLogAppenderId();
      if (this_present_logAppenderId || that_present_logAppenderId) {
        if (!(this_present_logAppenderId && that_present_logAppenderId))
          return false;
        if (!this.logAppenderId.equals(that.logAppenderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_logAppenderId = true && (isSetLogAppenderId());
      builder.append(present_logAppenderId);
      if (present_logAppenderId)
        builder.append(logAppenderId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteLogAppender_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogAppenderId()).compareTo(other.isSetLogAppenderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogAppenderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logAppenderId, other.logAppenderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLogAppender_args(");
      boolean first = true;

      sb.append("logAppenderId:");
      if (this.logAppenderId == null) {
        sb.append("null");
      } else {
        sb.append(this.logAppenderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLogAppender_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLogAppender_argsStandardScheme getScheme() {
        return new deleteLogAppender_argsStandardScheme();
      }
    }

    private static class deleteLogAppender_argsStandardScheme extends StandardScheme<deleteLogAppender_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLogAppender_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_APPENDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logAppenderId = iprot.readString();
                struct.setLogAppenderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLogAppender_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logAppenderId != null) {
          oprot.writeFieldBegin(LOG_APPENDER_ID_FIELD_DESC);
          oprot.writeString(struct.logAppenderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLogAppender_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLogAppender_argsTupleScheme getScheme() {
        return new deleteLogAppender_argsTupleScheme();
      }
    }

    private static class deleteLogAppender_argsTupleScheme extends TupleScheme<deleteLogAppender_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogAppenderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogAppenderId()) {
          oprot.writeString(struct.logAppenderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLogAppender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logAppenderId = iprot.readString();
          struct.setLogAppenderIdIsSet(true);
        }
      }
    }

  }

  public static class deleteLogAppender_result implements org.apache.thrift.TBase<deleteLogAppender_result, deleteLogAppender_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLogAppender_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLogAppender_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLogAppender_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLogAppender_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLogAppender_result.class, metaDataMap);
    }

    public deleteLogAppender_result() {
    }

    public deleteLogAppender_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLogAppender_result(deleteLogAppender_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteLogAppender_result deepCopy() {
      return new deleteLogAppender_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteLogAppender_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLogAppender_result)
        return this.equals((deleteLogAppender_result)that);
      return false;
    }

    public boolean equals(deleteLogAppender_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteLogAppender_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLogAppender_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLogAppender_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLogAppender_resultStandardScheme getScheme() {
        return new deleteLogAppender_resultStandardScheme();
      }
    }

    private static class deleteLogAppender_resultStandardScheme extends StandardScheme<deleteLogAppender_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLogAppender_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLogAppender_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLogAppender_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLogAppender_resultTupleScheme getScheme() {
        return new deleteLogAppender_resultTupleScheme();
      }
    }

    private static class deleteLogAppender_resultTupleScheme extends TupleScheme<deleteLogAppender_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLogAppender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class generateRecordStructureLibrary_args implements org.apache.thrift.TBase<generateRecordStructureLibrary_args, generateRecordStructureLibrary_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateRecordStructureLibrary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateRecordStructureLibrary_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOG_SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("logSchemaVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateRecordStructureLibrary_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateRecordStructureLibrary_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public int logSchemaVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      LOG_SCHEMA_VERSION((short)2, "logSchemaVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // LOG_SCHEMA_VERSION
            return LOG_SCHEMA_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGSCHEMAVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.LOG_SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("logSchemaVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "Integer")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateRecordStructureLibrary_args.class, metaDataMap);
    }

    public generateRecordStructureLibrary_args() {
    }

    public generateRecordStructureLibrary_args(
      String applicationId,
      int logSchemaVersion)
    {
      this();
      this.applicationId = applicationId;
      this.logSchemaVersion = logSchemaVersion;
      setLogSchemaVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateRecordStructureLibrary_args(generateRecordStructureLibrary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      this.logSchemaVersion = other.logSchemaVersion;
    }

    public generateRecordStructureLibrary_args deepCopy() {
      return new generateRecordStructureLibrary_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      setLogSchemaVersionIsSet(false);
      this.logSchemaVersion = 0;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public generateRecordStructureLibrary_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public int getLogSchemaVersion() {
      return this.logSchemaVersion;
    }

    public generateRecordStructureLibrary_args setLogSchemaVersion(int logSchemaVersion) {
      this.logSchemaVersion = logSchemaVersion;
      setLogSchemaVersionIsSet(true);
      return this;
    }

    public void unsetLogSchemaVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID);
    }

    /** Returns true if field logSchemaVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetLogSchemaVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID);
    }

    public void setLogSchemaVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case LOG_SCHEMA_VERSION:
        if (value == null) {
          unsetLogSchemaVersion();
        } else {
          setLogSchemaVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case LOG_SCHEMA_VERSION:
        return Integer.valueOf(getLogSchemaVersion());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case LOG_SCHEMA_VERSION:
        return isSetLogSchemaVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateRecordStructureLibrary_args)
        return this.equals((generateRecordStructureLibrary_args)that);
      return false;
    }

    public boolean equals(generateRecordStructureLibrary_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_logSchemaVersion = true;
      boolean that_present_logSchemaVersion = true;
      if (this_present_logSchemaVersion || that_present_logSchemaVersion) {
        if (!(this_present_logSchemaVersion && that_present_logSchemaVersion))
          return false;
        if (this.logSchemaVersion != that.logSchemaVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      boolean present_logSchemaVersion = true;
      builder.append(present_logSchemaVersion);
      if (present_logSchemaVersion)
        builder.append(logSchemaVersion);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateRecordStructureLibrary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogSchemaVersion()).compareTo(other.isSetLogSchemaVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogSchemaVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logSchemaVersion, other.logSchemaVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateRecordStructureLibrary_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logSchemaVersion:");
      sb.append(this.logSchemaVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateRecordStructureLibrary_argsStandardSchemeFactory implements SchemeFactory {
      public generateRecordStructureLibrary_argsStandardScheme getScheme() {
        return new generateRecordStructureLibrary_argsStandardScheme();
      }
    }

    private static class generateRecordStructureLibrary_argsStandardScheme extends StandardScheme<generateRecordStructureLibrary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateRecordStructureLibrary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOG_SCHEMA_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.logSchemaVersion = iprot.readI32();
                struct.setLogSchemaVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateRecordStructureLibrary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOG_SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.logSchemaVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateRecordStructureLibrary_argsTupleSchemeFactory implements SchemeFactory {
      public generateRecordStructureLibrary_argsTupleScheme getScheme() {
        return new generateRecordStructureLibrary_argsTupleScheme();
      }
    }

    private static class generateRecordStructureLibrary_argsTupleScheme extends TupleScheme<generateRecordStructureLibrary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateRecordStructureLibrary_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetLogSchemaVersion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetLogSchemaVersion()) {
          oprot.writeI32(struct.logSchemaVersion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateRecordStructureLibrary_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.logSchemaVersion = iprot.readI32();
          struct.setLogSchemaVersionIsSet(true);
        }
      }
    }

  }

  public static class generateRecordStructureLibrary_result implements org.apache.thrift.TBase<generateRecordStructureLibrary_result, generateRecordStructureLibrary_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateRecordStructureLibrary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateRecordStructureLibrary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateRecordStructureLibrary_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateRecordStructureLibrary_resultTupleSchemeFactory());
    }

    public FileData success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileData.class)));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateRecordStructureLibrary_result.class, metaDataMap);
    }

    public generateRecordStructureLibrary_result() {
    }

    public generateRecordStructureLibrary_result(
      FileData success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateRecordStructureLibrary_result(generateRecordStructureLibrary_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileData(other.success);
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public generateRecordStructureLibrary_result deepCopy() {
      return new generateRecordStructureLibrary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public FileData getSuccess() {
      return this.success;
    }

    public generateRecordStructureLibrary_result setSuccess(FileData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public generateRecordStructureLibrary_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileData)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateRecordStructureLibrary_result)
        return this.equals((generateRecordStructureLibrary_result)that);
      return false;
    }

    public boolean equals(generateRecordStructureLibrary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateRecordStructureLibrary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateRecordStructureLibrary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateRecordStructureLibrary_resultStandardSchemeFactory implements SchemeFactory {
      public generateRecordStructureLibrary_resultStandardScheme getScheme() {
        return new generateRecordStructureLibrary_resultStandardScheme();
      }
    }

    private static class generateRecordStructureLibrary_resultStandardScheme extends StandardScheme<generateRecordStructureLibrary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateRecordStructureLibrary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateRecordStructureLibrary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateRecordStructureLibrary_resultTupleSchemeFactory implements SchemeFactory {
      public generateRecordStructureLibrary_resultTupleScheme getScheme() {
        return new generateRecordStructureLibrary_resultTupleScheme();
      }
    }

    private static class generateRecordStructureLibrary_resultTupleScheme extends TupleScheme<generateRecordStructureLibrary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateRecordStructureLibrary_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateRecordStructureLibrary_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FileData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getRecordStructureSchema_args implements org.apache.thrift.TBase<getRecordStructureSchema_args, getRecordStructureSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordStructureSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordStructureSchema_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOG_SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("logSchemaVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordStructureSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordStructureSchema_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public int logSchemaVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      LOG_SCHEMA_VERSION((short)2, "logSchemaVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // LOG_SCHEMA_VERSION
            return LOG_SCHEMA_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGSCHEMAVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.LOG_SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("logSchemaVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "Integer")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordStructureSchema_args.class, metaDataMap);
    }

    public getRecordStructureSchema_args() {
    }

    public getRecordStructureSchema_args(
      String applicationId,
      int logSchemaVersion)
    {
      this();
      this.applicationId = applicationId;
      this.logSchemaVersion = logSchemaVersion;
      setLogSchemaVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordStructureSchema_args(getRecordStructureSchema_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      this.logSchemaVersion = other.logSchemaVersion;
    }

    public getRecordStructureSchema_args deepCopy() {
      return new getRecordStructureSchema_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      setLogSchemaVersionIsSet(false);
      this.logSchemaVersion = 0;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getRecordStructureSchema_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public int getLogSchemaVersion() {
      return this.logSchemaVersion;
    }

    public getRecordStructureSchema_args setLogSchemaVersion(int logSchemaVersion) {
      this.logSchemaVersion = logSchemaVersion;
      setLogSchemaVersionIsSet(true);
      return this;
    }

    public void unsetLogSchemaVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID);
    }

    /** Returns true if field logSchemaVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetLogSchemaVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID);
    }

    public void setLogSchemaVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGSCHEMAVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case LOG_SCHEMA_VERSION:
        if (value == null) {
          unsetLogSchemaVersion();
        } else {
          setLogSchemaVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case LOG_SCHEMA_VERSION:
        return Integer.valueOf(getLogSchemaVersion());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case LOG_SCHEMA_VERSION:
        return isSetLogSchemaVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordStructureSchema_args)
        return this.equals((getRecordStructureSchema_args)that);
      return false;
    }

    public boolean equals(getRecordStructureSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_logSchemaVersion = true;
      boolean that_present_logSchemaVersion = true;
      if (this_present_logSchemaVersion || that_present_logSchemaVersion) {
        if (!(this_present_logSchemaVersion && that_present_logSchemaVersion))
          return false;
        if (this.logSchemaVersion != that.logSchemaVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      boolean present_logSchemaVersion = true;
      builder.append(present_logSchemaVersion);
      if (present_logSchemaVersion)
        builder.append(logSchemaVersion);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getRecordStructureSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogSchemaVersion()).compareTo(other.isSetLogSchemaVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogSchemaVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logSchemaVersion, other.logSchemaVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordStructureSchema_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logSchemaVersion:");
      sb.append(this.logSchemaVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordStructureSchema_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordStructureSchema_argsStandardScheme getScheme() {
        return new getRecordStructureSchema_argsStandardScheme();
      }
    }

    private static class getRecordStructureSchema_argsStandardScheme extends StandardScheme<getRecordStructureSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordStructureSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOG_SCHEMA_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.logSchemaVersion = iprot.readI32();
                struct.setLogSchemaVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordStructureSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOG_SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.logSchemaVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordStructureSchema_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordStructureSchema_argsTupleScheme getScheme() {
        return new getRecordStructureSchema_argsTupleScheme();
      }
    }

    private static class getRecordStructureSchema_argsTupleScheme extends TupleScheme<getRecordStructureSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordStructureSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetLogSchemaVersion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetLogSchemaVersion()) {
          oprot.writeI32(struct.logSchemaVersion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordStructureSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.logSchemaVersion = iprot.readI32();
          struct.setLogSchemaVersionIsSet(true);
        }
      }
    }

  }

  public static class getRecordStructureSchema_result implements org.apache.thrift.TBase<getRecordStructureSchema_result, getRecordStructureSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordStructureSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordStructureSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordStructureSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordStructureSchema_resultTupleSchemeFactory());
    }

    public FileData success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileData.class)));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordStructureSchema_result.class, metaDataMap);
    }

    public getRecordStructureSchema_result() {
    }

    public getRecordStructureSchema_result(
      FileData success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordStructureSchema_result(getRecordStructureSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileData(other.success);
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getRecordStructureSchema_result deepCopy() {
      return new getRecordStructureSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public FileData getSuccess() {
      return this.success;
    }

    public getRecordStructureSchema_result setSuccess(FileData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getRecordStructureSchema_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileData)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordStructureSchema_result)
        return this.equals((getRecordStructureSchema_result)that);
      return false;
    }

    public boolean equals(getRecordStructureSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getRecordStructureSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordStructureSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordStructureSchema_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordStructureSchema_resultStandardScheme getScheme() {
        return new getRecordStructureSchema_resultStandardScheme();
      }
    }

    private static class getRecordStructureSchema_resultStandardScheme extends StandardScheme<getRecordStructureSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordStructureSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordStructureSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordStructureSchema_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordStructureSchema_resultTupleScheme getScheme() {
        return new getRecordStructureSchema_resultTupleScheme();
      }
    }

    private static class getRecordStructureSchema_resultTupleScheme extends TupleScheme<getRecordStructureSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordStructureSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordStructureSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FileData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getRecordStructureData_args implements org.apache.thrift.TBase<getRecordStructureData_args, getRecordStructureData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordStructureData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordStructureData_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RECORD_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordFile", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordStructureData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordStructureData_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public int schemaVersion; // required
    /**
     * 
     * @see RecordFile
     */
    public RecordFile recordFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SCHEMA_VERSION((short)2, "schemaVersion"),
      /**
       * 
       * @see RecordFile
       */
      RECORD_FILE((short)3, "recordFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SCHEMA_VERSION
            return SCHEMA_VERSION;
          case 3: // RECORD_FILE
            return RECORD_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCHEMAVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      tmpMap.put(_Fields.SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("schemaVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "Integer")));
      tmpMap.put(_Fields.RECORD_FILE, new org.apache.thrift.meta_data.FieldMetaData("recordFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecordFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordStructureData_args.class, metaDataMap);
    }

    public getRecordStructureData_args() {
    }

    public getRecordStructureData_args(
      String applicationId,
      int schemaVersion,
      RecordFile recordFile)
    {
      this();
      this.applicationId = applicationId;
      this.schemaVersion = schemaVersion;
      setSchemaVersionIsSet(true);
      this.recordFile = recordFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordStructureData_args(getRecordStructureData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      this.schemaVersion = other.schemaVersion;
      if (other.isSetRecordFile()) {
        this.recordFile = other.recordFile;
      }
    }

    public getRecordStructureData_args deepCopy() {
      return new getRecordStructureData_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      setSchemaVersionIsSet(false);
      this.schemaVersion = 0;
      this.recordFile = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getRecordStructureData_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public int getSchemaVersion() {
      return this.schemaVersion;
    }

    public getRecordStructureData_args setSchemaVersion(int schemaVersion) {
      this.schemaVersion = schemaVersion;
      setSchemaVersionIsSet(true);
      return this;
    }

    public void unsetSchemaVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMAVERSION_ISSET_ID);
    }

    /** Returns true if field schemaVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __SCHEMAVERSION_ISSET_ID);
    }

    public void setSchemaVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMAVERSION_ISSET_ID, value);
    }

    /**
     * 
     * @see RecordFile
     */
    public RecordFile getRecordFile() {
      return this.recordFile;
    }

    /**
     * 
     * @see RecordFile
     */
    public getRecordStructureData_args setRecordFile(RecordFile recordFile) {
      this.recordFile = recordFile;
      return this;
    }

    public void unsetRecordFile() {
      this.recordFile = null;
    }

    /** Returns true if field recordFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordFile() {
      return this.recordFile != null;
    }

    public void setRecordFileIsSet(boolean value) {
      if (!value) {
        this.recordFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SCHEMA_VERSION:
        if (value == null) {
          unsetSchemaVersion();
        } else {
          setSchemaVersion((Integer)value);
        }
        break;

      case RECORD_FILE:
        if (value == null) {
          unsetRecordFile();
        } else {
          setRecordFile((RecordFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SCHEMA_VERSION:
        return Integer.valueOf(getSchemaVersion());

      case RECORD_FILE:
        return getRecordFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SCHEMA_VERSION:
        return isSetSchemaVersion();
      case RECORD_FILE:
        return isSetRecordFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordStructureData_args)
        return this.equals((getRecordStructureData_args)that);
      return false;
    }

    public boolean equals(getRecordStructureData_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_schemaVersion = true;
      boolean that_present_schemaVersion = true;
      if (this_present_schemaVersion || that_present_schemaVersion) {
        if (!(this_present_schemaVersion && that_present_schemaVersion))
          return false;
        if (this.schemaVersion != that.schemaVersion)
          return false;
      }

      boolean this_present_recordFile = true && this.isSetRecordFile();
      boolean that_present_recordFile = true && that.isSetRecordFile();
      if (this_present_recordFile || that_present_recordFile) {
        if (!(this_present_recordFile && that_present_recordFile))
          return false;
        if (!this.recordFile.equals(that.recordFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      boolean present_schemaVersion = true;
      builder.append(present_schemaVersion);
      if (present_schemaVersion)
        builder.append(schemaVersion);

      boolean present_recordFile = true && (isSetRecordFile());
      builder.append(present_recordFile);
      if (present_recordFile)
        builder.append(recordFile.getValue());

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getRecordStructureData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchemaVersion()).compareTo(other.isSetSchemaVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaVersion, other.schemaVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecordFile()).compareTo(other.isSetRecordFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordFile, other.recordFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordStructureData_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schemaVersion:");
      sb.append(this.schemaVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recordFile:");
      if (this.recordFile == null) {
        sb.append("null");
      } else {
        sb.append(this.recordFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordStructureData_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordStructureData_argsStandardScheme getScheme() {
        return new getRecordStructureData_argsStandardScheme();
      }
    }

    private static class getRecordStructureData_argsStandardScheme extends StandardScheme<getRecordStructureData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordStructureData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHEMA_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.schemaVersion = iprot.readI32();
                struct.setSchemaVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECORD_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.recordFile = RecordFile.findByValue(iprot.readI32());
                struct.setRecordFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordStructureData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.schemaVersion);
        oprot.writeFieldEnd();
        if (struct.recordFile != null) {
          oprot.writeFieldBegin(RECORD_FILE_FIELD_DESC);
          oprot.writeI32(struct.recordFile.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordStructureData_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordStructureData_argsTupleScheme getScheme() {
        return new getRecordStructureData_argsTupleScheme();
      }
    }

    private static class getRecordStructureData_argsTupleScheme extends TupleScheme<getRecordStructureData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordStructureData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetSchemaVersion()) {
          optionals.set(1);
        }
        if (struct.isSetRecordFile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetSchemaVersion()) {
          oprot.writeI32(struct.schemaVersion);
        }
        if (struct.isSetRecordFile()) {
          oprot.writeI32(struct.recordFile.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordStructureData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schemaVersion = iprot.readI32();
          struct.setSchemaVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recordFile = RecordFile.findByValue(iprot.readI32());
          struct.setRecordFileIsSet(true);
        }
      }
    }

  }

  public static class getRecordStructureData_result implements org.apache.thrift.TBase<getRecordStructureData_result, getRecordStructureData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordStructureData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordStructureData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordStructureData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordStructureData_resultTupleSchemeFactory());
    }

    public FileData success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileData.class)));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordStructureData_result.class, metaDataMap);
    }

    public getRecordStructureData_result() {
    }

    public getRecordStructureData_result(
      FileData success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordStructureData_result(getRecordStructureData_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileData(other.success);
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getRecordStructureData_result deepCopy() {
      return new getRecordStructureData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public FileData getSuccess() {
      return this.success;
    }

    public getRecordStructureData_result setSuccess(FileData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getRecordStructureData_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileData)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordStructureData_result)
        return this.equals((getRecordStructureData_result)that);
      return false;
    }

    public boolean equals(getRecordStructureData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getRecordStructureData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordStructureData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordStructureData_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordStructureData_resultStandardScheme getScheme() {
        return new getRecordStructureData_resultStandardScheme();
      }
    }

    private static class getRecordStructureData_resultStandardScheme extends StandardScheme<getRecordStructureData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordStructureData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordStructureData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordStructureData_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordStructureData_resultTupleScheme getScheme() {
        return new getRecordStructureData_resultTupleScheme();
      }
    }

    private static class getRecordStructureData_resultTupleScheme extends TupleScheme<getRecordStructureData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordStructureData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordStructureData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FileData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUserVerifiersByApplicationId_args implements org.apache.thrift.TBase<getUserVerifiersByApplicationId_args, getUserVerifiersByApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserVerifiersByApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserVerifiersByApplicationId_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserVerifiersByApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserVerifiersByApplicationId_argsTupleSchemeFactory());
    }

    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserVerifiersByApplicationId_args.class, metaDataMap);
    }

    public getUserVerifiersByApplicationId_args() {
    }

    public getUserVerifiersByApplicationId_args(
      String applicationId)
    {
      this();
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserVerifiersByApplicationId_args(getUserVerifiersByApplicationId_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public getUserVerifiersByApplicationId_args deepCopy() {
      return new getUserVerifiersByApplicationId_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getUserVerifiersByApplicationId_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserVerifiersByApplicationId_args)
        return this.equals((getUserVerifiersByApplicationId_args)that);
      return false;
    }

    public boolean equals(getUserVerifiersByApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_applicationId = true && (isSetApplicationId());
      builder.append(present_applicationId);
      if (present_applicationId)
        builder.append(applicationId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserVerifiersByApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserVerifiersByApplicationId_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserVerifiersByApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public getUserVerifiersByApplicationId_argsStandardScheme getScheme() {
        return new getUserVerifiersByApplicationId_argsStandardScheme();
      }
    }

    private static class getUserVerifiersByApplicationId_argsStandardScheme extends StandardScheme<getUserVerifiersByApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserVerifiersByApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserVerifiersByApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserVerifiersByApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public getUserVerifiersByApplicationId_argsTupleScheme getScheme() {
        return new getUserVerifiersByApplicationId_argsTupleScheme();
      }
    }

    private static class getUserVerifiersByApplicationId_argsTupleScheme extends TupleScheme<getUserVerifiersByApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserVerifiersByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserVerifiersByApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
      }
    }

  }

  public static class getUserVerifiersByApplicationId_result implements org.apache.thrift.TBase<getUserVerifiersByApplicationId_result, getUserVerifiersByApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserVerifiersByApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserVerifiersByApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserVerifiersByApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserVerifiersByApplicationId_resultTupleSchemeFactory());
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "data"))));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserVerifiersByApplicationId_result.class, metaDataMap);
    }

    public getUserVerifiersByApplicationId_result() {
    }

    public getUserVerifiersByApplicationId_result(
      List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserVerifiersByApplicationId_result(getUserVerifiersByApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> __this__success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(other.success.size());
        for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUserVerifiersByApplicationId_result deepCopy() {
      return new getUserVerifiersByApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>();
      }
      this.success.add(elem);
    }

    public List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> getSuccess() {
      return this.success;
    }

    public getUserVerifiersByApplicationId_result setSuccess(List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUserVerifiersByApplicationId_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserVerifiersByApplicationId_result)
        return this.equals((getUserVerifiersByApplicationId_result)that);
      return false;
    }

    public boolean equals(getUserVerifiersByApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserVerifiersByApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserVerifiersByApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserVerifiersByApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public getUserVerifiersByApplicationId_resultStandardScheme getScheme() {
        return new getUserVerifiersByApplicationId_resultStandardScheme();
      }
    }

    private static class getUserVerifiersByApplicationId_resultStandardScheme extends StandardScheme<getUserVerifiersByApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserVerifiersByApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list264.size);
                  for (int _i265 = 0; _i265 < _list264.size; ++_i265)
                  {
                    org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem266;
                    _elem266 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                    _elem266.read(iprot);
                    struct.success.add(_elem266);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserVerifiersByApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter267 : struct.success)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserVerifiersByApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public getUserVerifiersByApplicationId_resultTupleScheme getScheme() {
        return new getUserVerifiersByApplicationId_resultTupleScheme();
      }
    }

    private static class getUserVerifiersByApplicationId_resultTupleScheme extends TupleScheme<getUserVerifiersByApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserVerifiersByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _iter268 : struct.success)
            {
              _iter268.write(oprot);
            }
          }
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserVerifiersByApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list269.size);
            for (int _i270 = 0; _i270 < _list269.size; ++_i270)
            {
              org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem271;
              _elem271 = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
              _elem271.read(iprot);
              struct.success.add(_elem271);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUserVerifier_args implements org.apache.thrift.TBase<getUserVerifier_args, getUserVerifier_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserVerifier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserVerifier_args");

    private static final org.apache.thrift.protocol.TField USER_VERIFIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userVerifierId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserVerifier_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserVerifier_argsTupleSchemeFactory());
    }

    public String userVerifierId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_VERIFIER_ID((short)1, "userVerifierId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_VERIFIER_ID
            return USER_VERIFIER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_VERIFIER_ID, new org.apache.thrift.meta_data.FieldMetaData("userVerifierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserVerifier_args.class, metaDataMap);
    }

    public getUserVerifier_args() {
    }

    public getUserVerifier_args(
      String userVerifierId)
    {
      this();
      this.userVerifierId = userVerifierId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserVerifier_args(getUserVerifier_args other) {
      if (other.isSetUserVerifierId()) {
        this.userVerifierId = other.userVerifierId;
      }
    }

    public getUserVerifier_args deepCopy() {
      return new getUserVerifier_args(this);
    }

    @Override
    public void clear() {
      this.userVerifierId = null;
    }

    public String getUserVerifierId() {
      return this.userVerifierId;
    }

    public getUserVerifier_args setUserVerifierId(String userVerifierId) {
      this.userVerifierId = userVerifierId;
      return this;
    }

    public void unsetUserVerifierId() {
      this.userVerifierId = null;
    }

    /** Returns true if field userVerifierId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserVerifierId() {
      return this.userVerifierId != null;
    }

    public void setUserVerifierIdIsSet(boolean value) {
      if (!value) {
        this.userVerifierId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_VERIFIER_ID:
        if (value == null) {
          unsetUserVerifierId();
        } else {
          setUserVerifierId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_VERIFIER_ID:
        return getUserVerifierId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_VERIFIER_ID:
        return isSetUserVerifierId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserVerifier_args)
        return this.equals((getUserVerifier_args)that);
      return false;
    }

    public boolean equals(getUserVerifier_args that) {
      if (that == null)
        return false;

      boolean this_present_userVerifierId = true && this.isSetUserVerifierId();
      boolean that_present_userVerifierId = true && that.isSetUserVerifierId();
      if (this_present_userVerifierId || that_present_userVerifierId) {
        if (!(this_present_userVerifierId && that_present_userVerifierId))
          return false;
        if (!this.userVerifierId.equals(that.userVerifierId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userVerifierId = true && (isSetUserVerifierId());
      builder.append(present_userVerifierId);
      if (present_userVerifierId)
        builder.append(userVerifierId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserVerifier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserVerifierId()).compareTo(other.isSetUserVerifierId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserVerifierId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userVerifierId, other.userVerifierId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserVerifier_args(");
      boolean first = true;

      sb.append("userVerifierId:");
      if (this.userVerifierId == null) {
        sb.append("null");
      } else {
        sb.append(this.userVerifierId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserVerifier_argsStandardSchemeFactory implements SchemeFactory {
      public getUserVerifier_argsStandardScheme getScheme() {
        return new getUserVerifier_argsStandardScheme();
      }
    }

    private static class getUserVerifier_argsStandardScheme extends StandardScheme<getUserVerifier_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserVerifier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_VERIFIER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userVerifierId = iprot.readString();
                struct.setUserVerifierIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserVerifier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userVerifierId != null) {
          oprot.writeFieldBegin(USER_VERIFIER_ID_FIELD_DESC);
          oprot.writeString(struct.userVerifierId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserVerifier_argsTupleSchemeFactory implements SchemeFactory {
      public getUserVerifier_argsTupleScheme getScheme() {
        return new getUserVerifier_argsTupleScheme();
      }
    }

    private static class getUserVerifier_argsTupleScheme extends TupleScheme<getUserVerifier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserVerifierId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserVerifierId()) {
          oprot.writeString(struct.userVerifierId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userVerifierId = iprot.readString();
          struct.setUserVerifierIdIsSet(true);
        }
      }
    }

  }

  public static class getUserVerifier_result implements org.apache.thrift.TBase<getUserVerifier_result, getUserVerifier_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserVerifier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserVerifier_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserVerifier_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserVerifier_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserVerifier_result.class, metaDataMap);
    }

    public getUserVerifier_result() {
    }

    public getUserVerifier_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserVerifier_result(getUserVerifier_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public getUserVerifier_result deepCopy() {
      return new getUserVerifier_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public getUserVerifier_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public getUserVerifier_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserVerifier_result)
        return this.equals((getUserVerifier_result)that);
      return false;
    }

    public boolean equals(getUserVerifier_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getUserVerifier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserVerifier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserVerifier_resultStandardSchemeFactory implements SchemeFactory {
      public getUserVerifier_resultStandardScheme getScheme() {
        return new getUserVerifier_resultStandardScheme();
      }
    }

    private static class getUserVerifier_resultStandardScheme extends StandardScheme<getUserVerifier_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserVerifier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserVerifier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserVerifier_resultTupleSchemeFactory implements SchemeFactory {
      public getUserVerifier_resultTupleScheme getScheme() {
        return new getUserVerifier_resultTupleScheme();
      }
    }

    private static class getUserVerifier_resultTupleScheme extends TupleScheme<getUserVerifier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class editUserVerifier_args implements org.apache.thrift.TBase<editUserVerifier_args, editUserVerifier_args._Fields>, java.io.Serializable, Cloneable, Comparable<editUserVerifier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUserVerifier_args");

    private static final org.apache.thrift.protocol.TField USER_VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("userVerifier", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUserVerifier_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUserVerifier_argsTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_VERIFIER((short)1, "userVerifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_VERIFIER
            return USER_VERIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("userVerifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUserVerifier_args.class, metaDataMap);
    }

    public editUserVerifier_args() {
    }

    public editUserVerifier_args(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier)
    {
      this();
      this.userVerifier = userVerifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUserVerifier_args(editUserVerifier_args other) {
      if (other.isSetUserVerifier()) {
        this.userVerifier = other.userVerifier;
      }
    }

    public editUserVerifier_args deepCopy() {
      return new editUserVerifier_args(this);
    }

    @Override
    public void clear() {
      this.userVerifier = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getUserVerifier() {
      return this.userVerifier;
    }

    public editUserVerifier_args setUserVerifier(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct userVerifier) {
      this.userVerifier = userVerifier;
      return this;
    }

    public void unsetUserVerifier() {
      this.userVerifier = null;
    }

    /** Returns true if field userVerifier is set (has been assigned a value) and false otherwise */
    public boolean isSetUserVerifier() {
      return this.userVerifier != null;
    }

    public void setUserVerifierIsSet(boolean value) {
      if (!value) {
        this.userVerifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_VERIFIER:
        if (value == null) {
          unsetUserVerifier();
        } else {
          setUserVerifier((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_VERIFIER:
        return getUserVerifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_VERIFIER:
        return isSetUserVerifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUserVerifier_args)
        return this.equals((editUserVerifier_args)that);
      return false;
    }

    public boolean equals(editUserVerifier_args that) {
      if (that == null)
        return false;

      boolean this_present_userVerifier = true && this.isSetUserVerifier();
      boolean that_present_userVerifier = true && that.isSetUserVerifier();
      if (this_present_userVerifier || that_present_userVerifier) {
        if (!(this_present_userVerifier && that_present_userVerifier))
          return false;
        if (!this.userVerifier.equals(that.userVerifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userVerifier = true && (isSetUserVerifier());
      builder.append(present_userVerifier);
      if (present_userVerifier)
        builder.append(userVerifier);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUserVerifier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserVerifier()).compareTo(other.isSetUserVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userVerifier, other.userVerifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUserVerifier_args(");
      boolean first = true;

      sb.append("userVerifier:");
      if (this.userVerifier == null) {
        sb.append("null");
      } else {
        sb.append(this.userVerifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUserVerifier_argsStandardSchemeFactory implements SchemeFactory {
      public editUserVerifier_argsStandardScheme getScheme() {
        return new editUserVerifier_argsStandardScheme();
      }
    }

    private static class editUserVerifier_argsStandardScheme extends StandardScheme<editUserVerifier_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUserVerifier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userVerifier = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.userVerifier.read(iprot);
                struct.setUserVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUserVerifier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userVerifier != null) {
          oprot.writeFieldBegin(USER_VERIFIER_FIELD_DESC);
          struct.userVerifier.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUserVerifier_argsTupleSchemeFactory implements SchemeFactory {
      public editUserVerifier_argsTupleScheme getScheme() {
        return new editUserVerifier_argsTupleScheme();
      }
    }

    private static class editUserVerifier_argsTupleScheme extends TupleScheme<editUserVerifier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserVerifier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserVerifier()) {
          struct.userVerifier.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userVerifier = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.userVerifier.read(iprot);
          struct.setUserVerifierIsSet(true);
        }
      }
    }

  }

  public static class editUserVerifier_result implements org.apache.thrift.TBase<editUserVerifier_result, editUserVerifier_result._Fields>, java.io.Serializable, Cloneable, Comparable<editUserVerifier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editUserVerifier_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editUserVerifier_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editUserVerifier_resultTupleSchemeFactory());
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success; // required
    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "data")));
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editUserVerifier_result.class, metaDataMap);
    }

    public editUserVerifier_result() {
    }

    public editUserVerifier_result(
      org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success,
      ControlThriftException ControlException)
    {
      this();
      this.success = success;
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editUserVerifier_result(editUserVerifier_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public editUserVerifier_result deepCopy() {
      return new editUserVerifier_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ControlException = null;
    }

    public org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct getSuccess() {
      return this.success;
    }

    public editUserVerifier_result setSuccess(org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public editUserVerifier_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct)value);
        }
        break;

      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editUserVerifier_result)
        return this.equals((editUserVerifier_result)that);
      return false;
    }

    public boolean equals(editUserVerifier_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(editUserVerifier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editUserVerifier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editUserVerifier_resultStandardSchemeFactory implements SchemeFactory {
      public editUserVerifier_resultStandardScheme getScheme() {
        return new editUserVerifier_resultStandardScheme();
      }
    }

    private static class editUserVerifier_resultStandardScheme extends StandardScheme<editUserVerifier_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editUserVerifier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editUserVerifier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editUserVerifier_resultTupleSchemeFactory implements SchemeFactory {
      public editUserVerifier_resultTupleScheme getScheme() {
        return new editUserVerifier_resultTupleScheme();
      }
    }

    private static class editUserVerifier_resultTupleScheme extends TupleScheme<editUserVerifier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetControlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteUserVerifier_args implements org.apache.thrift.TBase<deleteUserVerifier_args, deleteUserVerifier_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserVerifier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserVerifier_args");

    private static final org.apache.thrift.protocol.TField USER_VERIFIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userVerifierId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserVerifier_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserVerifier_argsTupleSchemeFactory());
    }

    public String userVerifierId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_VERIFIER_ID((short)1, "userVerifierId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_VERIFIER_ID
            return USER_VERIFIER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_VERIFIER_ID, new org.apache.thrift.meta_data.FieldMetaData("userVerifierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserVerifier_args.class, metaDataMap);
    }

    public deleteUserVerifier_args() {
    }

    public deleteUserVerifier_args(
      String userVerifierId)
    {
      this();
      this.userVerifierId = userVerifierId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserVerifier_args(deleteUserVerifier_args other) {
      if (other.isSetUserVerifierId()) {
        this.userVerifierId = other.userVerifierId;
      }
    }

    public deleteUserVerifier_args deepCopy() {
      return new deleteUserVerifier_args(this);
    }

    @Override
    public void clear() {
      this.userVerifierId = null;
    }

    public String getUserVerifierId() {
      return this.userVerifierId;
    }

    public deleteUserVerifier_args setUserVerifierId(String userVerifierId) {
      this.userVerifierId = userVerifierId;
      return this;
    }

    public void unsetUserVerifierId() {
      this.userVerifierId = null;
    }

    /** Returns true if field userVerifierId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserVerifierId() {
      return this.userVerifierId != null;
    }

    public void setUserVerifierIdIsSet(boolean value) {
      if (!value) {
        this.userVerifierId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_VERIFIER_ID:
        if (value == null) {
          unsetUserVerifierId();
        } else {
          setUserVerifierId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_VERIFIER_ID:
        return getUserVerifierId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_VERIFIER_ID:
        return isSetUserVerifierId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserVerifier_args)
        return this.equals((deleteUserVerifier_args)that);
      return false;
    }

    public boolean equals(deleteUserVerifier_args that) {
      if (that == null)
        return false;

      boolean this_present_userVerifierId = true && this.isSetUserVerifierId();
      boolean that_present_userVerifierId = true && that.isSetUserVerifierId();
      if (this_present_userVerifierId || that_present_userVerifierId) {
        if (!(this_present_userVerifierId && that_present_userVerifierId))
          return false;
        if (!this.userVerifierId.equals(that.userVerifierId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userVerifierId = true && (isSetUserVerifierId());
      builder.append(present_userVerifierId);
      if (present_userVerifierId)
        builder.append(userVerifierId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUserVerifier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserVerifierId()).compareTo(other.isSetUserVerifierId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserVerifierId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userVerifierId, other.userVerifierId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserVerifier_args(");
      boolean first = true;

      sb.append("userVerifierId:");
      if (this.userVerifierId == null) {
        sb.append("null");
      } else {
        sb.append(this.userVerifierId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserVerifier_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserVerifier_argsStandardScheme getScheme() {
        return new deleteUserVerifier_argsStandardScheme();
      }
    }

    private static class deleteUserVerifier_argsStandardScheme extends StandardScheme<deleteUserVerifier_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserVerifier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_VERIFIER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userVerifierId = iprot.readString();
                struct.setUserVerifierIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserVerifier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userVerifierId != null) {
          oprot.writeFieldBegin(USER_VERIFIER_ID_FIELD_DESC);
          oprot.writeString(struct.userVerifierId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserVerifier_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserVerifier_argsTupleScheme getScheme() {
        return new deleteUserVerifier_argsTupleScheme();
      }
    }

    private static class deleteUserVerifier_argsTupleScheme extends TupleScheme<deleteUserVerifier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserVerifierId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserVerifierId()) {
          oprot.writeString(struct.userVerifierId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserVerifier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userVerifierId = iprot.readString();
          struct.setUserVerifierIdIsSet(true);
        }
      }
    }

  }

  public static class deleteUserVerifier_result implements org.apache.thrift.TBase<deleteUserVerifier_result, deleteUserVerifier_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserVerifier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserVerifier_result");

    private static final org.apache.thrift.protocol.TField CONTROL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ControlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserVerifier_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserVerifier_resultTupleSchemeFactory());
    }

    public ControlThriftException ControlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTROL_EXCEPTION((short)1, "ControlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROL_EXCEPTION
            return CONTROL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ControlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserVerifier_result.class, metaDataMap);
    }

    public deleteUserVerifier_result() {
    }

    public deleteUserVerifier_result(
      ControlThriftException ControlException)
    {
      this();
      this.ControlException = ControlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserVerifier_result(deleteUserVerifier_result other) {
      if (other.isSetControlException()) {
        this.ControlException = new ControlThriftException(other.ControlException);
      }
    }

    public deleteUserVerifier_result deepCopy() {
      return new deleteUserVerifier_result(this);
    }

    @Override
    public void clear() {
      this.ControlException = null;
    }

    public ControlThriftException getControlException() {
      return this.ControlException;
    }

    public deleteUserVerifier_result setControlException(ControlThriftException ControlException) {
      this.ControlException = ControlException;
      return this;
    }

    public void unsetControlException() {
      this.ControlException = null;
    }

    /** Returns true if field ControlException is set (has been assigned a value) and false otherwise */
    public boolean isSetControlException() {
      return this.ControlException != null;
    }

    public void setControlExceptionIsSet(boolean value) {
      if (!value) {
        this.ControlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROL_EXCEPTION:
        if (value == null) {
          unsetControlException();
        } else {
          setControlException((ControlThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROL_EXCEPTION:
        return getControlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROL_EXCEPTION:
        return isSetControlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserVerifier_result)
        return this.equals((deleteUserVerifier_result)that);
      return false;
    }

    public boolean equals(deleteUserVerifier_result that) {
      if (that == null)
        return false;

      boolean this_present_ControlException = true && this.isSetControlException();
      boolean that_present_ControlException = true && that.isSetControlException();
      if (this_present_ControlException || that_present_ControlException) {
        if (!(this_present_ControlException && that_present_ControlException))
          return false;
        if (!this.ControlException.equals(that.ControlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ControlException = true && (isSetControlException());
      builder.append(present_ControlException);
      if (present_ControlException)
        builder.append(ControlException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUserVerifier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetControlException()).compareTo(other.isSetControlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ControlException, other.ControlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserVerifier_result(");
      boolean first = true;

      sb.append("ControlException:");
      if (this.ControlException == null) {
        sb.append("null");
      } else {
        sb.append(this.ControlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserVerifier_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserVerifier_resultStandardScheme getScheme() {
        return new deleteUserVerifier_resultStandardScheme();
      }
    }

    private static class deleteUserVerifier_resultStandardScheme extends StandardScheme<deleteUserVerifier_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserVerifier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ControlException = new ControlThriftException();
                struct.ControlException.read(iprot);
                struct.setControlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserVerifier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ControlException != null) {
          oprot.writeFieldBegin(CONTROL_EXCEPTION_FIELD_DESC);
          struct.ControlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserVerifier_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserVerifier_resultTupleScheme getScheme() {
        return new deleteUserVerifier_resultTupleScheme();
      }
    }

    private static class deleteUserVerifier_resultTupleScheme extends TupleScheme<deleteUserVerifier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControlException()) {
          struct.ControlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserVerifier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ControlException = new ControlThriftException();
          struct.ControlException.read(iprot);
          struct.setControlExceptionIsSet(true);
        }
      }
    }

  }

}
