diff --git a/server/common/admin-rest-client/src/main/java/org/kaaproject/kaa/server/common/admin/AdminClient.java b/server/common/admin-rest-client/src/main/java/org/kaaproject/kaa/server/common/admin/AdminClient.java
index 850cc01..9dd6f4f 100644
--- a/server/common/admin-rest-client/src/main/java/org/kaaproject/kaa/server/common/admin/AdminClient.java
+++ b/server/common/admin-rest-client/src/main/java/org/kaaproject/kaa/server/common/admin/AdminClient.java
@@ -101,15 +101,18 @@ public class AdminClient {
 
     private static final Logger logger = LoggerFactory.getLogger(AdminClient.class);
 
-    private RestTemplate restTemplate;
-
-    private String url;
+    private KaaRestTemplate restTemplate;
 
     public AdminClient(String host, int port) {
-        restTemplate = new RestTemplate();
+        restTemplate = new KaaRestTemplate(host, port);
         ClientHttpRequestFactory requestFactory = new HttpComponentsRequestFactoryBasicAuth(new HttpHost(host, port, "http"));
         restTemplate.setRequestFactory(requestFactory);
-        url = "http://" + host + ":" + port + "/kaaAdmin/rest/api/";
+    }
+
+    public AdminClient(String[] hosts, int[] ports) {
+        restTemplate = new KaaRestTemplate(hosts, ports);
+        ClientHttpRequestFactory requestFactory = new HttpComponentsRequestFactoryBasicAuth(new HttpHost(hosts[0], ports[0], "http"));
+        restTemplate.setRequestFactory(requestFactory);
     }
 
     public EndpointProfilesPageDto getEndpointProfileByEndpointGroupId(PageLinkDto pageLink) throws Exception {
@@ -118,7 +121,7 @@ public class AdminClient {
         String offset = pageLink.getOffset();
         ParameterizedTypeReference<EndpointProfilesPageDto> typeRef = new ParameterizedTypeReference<EndpointProfilesPageDto>() {
         };
-        ResponseEntity<EndpointProfilesPageDto> entity = restTemplate.exchange(url + "endpointProfileByGroupId?endpointGroupId=" + endpointGroupId
+        ResponseEntity<EndpointProfilesPageDto> entity = restTemplate.exchange(restTemplate.getUrl() + "endpointProfileByGroupId?endpointGroupId=" + endpointGroupId
                         + "&limit=" + limit + "&offset=" + offset,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
@@ -130,7 +133,7 @@ public class AdminClient {
         String offset = pageLink.getOffset();
         ParameterizedTypeReference<EndpointProfilesBodyDto> typeRef = new ParameterizedTypeReference<EndpointProfilesBodyDto>() {
         };
-        ResponseEntity<EndpointProfilesBodyDto> entity = restTemplate.exchange(url + "endpointProfileBodyByGroupId?endpointGroupId=" + endpointGroupId 
+        ResponseEntity<EndpointProfilesBodyDto> entity = restTemplate.exchange(restTemplate.getUrl() + "endpointProfileBodyByGroupId?endpointGroupId=" + endpointGroupId
                 + "&limit=" + limit + "&offset=" + offset,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
@@ -139,7 +142,7 @@ public class AdminClient {
     public EndpointProfileDto getEndpointProfileByKeyHash(String endpointProfileKeyHash) throws Exception {
         ParameterizedTypeReference<EndpointProfileDto> typeRef = new ParameterizedTypeReference<EndpointProfileDto>() {
         };
-        ResponseEntity<EndpointProfileDto> entity = restTemplate.exchange(url + "endpointProfile/" + toUrlSafe(endpointProfileKeyHash),
+        ResponseEntity<EndpointProfileDto> entity = restTemplate.exchange(restTemplate.getUrl() + "endpointProfile/" + toUrlSafe(endpointProfileKeyHash),
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -151,7 +154,7 @@ public class AdminClient {
     public EndpointProfileBodyDto getEndpointProfileBodyByKeyHash(String endpointProfileKeyHash) throws Exception {
         ParameterizedTypeReference<EndpointProfileBodyDto> typeRef = new ParameterizedTypeReference<EndpointProfileBodyDto>() {
         };
-        ResponseEntity<EndpointProfileBodyDto> entity = restTemplate.exchange(url + "endpointProfileBody/" + toUrlSafe(endpointProfileKeyHash),
+        ResponseEntity<EndpointProfileBodyDto> entity = restTemplate.exchange(restTemplate.getUrl() + "endpointProfileBody/" + toUrlSafe(endpointProfileKeyHash),
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -161,18 +164,18 @@ public class AdminClient {
         params.add("endpointProfileKey", endpointProfileKey);
         params.add("version", version);
         params.add("serverProfileBody", serverProfileBody);
-        return restTemplate.postForObject(url + "updateServerProfile", params, EndpointProfileDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "updateServerProfile", params, EndpointProfileDto.class);
     }
 
     public AuthResultDto checkAuth() throws Exception {
-        return restTemplate.getForObject(url + "auth/checkAuth", AuthResultDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "auth/checkAuth", AuthResultDto.class);
     }
 
     public void createKaaAdmin(String username, String password) throws Exception {
         MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();
         params.add("username", username);
         params.add("password", password);
-        restTemplate.postForObject(url + "auth/createKaaAdmin", params, Void.class);
+        restTemplate.postForObject(restTemplate.getUrl() + "auth/createKaaAdmin", params, Void.class);
     }
 
     public void login(String username, String password) {
@@ -190,53 +193,53 @@ public class AdminClient {
         params.add("username", username);
         params.add("oldPassword", oldPassword);
         params.add("newPassword", newPassword);
-        return restTemplate.postForObject(url + "auth/changePassword", params, ResultCode.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "auth/changePassword", params, ResultCode.class);
     }
 
     public TenantUserDto editTenant(TenantUserDto tenant) throws Exception {
-        return restTemplate.postForObject(url + "tenant", tenant, TenantUserDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "tenant", tenant, TenantUserDto.class);
     }
 
     public List<TenantUserDto> getTenants() throws Exception {
         ParameterizedTypeReference<List<TenantUserDto>> typeRef = new ParameterizedTypeReference<List<TenantUserDto>>() {
         };
-        ResponseEntity<List<TenantUserDto>> entity = restTemplate.exchange(url + "tenants", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<TenantUserDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "tenants", HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public TenantUserDto getTenant(String userId) throws Exception {
-        return restTemplate.getForObject(url + "tenant/" + userId, TenantUserDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "tenant/" + userId, TenantUserDto.class);
     }
 
     public void deleteTenant(String userId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("userId", userId);
-        restTemplate.postForLocation(url + "delTenant", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delTenant", params);
     }
 
     public ApplicationDto editApplication(ApplicationDto application) throws Exception {
-        return restTemplate.postForObject(url + "application", application, ApplicationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "application", application, ApplicationDto.class);
     }
 
     public List<ApplicationDto> getApplications() throws Exception {
         ParameterizedTypeReference<List<ApplicationDto>> typeRef = new ParameterizedTypeReference<List<ApplicationDto>>() {
         };
-        ResponseEntity<List<ApplicationDto>> entity = restTemplate.exchange(url + "applications", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<ApplicationDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "applications", HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public ApplicationDto getApplication(String applicationId) throws Exception {
-        return restTemplate.getForObject(url + "application/" + applicationId, ApplicationDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "application/" + applicationId, ApplicationDto.class);
     }
 
     public ApplicationDto getApplicationByApplicationToken(String token) throws Exception {
-        return restTemplate.getForObject(url + "application/token/" + token, ApplicationDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "application/token/" + token, ApplicationDto.class);
     }
 
     public void deleteApplication(String applicationId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("applicationId", applicationId);
-        restTemplate.postForLocation(url + "delApplication", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delApplication", params);
     }
 
     public ConfigurationSchemaDto createConfigurationSchema(ConfigurationSchemaDto configurationSchema, String schemaResource)
@@ -249,19 +252,19 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("configurationSchema", configurationSchema);
         params.add("file", schemaResource);
-        return restTemplate.postForObject(url + "createConfigurationSchema", params, ConfigurationSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "createConfigurationSchema", params, ConfigurationSchemaDto.class);
     }
 
     public ConfigurationSchemaDto editConfigurationSchema(ConfigurationSchemaDto configurationSchema) throws Exception {
-        return restTemplate.postForObject(url + "editConfigurationSchema", configurationSchema, ConfigurationSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "editConfigurationSchema", configurationSchema, ConfigurationSchemaDto.class);
     }
 
     public EndpointProfileSchemaDto saveProfileSchema(EndpointProfileSchemaDto profileSchema) throws Exception {
-        return restTemplate.postForObject(url + "saveProfileSchema", profileSchema, EndpointProfileSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "saveProfileSchema", profileSchema, EndpointProfileSchemaDto.class);
     }
 
     public ServerProfileSchemaDto saveServerProfileSchema(ServerProfileSchemaDto serverProfileSchema) throws Exception {
-        return restTemplate.postForObject(url + "saveServerProfileSchema", serverProfileSchema, ServerProfileSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "saveServerProfileSchema", serverProfileSchema, ServerProfileSchemaDto.class);
     }
 
     public NotificationSchemaDto createNotificationSchema(NotificationSchemaDto notificationSchema, String schemaResource) throws Exception {
@@ -273,11 +276,11 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("notificationSchema", notificationSchema);
         params.add("file", schemaResource);
-        return restTemplate.postForObject(url + "createNotificationSchema", params, NotificationSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "createNotificationSchema", params, NotificationSchemaDto.class);
     }
 
     public NotificationSchemaDto editNotificationSchema(NotificationSchemaDto notificationSchema) throws Exception {
-        return restTemplate.postForObject(url + "editNotificationSchema", notificationSchema, NotificationSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "editNotificationSchema", notificationSchema, NotificationSchemaDto.class);
     }
 
     public LogSchemaDto createLogSchema(LogSchemaDto logSchema, String schemaResource) throws Exception {
@@ -288,32 +291,32 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("logSchema", logSchema);
         params.add("file", schemaResource);
-        return restTemplate.postForObject(url + "createLogSchema", params, LogSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "createLogSchema", params, LogSchemaDto.class);
     }
 
     public LogSchemaDto editLogSchema(LogSchemaDto logSchema) throws Exception {
-        return restTemplate.postForObject(url + "editLogSchema", logSchema, LogSchemaDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "editLogSchema", logSchema, LogSchemaDto.class);
     }
 
     public TopicDto createTopic(TopicDto topic) throws Exception {
-        return restTemplate.postForObject(url + "topic", topic, TopicDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "topic", topic, TopicDto.class);
     }
 
     public TopicDto getTopic(String topicId) throws Exception {
-        return restTemplate.getForObject(url + "topic/" + topicId, TopicDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "topic/" + topicId, TopicDto.class);
     }
 
     public List<TopicDto> getTopicsByApplicationId(String applicationId) throws Exception {
         ParameterizedTypeReference<List<TopicDto>> typeRef = new ParameterizedTypeReference<List<TopicDto>>() {
         };
-        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(url + "topics/" + applicationId, HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "topics/" + applicationId, HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public List<TopicDto> getTopicsByEndpointGroupId(String endpointGroupId) throws Exception {
         ParameterizedTypeReference<List<TopicDto>> typeRef = new ParameterizedTypeReference<List<TopicDto>>() {
         };
-        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(url + "topics?endpointGroupId={endpointGroupId}", HttpMethod.GET,
+        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "topics?endpointGroupId={endpointGroupId}", HttpMethod.GET,
                 null, typeRef, endpointGroupId);
         return entity.getBody();
     }
@@ -321,7 +324,7 @@ public class AdminClient {
     public List<TopicDto> getVacantTopicsByEndpointGroupId(String endpointGroupId) throws Exception {
         ParameterizedTypeReference<List<TopicDto>> typeRef = new ParameterizedTypeReference<List<TopicDto>>() {
         };
-        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(url + "vacantTopics/" + endpointGroupId, HttpMethod.GET, null,
+        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "vacantTopics/" + endpointGroupId, HttpMethod.GET, null,
                 typeRef);
         return entity.getBody();
     }
@@ -334,14 +337,14 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("endpointGroupId", endpointGroupId);
         params.add("topicId", topicId);
-        restTemplate.postForObject(url + "addTopicToEpGroup", params, Void.class);
+        restTemplate.postForObject(restTemplate.getUrl() + "addTopicToEpGroup", params, Void.class);
     }
 
     public void removeTopicFromEndpointGroup(String endpointGroupId, String topicId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("endpointGroupId", endpointGroupId);
         params.add("topicId", topicId);
-        restTemplate.postForObject(url + "removeTopicFromEpGroup", params, Void.class);
+        restTemplate.postForObject(restTemplate.getUrl() + "removeTopicFromEpGroup", params, Void.class);
     }
 
     public NotificationDto sendNotification(NotificationDto notification, String notificationResource) throws Exception {
@@ -357,7 +360,7 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("notification", notification);
         params.add("file", resource);
-        return restTemplate.postForObject(url + "sendNotification", params, NotificationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "sendNotification", params, NotificationDto.class);
     }
 
     public EndpointNotificationDto sendUnicastNotification(NotificationDto notification, String clientKeyHash, String notificationResource)
@@ -376,7 +379,7 @@ public class AdminClient {
         params.add("notification", notification);
         params.add("clientKeyHash", clientKeyHash);
         params.add("file", resource);
-        return restTemplate.postForObject(url + "sendUnicastNotification", params, EndpointNotificationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "sendUnicastNotification", params, EndpointNotificationDto.class);
     }
 
     public EndpointNotificationDto sendUnicastNotificationSimplified(NotificationDto notification, String clientKeyHash,
@@ -385,37 +388,37 @@ public class AdminClient {
         params.add("notification", notification);
         params.add("clientKeyHash", clientKeyHash);
         params.add("file", getStringResource("notification", notificationMessage));
-        return restTemplate.postForObject(url + "sendUnicastNotification", params, EndpointNotificationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "sendUnicastNotification", params, EndpointNotificationDto.class);
     }
 
     public ConfigurationSchemaDto getConfigurationSchema(String configurationSchemaId) throws Exception {
-        return restTemplate.getForObject(url + "configurationSchema/" + configurationSchemaId, ConfigurationSchemaDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "configurationSchema/" + configurationSchemaId, ConfigurationSchemaDto.class);
     }
 
     public EndpointProfileSchemaDto getProfileSchema(String profileSchemaId) throws Exception {
-        return restTemplate.getForObject(url + "profileSchema/" + profileSchemaId, EndpointProfileSchemaDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "profileSchema/" + profileSchemaId, EndpointProfileSchemaDto.class);
     }
 
     public ServerProfileSchemaDto getServerProfileSchema(String serverProfileSchemaId) throws Exception {
-        return restTemplate.getForObject(url + "serverProfileSchema/" + serverProfileSchemaId, ServerProfileSchemaDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "serverProfileSchema/" + serverProfileSchemaId, ServerProfileSchemaDto.class);
     }
 
     public NotificationSchemaDto getNotificationSchema(String notificationSchemaId) throws Exception {
-        return restTemplate.getForObject(url + "notificationSchema/" + notificationSchemaId, NotificationSchemaDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "notificationSchema/" + notificationSchemaId, NotificationSchemaDto.class);
     }
 
     public LogSchemaDto getLogSchema(String logSchemaId) throws Exception {
-        return restTemplate.getForObject(url + "logSchema/" + logSchemaId, LogSchemaDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "logSchema/" + logSchemaId, LogSchemaDto.class);
     }
 
     public SchemaVersions getSchemaVersionsByApplicationId(String applicationId) throws Exception {
-        return restTemplate.getForObject(url + "schemaVersions/" + applicationId, SchemaVersions.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "schemaVersions/" + applicationId, SchemaVersions.class);
     }
 
     public List<ConfigurationSchemaDto> getConfigurationSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<ConfigurationSchemaDto>> typeRef = new ParameterizedTypeReference<List<ConfigurationSchemaDto>>() {
         };
-        ResponseEntity<List<ConfigurationSchemaDto>> entity = restTemplate.exchange(url + "configurationSchemas/" + applicationId,
+        ResponseEntity<List<ConfigurationSchemaDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "configurationSchemas/" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -423,7 +426,7 @@ public class AdminClient {
     public List<EndpointProfileSchemaDto> getProfileSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<EndpointProfileSchemaDto>> typeRef = new ParameterizedTypeReference<List<EndpointProfileSchemaDto>>() {
         };
-        ResponseEntity<List<EndpointProfileSchemaDto>> entity = restTemplate.exchange(url + "profileSchemas/" + applicationId,
+        ResponseEntity<List<EndpointProfileSchemaDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "profileSchemas/" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -431,7 +434,7 @@ public class AdminClient {
     public List<ServerProfileSchemaDto> getServerProfileSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<ServerProfileSchemaDto>> typeRef = new ParameterizedTypeReference<List<ServerProfileSchemaDto>>() {
         };
-        ResponseEntity<List<ServerProfileSchemaDto>> entity = restTemplate.exchange(url + "serverProfileSchemas/" + applicationId,
+        ResponseEntity<List<ServerProfileSchemaDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "serverProfileSchemas/" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -439,7 +442,7 @@ public class AdminClient {
     public List<NotificationSchemaDto> getNotificationSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<NotificationSchemaDto>> typeRef = new ParameterizedTypeReference<List<NotificationSchemaDto>>() {
         };
-        ResponseEntity<List<NotificationSchemaDto>> entity = restTemplate.exchange(url + "notificationSchemas/" + applicationId,
+        ResponseEntity<List<NotificationSchemaDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "notificationSchemas/" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -447,7 +450,7 @@ public class AdminClient {
     public List<VersionDto> getUserNotificationSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<VersionDto>> typeRef = new ParameterizedTypeReference<List<VersionDto>>() {
         };
-        ResponseEntity<List<VersionDto>> entity = restTemplate.exchange(url + "userNotificationSchemas/" + applicationId, HttpMethod.GET,
+        ResponseEntity<List<VersionDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "userNotificationSchemas/" + applicationId, HttpMethod.GET,
                 null, typeRef);
         return entity.getBody();
     }
@@ -455,19 +458,19 @@ public class AdminClient {
     public List<LogSchemaDto> getLogSchemas(String applicationId) throws Exception {
         ParameterizedTypeReference<List<LogSchemaDto>> typeRef = new ParameterizedTypeReference<List<LogSchemaDto>>() {
         };
-        ResponseEntity<List<LogSchemaDto>> entity = restTemplate.exchange(url + "logSchemas/" + applicationId, HttpMethod.GET, null,
+        ResponseEntity<List<LogSchemaDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "logSchemas/" + applicationId, HttpMethod.GET, null,
                 typeRef);
         return entity.getBody();
     }
 
     public List<TopicDto> getTopics(String applicationId) throws Exception {
         ParameterizedTypeReference<List<TopicDto>> typeRef = new ParameterizedTypeReference<List<TopicDto>>() {};
-        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(url + "topics/"+applicationId, HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<TopicDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "topics/"+applicationId, HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public TopicDto editTopic(TopicDto topic) throws Exception {
-        return restTemplate.postForObject(url + "topic", topic, TopicDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "topic", topic, TopicDto.class);
     }
 
     public void deleteTopic(TopicDto topic) throws Exception {
@@ -477,27 +480,27 @@ public class AdminClient {
     public void deleteTopic(String topicId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("topicId", topicId);
-        restTemplate.postForLocation(url + "delTopic", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delTopic", params);
     }
 
     public EndpointGroupDto editEndpointGroup(EndpointGroupDto endpointGroup) throws Exception {
-        return restTemplate.postForObject(url + "endpointGroup", endpointGroup, EndpointGroupDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "endpointGroup", endpointGroup, EndpointGroupDto.class);
     }
 
     public EndpointGroupDto getEndpointGroup(String endpointGroupId) throws Exception {
-        return restTemplate.getForObject(url + "endpointGroup/" + endpointGroupId, EndpointGroupDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "endpointGroup/" + endpointGroupId, EndpointGroupDto.class);
     }
 
     public void deleteEndpointGroup(String endpointGroupId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("endpointGroupId", endpointGroupId);
-        restTemplate.postForLocation(url + "delEndpointGroup", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delEndpointGroup", params);
     }
 
     public List<EndpointGroupDto> getEndpointGroups(String applicationId) throws Exception {
         ParameterizedTypeReference<List<EndpointGroupDto>> typeRef = new ParameterizedTypeReference<List<EndpointGroupDto>>() {
         };
-        ResponseEntity<List<EndpointGroupDto>> entity = restTemplate.exchange(url + "endpointGroups/" + applicationId, HttpMethod.GET,
+        ResponseEntity<List<EndpointGroupDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "endpointGroups/" + applicationId, HttpMethod.GET,
                 null, typeRef);
         return entity.getBody();
     }
@@ -505,7 +508,7 @@ public class AdminClient {
     public List<VersionDto> getVacantConfigurationSchemasByEndpointGroupId(String endpointGroupId) throws Exception {
         ParameterizedTypeReference<List<VersionDto>> typeRef = new ParameterizedTypeReference<List<VersionDto>>() {
         };
-        ResponseEntity<List<VersionDto>> entity = restTemplate.exchange(url + "vacantConfigurationSchemas/" + endpointGroupId,
+        ResponseEntity<List<VersionDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "vacantConfigurationSchemas/" + endpointGroupId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -514,47 +517,47 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("schemaId", schemaId);
         params.add("endpointGroupId", endpointGroupId);
-        restTemplate.postForObject(url + "delConfigurationRecord", params, Void.class);
+        restTemplate.postForObject(restTemplate.getUrl() + "delConfigurationRecord", params, Void.class);
     }
 
     public List<ConfigurationRecordDto> getConfigurationRecords(String endpointGroupId, boolean includeDeprecated) throws Exception {
         ParameterizedTypeReference<List<ConfigurationRecordDto>> typeRef = new ParameterizedTypeReference<List<ConfigurationRecordDto>>() {
         };
-        ResponseEntity<List<ConfigurationRecordDto>> entity = restTemplate.exchange(url
+        ResponseEntity<List<ConfigurationRecordDto>> entity = restTemplate.exchange(restTemplate.getUrl()
                 + "configurationRecords?endpointGroupId={endpointGroupId}&includeDeprecated={includeDeprecated}", HttpMethod.GET, null,
                 typeRef, endpointGroupId, includeDeprecated);
         return entity.getBody();
     }
 
     public ConfigurationDto editConfiguration(ConfigurationDto configuration) throws Exception {
-        return restTemplate.postForObject(url + "configuration", configuration, ConfigurationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "configuration", configuration, ConfigurationDto.class);
     }
 
     public ConfigurationRecordDto getConfigurationRecord(String schemaId, String endpointGroupId) throws Exception {
-        return restTemplate.getForObject(url + "configurationRecord?schemaId={schemaId}&endpointGroupId={endpointGroupId}",
+        return restTemplate.getForObject(restTemplate.getUrl() + "configurationRecord?schemaId={schemaId}&endpointGroupId={endpointGroupId}",
                 ConfigurationRecordDto.class, schemaId, endpointGroupId);
     }
 
     public ConfigurationDto activateConfiguration(String configurationId) throws Exception {
-        return restTemplate.postForObject(url + "activateConfiguration", configurationId, ConfigurationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "activateConfiguration", configurationId, ConfigurationDto.class);
     }
 
     public ConfigurationDto deactivateConfiguration(String configurationId) throws Exception {
-        return restTemplate.postForObject(url + "deactivateConfiguration", configurationId, ConfigurationDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "deactivateConfiguration", configurationId, ConfigurationDto.class);
     }
 
     public void editUserConfiguration(EndpointUserConfigurationDto endpointUserConfiguration) throws Exception {
-        restTemplate.postForLocation(url + "userConfiguration", endpointUserConfiguration);
+        restTemplate.postForLocation(restTemplate.getUrl() + "userConfiguration", endpointUserConfiguration);
     }
 
     public ProfileFilterDto editProfileFilter(ProfileFilterDto profileFilter) throws Exception {
-        return restTemplate.postForObject(url + "profileFilter", profileFilter, ProfileFilterDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "profileFilter", profileFilter, ProfileFilterDto.class);
     }
 
     public ProfileFilterRecordDto getProfileFilterRecord(String endpointProfileSchemaId, String serverProfileSchemaId,
             String endpointGroupId) throws Exception {
         StringBuilder sb = new StringBuilder();
-        sb.append(url).append("profileFilterRecord?endpointGroupId={endpointGroupId}");
+        sb.append(restTemplate.getUrl()).append("profileFilterRecord?endpointGroupId={endpointGroupId}");
         List<Object> urlVariables = new ArrayList<>();
         urlVariables.add(endpointGroupId);
         if (endpointProfileSchemaId != null) {
@@ -571,7 +574,7 @@ public class AdminClient {
     public List<ProfileVersionPairDto> getVacantProfileSchemasByEndpointGroupId(String endpointGroupId) throws Exception {
         ParameterizedTypeReference<List<ProfileVersionPairDto>> typeRef = new ParameterizedTypeReference<List<ProfileVersionPairDto>>() {
         };
-        ResponseEntity<List<ProfileVersionPairDto>> entity = restTemplate.exchange(url + "vacantProfileSchemas/" + endpointGroupId, HttpMethod.GET,
+        ResponseEntity<List<ProfileVersionPairDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "vacantProfileSchemas/" + endpointGroupId, HttpMethod.GET,
                 null, typeRef);
         return entity.getBody();
     }
@@ -581,67 +584,67 @@ public class AdminClient {
         params.add("endpointProfileSchemaId", endpointProfileSchemaId);
         params.add("serverProfileSchemaId", serverProfileSchemaId);
         params.add("endpointGroupId", endpointGroupId);
-        restTemplate.postForObject(url + "delProfileFilterRecord", params, Void.class);
+        restTemplate.postForObject(restTemplate.getUrl() + "delProfileFilterRecord", params, Void.class);
     }
 
     public List<ProfileFilterRecordDto> getProfileFilterRecords(String endpointGroupId, boolean includeDeprecated) throws Exception {
         ParameterizedTypeReference<List<ProfileFilterRecordDto>> typeRef = new ParameterizedTypeReference<List<ProfileFilterRecordDto>>() {
         };
-        ResponseEntity<List<ProfileFilterRecordDto>> entity = restTemplate.exchange(url
+        ResponseEntity<List<ProfileFilterRecordDto>> entity = restTemplate.exchange(restTemplate.getUrl()
                 + "profileFilterRecords?endpointGroupId={endpointGroupId}&includeDeprecated={includeDeprecated}", HttpMethod.GET, null,
                 typeRef, endpointGroupId, includeDeprecated);
         return entity.getBody();
     }
 
     public ProfileFilterDto activateProfileFilter(String profileFilterId) throws Exception {
-        return restTemplate.postForObject(url + "activateProfileFilter", profileFilterId, ProfileFilterDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "activateProfileFilter", profileFilterId, ProfileFilterDto.class);
     }
 
     public ProfileFilterDto deactivateProfileFilter(String profileFilterId) throws Exception {
-        return restTemplate.postForObject(url + "deactivateProfileFilter", profileFilterId, ProfileFilterDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "deactivateProfileFilter", profileFilterId, ProfileFilterDto.class);
     }
 
     public UserDto editUser(UserDto user) throws Exception {
-        return restTemplate.postForObject(url + "user", user, UserDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "user", user, UserDto.class);
     }
 
     public UserDto getUser(String userId) throws Exception {
-        return restTemplate.getForObject(url + "user/" + userId, UserDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "user/" + userId, UserDto.class);
     }
 
     public void deleteUser(String userId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("userId", userId);
-        restTemplate.postForLocation(url + "delUser", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delUser", params);
     }
 
     public List<UserDto> getUsers() throws Exception {
         ParameterizedTypeReference<List<UserDto>> typeRef = new ParameterizedTypeReference<List<UserDto>>() {
         };
-        ResponseEntity<List<UserDto>> entity = restTemplate.exchange(url + "users", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<UserDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "users", HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public LogSchemaDto getLogSchemaByApplicationTokenAndSchemaVersion(String applicationToken, int schemaVersion) throws Exception {
         ParameterizedTypeReference<LogSchemaDto> typeRef = new ParameterizedTypeReference<LogSchemaDto>() {
         };
-        ResponseEntity<LogSchemaDto> entity = restTemplate.exchange(url + "logSchema/" + applicationToken + "/" + schemaVersion,
+        ResponseEntity<LogSchemaDto> entity = restTemplate.exchange(restTemplate.getUrl() + "logSchema/" + applicationToken + "/" + schemaVersion,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public EventClassFamilyDto editEventClassFamily(EventClassFamilyDto eventClassFamily) throws Exception {
-        return restTemplate.postForObject(url + "eventClassFamily", eventClassFamily, EventClassFamilyDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "eventClassFamily", eventClassFamily, EventClassFamilyDto.class);
     }
 
     public EventClassFamilyDto getEventClassFamilyById(String ecfId) {
-        return restTemplate.getForObject(url + "eventClassFamily/" + ecfId, EventClassFamilyDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "eventClassFamily/" + ecfId, EventClassFamilyDto.class);
     }
 
     public EventClassFamilyDto getEventClassFamily(String familyName) {
         ParameterizedTypeReference<List<EventClassFamilyDto>> typeRef = new ParameterizedTypeReference<List<EventClassFamilyDto>>() {
         };
-        ResponseEntity<List<EventClassFamilyDto>> entity = restTemplate.exchange(url + "eventClassFamilies", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<EventClassFamilyDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "eventClassFamilies", HttpMethod.GET, null, typeRef);
         List<EventClassFamilyDto> familyList = entity.getBody();
         for (EventClassFamilyDto family : familyList) {
             if (family.getClassName().equals(familyName)) {
@@ -654,7 +657,7 @@ public class AdminClient {
     public List<EventClassFamilyDto> getEventClassFamilies() {
         ParameterizedTypeReference<List<EventClassFamilyDto>> typeRef = new ParameterizedTypeReference<List<EventClassFamilyDto>>() {
         };
-        ResponseEntity<List<EventClassFamilyDto>> entity = restTemplate.exchange(url + "eventClassFamilies", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<EventClassFamilyDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "eventClassFamilies", HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
@@ -662,14 +665,14 @@ public class AdminClient {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("eventClassFamilyId", eventClassFamilyId);
         params.add("file", getFileResource(schemaResource));
-        restTemplate.postForLocation(url + "addEventClassFamilySchema", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "addEventClassFamilySchema", params);
     }
 
     public List<EventClassDto> getEventClassesByFamilyIdVersionAndType(String eventClassFamilyId, int version, EventClassType type)
             throws Exception {
         ParameterizedTypeReference<List<EventClassDto>> typeRef = new ParameterizedTypeReference<List<EventClassDto>>() {
         };
-        ResponseEntity<List<EventClassDto>> entity = restTemplate.exchange(url
+        ResponseEntity<List<EventClassDto>> entity = restTemplate.exchange(restTemplate.getUrl()
                 + "eventClasses?eventClassFamilyId={eventClassFamilyId}&version={version}&type={type}", HttpMethod.GET, null, typeRef,
                 eventClassFamilyId, version, type);
         return entity.getBody();
@@ -677,17 +680,17 @@ public class AdminClient {
 
     public ApplicationEventFamilyMapDto editApplicationEventFamilyMap(ApplicationEventFamilyMapDto applicationEventFamilyMap)
             throws Exception {
-        return restTemplate.postForObject(url + "applicationEventMap", applicationEventFamilyMap, ApplicationEventFamilyMapDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "applicationEventMap", applicationEventFamilyMap, ApplicationEventFamilyMapDto.class);
     }
 
     public ApplicationEventFamilyMapDto getApplicationEventFamilyMap(String aefMapId) throws Exception {
-        return restTemplate.getForObject(url + "applicationEventMap/" + aefMapId, ApplicationEventFamilyMapDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "applicationEventMap/" + aefMapId, ApplicationEventFamilyMapDto.class);
     }
 
     public List<ApplicationEventFamilyMapDto> getApplicationEventFamilyMapsByApplicationId(String applicationId) throws Exception {
         ParameterizedTypeReference<List<ApplicationEventFamilyMapDto>> typeRef = new ParameterizedTypeReference<List<ApplicationEventFamilyMapDto>>() {
         };
-        ResponseEntity<List<ApplicationEventFamilyMapDto>> entity = restTemplate.exchange(url + "applicationEventMaps/" + applicationId,
+        ResponseEntity<List<ApplicationEventFamilyMapDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "applicationEventMaps/" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -695,7 +698,7 @@ public class AdminClient {
     public List<EcfInfoDto> getVacantEventClassFamiliesByApplicationId(String applicationId) throws Exception {
         ParameterizedTypeReference<List<EcfInfoDto>> typeRef = new ParameterizedTypeReference<List<EcfInfoDto>>() {
         };
-        ResponseEntity<List<EcfInfoDto>> entity = restTemplate.exchange(url + "vacantEventClassFamilies/" + applicationId, HttpMethod.GET,
+        ResponseEntity<List<EcfInfoDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "vacantEventClassFamilies/" + applicationId, HttpMethod.GET,
                 null, typeRef);
         return entity.getBody();
     }
@@ -703,23 +706,23 @@ public class AdminClient {
     public List<AefMapInfoDto> getEventClassFamiliesByApplicationId(String applicationId) throws Exception {
         ParameterizedTypeReference<List<AefMapInfoDto>> typeRef = new ParameterizedTypeReference<List<AefMapInfoDto>>() {
         };
-        ResponseEntity<List<AefMapInfoDto>> entity = restTemplate.exchange(url + "eventClassFamilies/" + applicationId, HttpMethod.GET,
+        ResponseEntity<List<AefMapInfoDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "eventClassFamilies/" + applicationId, HttpMethod.GET,
                 null, typeRef);
         return entity.getBody();
     }
 
     public LogAppenderDto editLogAppenderDto(LogAppenderDto logAppenderDto) throws Exception {
-        return restTemplate.postForObject(url + "logAppender", logAppenderDto, LogAppenderDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "logAppender", logAppenderDto, LogAppenderDto.class);
     }
 
     public LogAppenderDto getLogAppender(String logAppenderId) throws Exception {
-        return restTemplate.getForObject(url + "logAppender/" + logAppenderId, LogAppenderDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "logAppender/" + logAppenderId, LogAppenderDto.class);
     }
 
     public List<LogAppenderDto> getLogAppenders(String applicationId) throws Exception {
         ParameterizedTypeReference<List<LogAppenderDto>> typeRef = new ParameterizedTypeReference<List<LogAppenderDto>>() {
         };
-        ResponseEntity<List<LogAppenderDto>> entity = restTemplate.exchange(url + "logAppenders/" + applicationId, HttpMethod.GET, null,
+        ResponseEntity<List<LogAppenderDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "logAppenders/" + applicationId, HttpMethod.GET, null,
                 typeRef);
         return entity.getBody();
     }
@@ -727,51 +730,51 @@ public class AdminClient {
     public void deleteLogAppender(String logAppenderId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("logAppenderId", logAppenderId);
-        restTemplate.postForLocation(url + "delLogAppender", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delLogAppender", params);
     }
 
     public UserVerifierDto getUserVerifier(String userVerifierId) throws Exception {
-        return restTemplate.getForObject(url + "userVerifier/" + userVerifierId, UserVerifierDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "userVerifier/" + userVerifierId, UserVerifierDto.class);
     }
 
     public List<UserVerifierDto> getUserVerifiersByApplicationId(String applicationId) {
         ParameterizedTypeReference<List<UserVerifierDto>> typeRef = new ParameterizedTypeReference<List<UserVerifierDto>>() {
         };
-        ResponseEntity<List<UserVerifierDto>> entity = restTemplate.exchange(url + "userVerifiers/" + applicationId, HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<UserVerifierDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "userVerifiers/" + applicationId, HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public UserVerifierDto editUserVerifierDto(UserVerifierDto userVerifierDto) throws Exception {
-        return restTemplate.postForObject(url + "userVerifier", userVerifierDto, UserVerifierDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "userVerifier", userVerifierDto, UserVerifierDto.class);
     }
 
     public void deleteUserVerifier(String userVerifierId) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("userVerifierId", userVerifierId);
-        restTemplate.postForLocation(url + "delUserVerifier", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "delUserVerifier", params);
     }
 
     public SdkProfileDto createSdkProfile(SdkProfileDto sdkProfile) throws Exception {
-        return restTemplate.postForObject(url + "createSdkProfile", sdkProfile, SdkProfileDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "createSdkProfile", sdkProfile, SdkProfileDto.class);
     }
 
     public void deleteSdkProfile(SdkProfileDto sdkProfile) throws Exception {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("topicId", sdkProfile.getId());
-        restTemplate.postForLocation(url + "deleteSdkProfile", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "deleteSdkProfile", params);
     }
 
     public SdkProfileDto getSdkProfile(String sdkProfileId) throws Exception {
         ParameterizedTypeReference<SdkProfileDto> typeRef = new ParameterizedTypeReference<SdkProfileDto>() {
         };
-        ResponseEntity<SdkProfileDto> entity = restTemplate.exchange(url + "sdkProfile/" + sdkProfileId, HttpMethod.GET, null, typeRef);
+        ResponseEntity<SdkProfileDto> entity = restTemplate.exchange(restTemplate.getUrl() + "sdkProfile/" + sdkProfileId, HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public List<SdkProfileDto> getSdkProfiles(String applicationId) throws Exception {
         ParameterizedTypeReference<List<SdkProfileDto>> typeRef = new ParameterizedTypeReference<List<SdkProfileDto>>() {
         };
-        ResponseEntity<List<SdkProfileDto>> entity = restTemplate.exchange(url + "sdkProfiles/" + applicationId, HttpMethod.GET, null,
+        ResponseEntity<List<SdkProfileDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "sdkProfiles/" + applicationId, HttpMethod.GET, null,
                 typeRef);
         return entity.getBody();
     }
@@ -782,7 +785,7 @@ public class AdminClient {
         parameters.add("sdkProfileId", sdkProfileId);
         parameters.add("targetPlatform", targetPlatform.toString());
         RequestCallback request = new DataRequestCallback<>(parameters);
-        restTemplate.execute(url + "sdk", HttpMethod.POST, request, extractor);
+        restTemplate.execute(restTemplate.getUrl() + "sdk", HttpMethod.POST, request, extractor);
     }
 
     public FileData downloadSdk(String sdkProfileId, SdkPlatform targetPlatform) {
@@ -791,39 +794,39 @@ public class AdminClient {
         parameters.add("sdkProfileId", sdkProfileId);
         parameters.add("targetPlatform", targetPlatform.toString());
         RequestCallback request = new DataRequestCallback<>(parameters);
-        return restTemplate.execute(url + "sdk", HttpMethod.POST, request, extractor);
+        return restTemplate.execute(restTemplate.getUrl() + "sdk", HttpMethod.POST, request, extractor);
     }
 
     public void downloadSdk(SdkProfileDto key, String destination) throws Exception {
         FileResponseExtractor extractor = new FileResponseExtractor(new File(destination));
         RequestCallback request = new DataRequestCallback<>(key);
-        restTemplate.execute(url + "sdk", HttpMethod.POST, request, extractor);
+        restTemplate.execute(restTemplate.getUrl() + "sdk", HttpMethod.POST, request, extractor);
         logger.info("Downloaded sdk to file '{}'", extractor.getDestFile());
     }
 
     public FileData downloadLogRecordLibrary(RecordKey key) throws Exception {
         FileDataResponseExtractor extractor = new FileDataResponseExtractor();
         RequestCallback request = new DataRequestCallback<>(key);
-        FileData data = restTemplate.execute(url + "logLibrary", HttpMethod.POST, request, extractor);
+        FileData data = restTemplate.execute(restTemplate.getUrl() + "logLibrary", HttpMethod.POST, request, extractor);
         return data;
     }
 
     public FileData downloadLogRecordSchema(RecordKey key) throws Exception {
         FileDataResponseExtractor extractor = new FileDataResponseExtractor();
         RequestCallback request = new DataRequestCallback<>(key);
-        FileData data = restTemplate.execute(url + "logRecordSchema", HttpMethod.POST, request, extractor);
+        FileData data = restTemplate.execute(restTemplate.getUrl() + "logRecordSchema", HttpMethod.POST, request, extractor);
         return data;
     }
 
     public FileData downloadSdk(SdkProfileDto key) throws Exception {
         FileDataResponseExtractor extractor = new FileDataResponseExtractor();
         RequestCallback request = new DataRequestCallback<>(key);
-        FileData data = restTemplate.execute(url + "sdk", HttpMethod.POST, request, extractor);
+        FileData data = restTemplate.execute(restTemplate.getUrl() + "sdk", HttpMethod.POST, request, extractor);
         return data;
     }
 
     public void flushSdkCache() throws Exception {
-        restTemplate.postForLocation(url + "flushSdkCache", null);
+        restTemplate.postForLocation(restTemplate.getUrl() + "flushSdkCache", null);
     }
 
     private static final Pattern fileNamePattern = Pattern.compile("^(.+?)filename=\"(.+?)\"");
@@ -968,31 +971,31 @@ public class AdminClient {
         if (applicationId != null) {
             params.add("applicationId", applicationId);
         }
-        return restTemplate.postForObject(url + "CTL/saveSchema", params, CTLSchemaInfoDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "CTL/saveSchema", params, CTLSchemaInfoDto.class);
     }
 
     public void deleteCTLSchemaByFqnAndVersion(String fqn, Integer version) {
         MultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
         params.add("fqn", fqn);
         params.add("version", version);
-        restTemplate.postForLocation(url + "CTL/deleteSchema", params);
+        restTemplate.postForLocation(restTemplate.getUrl() + "CTL/deleteSchema", params);
     }
 
     public CTLSchemaInfoDto getCTLSchemaByFqnAndVersion(String fqn, Integer version) {
-        return restTemplate.getForObject(url + "CTL/getSchema?fqn={fqn}&version={version}", CTLSchemaInfoDto.class, fqn, version);
+        return restTemplate.getForObject(restTemplate.getUrl() + "CTL/getSchema?fqn={fqn}&version={version}", CTLSchemaInfoDto.class, fqn, version);
     }
 
     public List<CTLSchemaMetaInfoDto> getCTLSchemasAvailable() {
         ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>> typeRef = new ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>>() {
         };
-        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(url + "CTL/getSchemas", HttpMethod.GET, null, typeRef);
+        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "CTL/getSchemas", HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public List<CTLSchemaMetaInfoDto> getCTLSchemasByScope(String scopeName) {
         ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>> typeRef = new ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>>() {
         };
-        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(url + "CTL/getSchemas?scope=" + scopeName,
+        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "CTL/getSchemas?scope=" + scopeName,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
@@ -1000,17 +1003,17 @@ public class AdminClient {
     public List<CTLSchemaMetaInfoDto> getCTLSchemasByApplicationId(String applicationId) {
         ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>> typeRef = new ParameterizedTypeReference<List<CTLSchemaMetaInfoDto>>() {
         };
-        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(url + "CTL/getSchemas?applicationId=" + applicationId,
+        ResponseEntity<List<CTLSchemaMetaInfoDto>> entity = restTemplate.exchange(restTemplate.getUrl() + "CTL/getSchemas?applicationId=" + applicationId,
                 HttpMethod.GET, null, typeRef);
         return entity.getBody();
     }
 
     public UserDto getUserProfile() throws Exception {
-        return restTemplate.getForObject(url + "userProfile", UserDto.class);
+        return restTemplate.getForObject(restTemplate.getUrl() + "userProfile", UserDto.class);
     }
 
     public UserDto editUserProfile(UserDto userDto) {
-        return restTemplate.postForObject(url + "userProfile", userDto, UserDto.class);
+        return restTemplate.postForObject(restTemplate.getUrl() + "userProfile", userDto, UserDto.class);
     }
 
 }
